{"version":3,"sources":["main/ui/pages/tablet-cards/tablet-cards.module.css","main/ui/pages/error404/404ErrImg/notfound.gif","main/ui/pages/error404/error404.tsx","main/ui/common/c1-SuperInputText/SuperInputText.tsx","main/ui/common/c2-SuperButton/SuperButton.tsx","main/dal/Api.tsx","main/bll/redusers/profile-reducer.tsx","main/bll/redusers/login-reducer.tsx","main/bll/redusers/registration-reducer.tsx","main/ui/common/ErrorWindow/ErrorWindow.tsx","main/ui/common/Preloader/Preloader.tsx","main/bll/redusers/recoverPass-reducer.tsx","main/ui/pages/login/login.tsx","main/ui/pages/profile/EmptyAva.png","main/ui/pages/profile/EditProfile/EditProfile.tsx","main/ui/pages/profile/profile.tsx","main/ui/common/ResponsePage/mail.png","main/ui/common/ResponsePage/error.png","main/ui/common/ResponsePage/success.png","main/ui/common/ResponsePage/ResponsePage.tsx","main/ui/pages/recoverPass/recoverPass.tsx","main/ui/pages/registration/registration.tsx","assets/img/user.png","main/bll/redusers/tablet-reducer.tsx","main/bll/redusers/card-reducer.tsx","main/ui/pages/tablet-cards/Paginator/Paginator.tsx","main/ui/common/c5-SuperSelect/SuperSelect.tsx","main/ui/pages/tablet-cards/tablet-cards.tsx","main/ui/pages/setNewPassword/setNewPassword.tsx","main/ui/pages/card/card.tsx","main/ui/routes/Routes.tsx","main/ui/header/header.tsx","main/bll/redusers/app-reducer.tsx","main/ui/App.tsx","reportWebVitals.ts","main/bll/store/store.tsx","main/bll/redusers/enterNewPass-reducer.tsx","main/bll/redusers/test-reducer.tsx","main/bll/redusers/error404-reducer.tsx","index.tsx","main/ui/header/header.module.css","main/ui/common/ResponsePage/ResponsePage.module.css","main/ui/common/c1-SuperInputText/SuperInputText.module.css","main/ui/pages/login/Login.module.css","main/ui/pages/profile/profile.module.css","main/ui/pages/recoverPass/recoverPass.module.css","main/ui/pages/registration/registation.module.css","main/ui/pages/profile/EditProfile/EditProfile.module.css","main/ui/pages/setNewPassword/setNewPassword.module.css","main/ui/common/c2-SuperButton/SuperButton.module.css","main/ui/pages/tablet-cards/Paginator/Paginator.module.css","main/ui/pages/error404/error404.module.css","main/ui/common/Preloader/Preloader.module.css","main/ui/pages/card/card.module.css","main/ui/common/c5-SuperSelect/SuperSelect.module.css"],"names":["module","exports","err404","s","Error404","className","src","errImg","alt","superInput","errorInput","SuperInputText","type","onChange","onChangeText","onKeyPress","onEnter","error","label","restProps","spanClassName","finalInputClassName","value","cn","group","required","e","currentTarget","key","placeholder","highlight","bar","SuperButton","red","disabled","onClick","finalClassName","default","isDisabledClass","disableClass","settings","withCredentials","instance","axios","create","baseURL","instanceHeroky","authAPI","data","post","delete","profileAPI","put","CardsPackAPI","params","min","max","sortPacks","page","pageCount","user_id","get","cardsPack","cardId","id","_id","name","CardAPI","sortCards","cardsPack_id","newCardParams","card","SET_PROFILE","setProfile","profile","InitialState","email","avatar","publicCardPacksCount","created","updated","isAdmin","verified","rememberMe","ProfileReducer","state","action","LOGIN_USER_TRUE","SET_LOGIN_ERROR","SET_LOADING","logInTrue","newLoginStatus","setLoginError","ErrorMSG","setIsLoading","newLoadingStatus","logIn","logInError","isLoading","LoginReducer","REG_CORRECT","REG_ERROR","SET_PROGRESS","setIsValidReg","newStatus","setSignUpError","setSignUpProgress","NewProgress","isValidReg","signUpProgress","SignUpError","RegistrationReducer","ErrorWindow","props","isEmptyEmailMsg","style","color","isEmptyPassMsg","isEmptyPass1Msg","isEmptyNameError","isEmptyUrlError","minLengthEmailMsg","minLengthPassMsg","maxLengthPassMsg","isValidEmailMsg","isPasswordCorrectReEnter","loader","Preloader","SET_IS_MESSAGE_SEND","SET_ERROR_MESSAGE","SetIsMessageSend","SetErrorRecoveryPassMessage","newMess","isMessageSend","ErrorMessageRecoveryPassword","RecoverPassReducer","useInput","initialValue","validator","useState","setValue","touched","setTouched","valid","isEmpty","setIsEmpty","minLengthError","setMinLengthError","maxLengthError","setMaxLengthError","isValidEmailError","setIsValidEmailError","inputValid","setInputValid","useEffect","length","test","String","toLowerCase","useValidator","hasOwnProperty","target","onBlur","t","Login","minLength","maxLength","isValidEmail","password","isLoginDisabled","dispatch","useDispatch","ErrorRequestMsg","useSelector","login","isLogin","to","PATH","PROFILE","autorization","form","hTit","tit","linkforgot","RECOVER_PASS","REGISTRATION","requestData","then","res","catch","errMsg","response","message","finally","logInTC","width","marginTop","marginBottom","EditProfile","onClickHandler","nameInput","avatarInput","saveClickHandler","newName","newAva","Data","updatedUser","LOGIN","ava_img","EmptyAva","Profile","isEditMode","setIsEditMode","nameProfile","CARDS_TABLET","textDecoration","imgMailSent","infText","ResponsePage","typeOfPage","errorText","mail","success","RecoverPass","isMessageSentStatus","recoverPass","from","setTimeout","Registration","password1","isPasswordDublicate","isCorrectReg","registration","SignUpErrorMsg","SignUpTC","SET_TABLET_INFO","SET_CURRENT_PAGE","SET_MIN_MAX_CARDS_COUNT","SET_SORT_STATUS","SET_SEARCH_TEXT","SET_SEARCHED_BY","SET_SEARCH_CARDS_ARR","SET_SEARCH_MODE","SET_PAGE_FOR_SEARCH_MODE","SET_SEARCH_EMPTY","SET_LOADING_STATUS","SET_ERROR_TEXT","SET_CHECK_BOX_VALUE","SetTabletInfo","newTabletInfo","SetSortStatus","newSortStatus","SetSearchCardsArr","newCards","SetSearchMode","newMode","SetSearchEmpty","msg","SetLoadingStatus","SetErrorText","newText","cardPacks","searchCardsArr","cardPacksTotalCount","maxCardsCount","minCardsCount","currentPage","sortStatus","searchText","checkBoxValue","searchedBy","searchMode","pageForSearchMode","searchEmpty","loadingStatus","getCarsPack","getState","tablet","promise","toString","Promise","all","SearchCorrectCards","searchBy","newCardsPacks","filter","indexOf","newTotalCount","temp","push","splice","user_name","TabletReducer","newPage","newMinMaxCurrent","SET_CARD_INFO","SET_LOADING_CARD_STATUS","SET_PAGE","SET_GRADE_VALUE","SET_SORT_CARD_STATUS","SET_SEARCH_CARD_TEXT","SET_SEARCHED_CARD_BY","SET_SEARCH_CARD_MODE","SET_SEARCH_CARD_ARR","SET_PAGE_FOR_SEARCH_CARD_MODE","SET_PAGE_COUNT","SET_ERROR_CARD_TEXT","SetCardInfo","newCardInfo","SetLoadingCardStatus","SetGradeValue","newRangeValue","SetSortCardStatus","SetSearchCardText","SetSearchedCardBy","SetSearchCardMode","SetSearchCardEmpty","SetSearchCardArr","newArr","SetErrorCardText","cards","searchCardArr","cardsTotalCount","maxGrade","minGrade","packUserId","gradeValue","loadingStatusCard","searchCardText","searchedCardBy","searchCardMode","searchCardEmpty","pageForSearchCardMode","errorCardText","getCard","searchCard","question","answer","CardReducer","pageSelect","btnGroup","Paginator","totalItemsCount","pageSize","cardType","pagesCount","Math","ceil","allPages","i","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","map","p","SetPageForSearchCardMode","SetPageForSearchMode","onPageChanged","select","SuperSelect","options","onChangeOption","mappedOptions","TabletCards","rangeValue","setRangeValue","search","setSearch","selectParamsOptions","selectedParams","setOptionParams","onClickSearchBtnHandler","sortBy","SetMinMaxCardsCurrent","onSortBtnHandler","onClickUpdateHandler","updateCards","onDeleteCardsHandler","DeleteCards","onHandlerSearch","user","user_card","logo","about","PostCards","polz","polztit","rangeValues","defaultValue","table","display","checked","inp","undefined","mainTab","activeBtn","margin","fontSize","cardsCount","Date","toLocaleDateString","SetNewPassword","token","useParams","resetPasswordToken","Card","tabletInfo","AllCards","gradeCardValue","setGradeCardValue","selectParamsCardOptions","selectedCardParams","setSelectedCardParams","onClickSearchCardHandler","newGradeValue","onHandlerCardSearch","onAddNewCardHandler","onDeleteCardHandler","DeleteCard","onUpdateCardHandler","UpdateCard","step","grade","toFixed","ERROR_404","TEST","CREATE_NEW_PASS","Routes","path","exact","render","header_tittle","header_nav","header_nav_active","Header","over","header","activeClassName","menuIcon","SET_IS_INITIALIZED","SetIsInitialized","newInitializedStatus","isInitialized","AppReducer","App","app","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","enterNewPass","error404","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,eAAiB,qCAAqC,QAAU,8BAA8B,KAAO,2BAA2B,UAAY,gCAAgC,KAAO,2BAA2B,KAAO,2BAA2B,MAAQ,4BAA4B,KAAO,2BAA2B,QAAU,8BAA8B,MAAQ,4BAA4B,IAAM,0BAA0B,IAAM,0BAA0B,QAAU,8BAA8B,YAAc,kCAAkC,UAAY,kC,kGCDziB,MAA0B,qC,wBCInCC,EAAQC,IAARD,OAUSE,EARE,WACb,OACI,qBAAKC,UAAWH,EAAhB,SACI,qBAAKI,IAAKC,EAAQC,IAAI,gB,yDCQ3BC,EAA0BN,IAA1BM,WAAYC,EAAcP,IAAdO,WAkDJC,EAhD2C,SAAC,GAUtD,EARGC,KAQF,IAPEC,EAOH,EAPGA,SAAUC,EAOb,EAPaA,aACVC,EAMH,EANGA,WAAYC,EAMf,EANeA,QACZC,EAKH,EALGA,MACAC,EAIH,EAJGA,MAEGC,GAEN,EAHGd,UAGH,EAHce,cAGd,sHAgBKC,EAAsBF,EAAUG,MAAQb,EAAaC,EAG3D,OAEA,sBAAKL,UAAWkB,IAAGC,MAAnB,UACI,mCACOC,UAAQ,EACRZ,SAvBc,SAACa,GACtBb,GACGA,EAASa,GAEZZ,GAAgBA,EAAaY,EAAEC,cAAcL,QAoBtCP,WAlBgB,SAACW,GACxBX,GAAcA,EAAWW,GAEzBV,GACa,UAAVU,EAAEE,KACFZ,EAAQU,IAcJrB,UAAWgB,EACXQ,YAAaZ,GACTE,IAEP,sBAAMd,UAAWkB,IAAGO,YACpB,sBAAMzB,UAAWkB,IAAGQ,MACpB,gCAAQb,Q,wBC7BLc,EAnBqC,SAAC,GAK/C,IAHEC,EAGH,EAHGA,IAAK5B,EAGR,EAHQA,UAAW6B,EAGnB,EAHmBA,SAAUC,EAG7B,EAH6BA,QACvBhB,EAEN,wDACKiB,EAAc,UAAMH,EAAM9B,IAAE8B,IAAM9B,IAAEkC,QAAtB,YAAiChC,GAC/CiC,EAAe,UAAMJ,EAAW/B,IAAEoC,aAAeH,GAEvD,OACI,oCACID,QAASA,EACTD,SAAUA,EACV7B,UAAWiC,GACPnB,K,wBCxBVqB,EAAW,CACbC,iBAAiB,GAEfC,EAAWC,IAAMC,OAAN,aACbC,QAAS,uCACNL,IAGDM,EAAiBH,IAAMC,OAAN,aACnBC,QAAS,uCACNL,IAmFMO,EAAU,SACbC,GACF,OAAON,EAASO,KAAK,cAAeD,IAF/BD,EAAU,WAKf,OAAOL,EAASQ,OAAO,aALlBH,EAAU,SAOZC,GACH,OAAON,EAASO,KAAK,iBAAkBD,IARlCD,EAAU,WAWf,OAAOL,EAASO,KAAK,YAXhBF,EAAU,SAaRC,GACP,OAAOF,EAAeG,KAAK,eAAgBD,IAdtCD,EAAU,SAgBRC,GACP,OAAOF,EAAeG,KAAK,yBAA0BD,IAIhDG,EAAa,SACXH,GACP,OAAON,EAASU,IAAI,WAAYJ,IAK3BK,EAAe,SACfC,GAA6B,IAC3BC,EAAiDD,EAAjDC,IAAKC,EAA4CF,EAA5CE,IAAKC,EAAuCH,EAAvCG,UAAWC,EAA4BJ,EAA5BI,KAAMC,EAAsBL,EAAtBK,UAAWC,EAAWN,EAAXM,QAC7C,OAAOlB,EAASmB,IAAI,cAAe,CAACP,OAAQ,CAACC,MAAKC,MAAKC,YAAWC,OAAMC,YAAWC,cAH9EP,EAAe,SAKZS,GACR,OAAOpB,EAASO,KAAK,cAAe,CAACa,UAAU,eAAKA,MAN/CT,EAAe,SAQZU,GACR,OAAOrB,EAASQ,OAAO,cAAe,CAACI,OAAQ,CAACU,GAAID,MAT/CV,EAAe,SAWZU,GACR,OAAOrB,EAASU,IAAI,cAAe,CAACU,UAAW,CAACG,IAAKF,EAAQG,KAAM,qBAK9DC,EAAU,SACVb,GAAwB,IACtBC,EAAsDD,EAAtDC,IAAKC,EAAiDF,EAAjDE,IAAKY,EAA4Cd,EAA5Cc,UAAWV,EAAiCJ,EAAjCI,KAAMC,EAA2BL,EAA3BK,UAAWU,EAAgBf,EAAhBe,aAC7C,OAAO3B,EAASmB,IAAI,cAAe,CAACP,OAAQ,CAACc,YAAWb,MAAKC,MAAKa,eAAcX,OAAMC,gBAHjFQ,EAAU,SAKPG,GACR,OAAO5B,EAASO,KAAK,cAAe,CAACsB,KAAK,eAAKD,MAN1CH,EAAU,SAQRJ,GACP,OAAOrB,EAASQ,OAAO,cAAe,CAACI,OAAQ,CAACU,GAAID,MAT/CI,EAAU,SAWRG,GACP,OAAO5B,EAASU,IAAI,cAAe,CAACmB,KAAK,eAAKD,MCrJhDE,EAAc,6BAiBPC,EAAa,SAACC,GAAD,MAAmC,CAAC9D,KAAM,6BAAuC8D,YAGvGC,EAAe,CACfD,QAAS,CACLT,IAAK,KACLW,MAAO,KACPV,KAAM,KACNW,OAAQ,KACRC,qBAAsB,KACtBC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,SAAU,KACVC,WAAY,KACZlE,MAAO,OA4CAmE,EAhBe,WAA2G,IAA1GC,EAAyG,uDAA1EV,EAAcW,EAA4D,uCACpI,OAAQA,EAAO1E,MACX,KAAK4D,EACD,OAAO,2BAAIa,GAAX,IAAkBX,QAAQ,2BAAKW,EAAMX,SAAYY,EAAOZ,WAC5D,QACI,OAAOW,IChEbE,EAAkB,8BAClBC,GAAkB,mCAClBC,GAAc,+BAGPC,GAAY,SAACC,GAAD,MAA8B,CAAC/E,KAAM,8BAAwC+E,mBACzFC,GAAgB,SAACC,GAAD,MAAuB,CAACjF,KAAM,mCAA6CiF,aAC3FC,GAAe,SAACC,GAAD,MAAgC,CACxDnF,KAAM,+BACNmF,qBAIApB,GAAe,CACfqB,OAAO,EACPC,WAAY,GACZC,WAAW,GAKFC,GAAe,WAAyG,IAAxGd,EAAuG,uDAAxEV,GAAcW,EAA0D,uCAChI,OAAQA,EAAO1E,MACX,KAAK2E,EACD,OAAO,2BAAIF,GAAX,IAAkBW,MAAOV,EAAOK,iBACpC,KAAKH,GACD,OAAO,2BAAIH,GAAX,IAAkBY,WAAYX,EAAOO,WACzC,KAAKJ,GACD,OAAO,2BAAIJ,GAAX,IAAkBa,UAAWZ,EAAOS,mBACxC,QACI,OAAOV,IC9Bbe,GAAc,kCACdC,GAAY,gCACZC,GAAe,mCAGRC,GAAgB,SAACC,GAAD,MAAyB,CAAC5F,KAAM,kCAA4C4F,cAC5FC,GAAiB,SAACZ,GAAD,MAAuB,CAACjF,KAAM,gCAA0CiF,aACzFa,GAAoB,SAACC,GAAD,MAAmC,CAChE/F,KAAM,mCACN+F,gBAIAhC,GAAe,CACfiC,YAAY,EACZC,eAAgB,UAChBC,YAAa,IAKJC,GAAsB,WAAgH,IAA/G1B,EAA8G,uDAA/EV,GAAcW,EAAiE,uCAC9I,OAAQA,EAAO1E,MACX,KAAKwF,GACD,OAAO,2BAAIf,GAAX,IAAkBuB,WAAYtB,EAAOkB,YACzC,KAAKH,GACD,OAAO,2BAAIhB,GAAX,IAAkByB,YAAaxB,EAAOO,WAC1C,KAAKS,GACD,OAAO,2BAAIjB,GAAX,IAAkBwB,eAAgBvB,EAAOqB,cAC7C,QACI,OAAOtB,IClBN2B,GAAY,SAACC,GAEtB,OACI,gCACKA,EAAMC,iBAAoB,qBAAKC,MAAO,CAACC,MAAO,OAApB,2CAC1BH,EAAMI,gBAAmB,qBAAKF,MAAO,CAACC,MAAO,OAApB,8CACzBH,EAAMK,iBAAoB,qBAAKH,MAAO,CAACC,MAAO,OAApB,8CAC1BH,EAAMM,kBAAqB,qBAAKJ,MAAO,CAACC,MAAO,OAApB,0CAC3BH,EAAMO,iBAAoB,qBAAKL,MAAO,CAACC,MAAO,OAApB,yCAC1BH,EAAMQ,mBAAsB,qBAAKN,MAAO,CAACC,MAAO,OAApB,mEAC5BH,EAAMS,kBAAqB,qBAAKP,MAAO,CAACC,MAAO,OAApB,sEAC3BH,EAAMU,kBAAqB,qBAAKR,MAAO,CAACC,MAAO,OAApB,sEAC3BH,EAAMW,iBAAoB,qBAAKT,MAAO,CAACC,MAAO,OAApB,2BAC1BH,EAAMY,0BAA6B,qBAAKV,MAAO,CAACC,MAAO,OAApB,iD,SC3B1CU,G,QAAQ3H,EAAR2H,OAEOC,GAAW,WAEpB,OACI,8BACI,qBAAK1H,UAAWyH,GAAhB,2BCHNE,GAAsB,iCACtBC,GAAoB,+BAGbC,GAAmB,SAAC1B,GAAD,MAAyC,CACrE5F,KAAM,iCACN4F,cAES2B,GAA8B,SAACC,GAAD,MAAsB,CAC7DxH,KAAM,+BACNwH,YAIAzD,GAAe,CACf0D,cAAe,QACfC,6BAA8B,IAKrBC,GAAqB,WAA2G,IAA1GlD,EAAyG,uDAA1EV,GAAcW,EAA4D,uCACxI,OAAQA,EAAO1E,MACX,KAAKoH,GACD,OAAO,2BAAI3C,GAAX,IAAkBgD,cAAe/C,EAAOkB,YAC5C,KAAKyB,GACD,OAAO,2BAAI5C,GAAX,IAAkBiD,6BAA8BhD,EAAO8C,UAC3D,QACI,OAAO/C,ICuCNmD,GAAW,SAACC,EAAmBC,GAA8B,IAAD,EAC3CC,mBAASF,GADkC,mBAC9DnH,EAD8D,KACvDsH,EADuD,OAEvCD,oBAAS,GAF8B,mBAE9DE,EAF8D,KAErDC,EAFqD,KAI/DC,EAvDW,SAACzH,EAAYoH,GAA8B,IAAD,EAE7BC,oBAAS,GAFoB,mBAEpDK,EAFoD,KAE3CC,EAF2C,OAGfN,oBAAS,GAHM,mBAGpDO,EAHoD,KAGpCC,EAHoC,OAIfR,oBAAS,GAJM,mBAIpDS,EAJoD,KAIpCC,EAJoC,OAKTV,oBAAS,GALA,mBAKpDW,EALoD,KAKjCC,EALiC,OAMvBZ,oBAAS,GANc,mBAMpDa,EANoD,KAMxCC,EANwC,KAuC3D,OA9BAC,qBAAU,WACN,IAAK,IAAMX,KAASL,EAChB,OAAQK,GACJ,IAAK,YACDzH,EAAMqI,OAASjB,EAAUK,GAASI,GAAkB,GAAQA,GAAkB,GAC9E,MACJ,IAAK,UACOF,GAAR3H,GACA,MACJ,IAAK,YACDA,EAAMqI,OAASjB,EAAUK,GAASM,GAAkB,GAAQA,GAAkB,GAC9E,MACJ,IAAK,eACU,wJACRO,KAAKC,OAAOvI,GAAOwI,eAAiBP,GAAqB,GAASA,GAAqB,MAIvG,CAACjI,IAGJoI,qBAAU,WAEFD,IADAT,GAAWE,GAAkBE,GAAkBE,MAKpD,CAACN,EAASE,EAAgBE,EAAgBE,IAGtC,CACHN,UACAE,iBACAE,iBACAE,oBACAE,cAWUO,CAAazI,EAAOoH,GAclC,OAAO,aACHpH,QACAuH,UACAhI,SAfa,SAACa,GACVA,EAAEsI,eAAe,UACjBpB,EAASlH,EAAEuI,OAAO3I,OAElBsH,EAASlH,IAYbwI,OARW,SAACC,GACZrB,EAAWqB,KAQRpB,IAkIIqB,GA7HD,WAEV,IAAMxF,EAAQ4D,GAAS,GAAI,CAACQ,SAAS,EAAMqB,UAAW,EAAGC,UAAW,GAAIC,cAAc,IAChFC,EAAWhC,GAAS,GAAI,CAACQ,SAAS,EAAMqB,UAAW,EAAGC,UAAW,KACjEnF,EAAaqD,IAAS,EAAO,CAACQ,SAAS,EAAMqB,UAAW,EAAGC,UAAW,KAEtEpD,EAAkBtC,EAAMiE,SAAWjE,EAAMoE,QACzC3B,EAAiBmD,EAAS3B,SAAW2B,EAASxB,QAG9CvB,EAAoB7C,EAAMiE,SAAWjE,EAAMsE,eAC3CxB,EAAmB8C,EAAS3B,SAAW2B,EAAStB,eAGhDtB,EAAkBhD,EAAMiE,SAAWjE,EAAM0E,kBACzC3B,EAAmB6C,EAAS3B,SAAW2B,EAASpB,eAIhDqB,GAAmB7F,EAAM4E,aAAegB,EAAShB,WAGjDkB,EAAWC,cAEXC,EAAkBC,aAAkC,SAAAxF,GAAK,OAAIA,EAAMyF,MAAM7E,cACzE8E,EAAUF,aAAmC,SAAAxF,GAAK,OAAIA,EAAMyF,MAAM9E,SAClEE,EAAY2E,aAAmC,SAAAxF,GAAK,OAAIA,EAAMyF,MAAM5E,aAkC1E,OALItB,EAAMiE,SAAWjE,EAAMtD,OAASkJ,EAAS3B,SAAW2B,EAASlJ,QAC7DoJ,EAAS9E,GAAc,KAIvBM,EACO,cAAC,GAAD,IAIP6E,EACO,cAAC,IAAD,CAAUC,GAAIC,GAAKC,UAK1B,qBAAK7K,UAAWkB,IAAG4J,aAAnB,SACI,sBAAK9K,UAAWkB,IAAG6J,KAAnB,UACI,qBAAK/K,UAAWkB,IAAG8J,KAAnB,0BAGA,qBAAKhL,UAAWkB,IAAG+J,IAAnB,mBAGA,uBAAMhG,OAAO,GAAb,UAGKsF,GAAmB,qBAAKzD,MAAO,CAACC,MAAM,OAAnB,SAA4BwD,IAGhD,cAAC,GAAD,CAAa1D,gBAAiBA,EAAiBO,kBAAmBA,EACrDG,gBAAiBA,IAG9B,cAAC,EAAD,CAAgB/G,SAAU+D,EAAM/D,SAAUqJ,OAAQ,WAC9CtF,EAAMsF,QAAO,IACd5I,MAAOsD,EAAMtD,MACAJ,MAAO,UAEvB,cAAC,GAAD,CAAamG,eAAgBA,EAAgBK,iBAAkBA,EAClDC,iBAAkBA,IAG/B,cAAC,EAAD,CAAgB9G,SAAU2J,EAAS3J,SAAUqJ,OAAQ,WACjDM,EAASN,QAAO,IACjB5I,MAAOkJ,EAASlJ,MACHJ,MAAO,WAAYN,KAAM,aAGzC,uBAAOU,MAAO6D,EAAW7D,MAAOT,SAAUsE,EAAWtE,SAAUD,KAAM,aAzBzE,eA4BI,cAAC,IAAD,CAASuB,QA7DE,WACvBuI,EAASxC,GAAiB,WA4D0B7H,UAAWkB,IAAGgK,WAAYP,GAAIC,GAAKO,aAA3E,6BAGA,8BAAK,cAAC,IAAD,CAASrJ,QA5DH,WACvBuI,EAASnE,IAAc,KA2DgClG,UAAWkB,IAAGgK,WAAYP,GAAIC,GAAKQ,aAAzE,uBAKL,cAAC,EAAD,CAAatJ,QAtFN,WACnB,IAAMuJ,EAAc,CAChB9G,MAAOA,EAAMtD,MACbkJ,SAAUA,EAASlJ,MACnB6D,WAAYA,EAAW7D,OAG3BoJ,ELjGe,SAACgB,GACpB,OAAO,SAAChB,GACJA,EAAS5E,IAAa,IACtB/C,EAAc2I,GACTC,MAAK,SAAAC,GACElB,EAASjG,EAAWmH,EAAI5I,OACxB0H,EAAShF,IAAU,OAG1BmG,OAAM,SAAA5K,GACH,IAAM6K,EAAS7K,EAAM8K,SAAW9K,EAAM8K,SAAS/I,KAAK/B,MAC7CA,EAAM+K,QAAU,gCACvBtB,EAAS9E,GAAckG,OAG1BG,SAAQ,WACDvB,EAAS5E,IAAa,QKiFzBoG,CAAQR,IACjB9G,EAAM/D,SAAS,IACf+D,EAAMsF,QAAO,GACbM,EAAS3J,SAAS,IAClB2J,EAASN,QAAO,GAChB/E,EAAWtE,UAAS,IA0E8BqB,SAAUuI,EACnCtD,MAAO,CAACgF,MAAO,IAAKC,UAAW,GAAIC,aAAc,IAD9D,4B,oBCxNL,OAA0B,qC,oBC2F1BC,GAzEK,SAACrF,GAGjB,IAAM8D,EAAUF,aAAmC,SAAAxF,GAAK,OAAIA,EAAMyF,MAAM9E,SAClEE,EAAY2E,aAAmC,SAAAxF,GAAK,OAAIA,EAAMyF,MAAM5E,aACpExB,EAAUmG,aAAiD,SAAAxF,GAAK,OAAIA,EAAMX,WAC1EgG,EAAWC,cAEV4B,EAAkBtF,EAAlBsF,eARuC,EAe1C7H,EAAQA,QAJRT,EAX0C,EAW1CA,IACAW,EAZ0C,EAY1CA,MACAV,EAb0C,EAa1CA,KACAW,EAd0C,EAc1CA,OAIE2H,EAAYhE,GAAStE,EAAM,CAAC8E,SAAS,EAAMqB,UAAW,EAAGC,UAAW,KACpEmC,EAAcjE,GAAS3D,GAAkB,GAAI,CAACmE,SAAS,EAAMqB,UAAW,EAAGC,UAAW,KAGtFoC,EAAmB,SAACC,EAAiBC,GACvC,IRCsBC,EQGtBnC,GRHsBmC,EQDT,CACT3I,KAAMyI,GAAoB,GAC1B9H,OAAQ+H,GAAkB,IRA3B,SAAClC,GACJA,EAAS5E,IAAa,IACtB3C,EAAsB0J,GACjBlB,MAAK,SAAAC,GACElB,EAASjG,EAAWmH,EAAI5I,KAAK8J,cAC7BpC,EAAShF,IAAU,OAG1BmG,OAAM,SAAA5K,GACH,IAAM6K,EAAS7K,EAAM8K,SAAW9K,EAAM8K,SAAS/I,KAAK/B,MAC7CA,EAAM+K,QAAU,gCACvBtB,EAAS9E,GAAckG,OAE1BG,SAAQ,WACDvB,EAAS5E,IAAa,UQXlCyG,GAAe,IAInB,GAAIrG,EACA,OAAO,cAAC,GAAD,IAIX,IAAK6E,EACD,OAAO,cAAC,IAAD,CAAUC,GAAIC,GAAK8B,QAG9B,IAAMxF,EAAmBiF,EAAUxD,SAAWwD,EAAU3D,QAClDrB,EAAkBiF,EAAYzD,SAAWyD,EAAY5D,QAE3D,OACI,sBAAKxI,UAAWkB,KAAG6J,KAAnB,UACI,qBAAK/K,UAAWkB,KAAG8J,KAAnB,0BAGA,cAAC,GAAD,CAAa9D,iBAAkBA,IAE/B,yCAAW,cAAC,EAAD,CAAgB1F,YAAa2K,EAAUlL,MAAQ,GAAK,2BAA4BT,SAAU2L,EAAU3L,SAAUqJ,OAAQ,WAC7HsC,EAAUtC,QAAO,IAClB5I,MAAOkL,EAAUlL,MAAOJ,MAAO,QAElC,qBAAKb,UAAWkB,KAAGyL,QAAnB,SAA4B,qBAAK1M,IAAKuE,GAAkBoI,GAAUzM,IAAI,aACtE,cAAC,GAAD,CAAagH,gBAAiBA,IAC9B,2CAAa,cAAC,EAAD,CAAgB3F,YAAa4K,EAAYnL,MAAQ,GAAK,sBACtCT,SAAU4L,EAAY5L,SAAUqJ,OAAQ,WACjEuC,EAAYvC,QAAO,IACpB5I,MAAOmL,EAAYnL,MAAOJ,MAAO,QACpC,sBAAKb,UAAWkB,KAAG+J,IAAnB,UACI,yCAAY1G,KACZ,sCAASX,QAEb,wBAAQ/B,WAAYsK,EAAUlL,OAASmL,EAAYnL,OAAQa,QAAS,WAChEuK,EAAiBF,EAAUlL,MAAOmL,EAAYnL,QADlD,sBCVG4L,GA5DC,WAEZ,IAAMnC,EAAUF,aAAmC,SAAAxF,GAAK,OAAIA,EAAMyF,MAAM9E,SAElEE,GADkB2E,aAAkC,SAAAxF,GAAK,OAAIA,EAAMyF,MAAM7E,cAC7D4E,aAAmC,SAAAxF,GAAK,OAAIA,EAAMyF,MAAM5E,cACpExB,EAAUmG,aAAiD,SAAAxF,GAAK,OAAIA,EAAMX,WAL9D,EAQeiE,oBAAS,GARxB,mBAQZwE,EARY,KAQAC,EARA,KAUZb,EAAe,SAAC/F,GAClB4G,EAAc5G,IAXA,EA0Bd9B,EAAQA,QAXRT,EAfc,EAedA,IACAW,EAhBc,EAgBdA,MACAV,EAjBc,EAiBdA,KACAW,EAlBc,EAkBdA,OAlBc,EAmBdC,qBAnBc,EAoBdC,QApBc,EAqBdC,QArBc,EAsBdC,QAtBc,EAuBdC,SAvBc,EAwBdC,WAxBc,EAyBdlE,MAIJ,OAAIiF,EACO,cAAC,GAAD,IAIN6E,EAMA,sBAAK1K,UAAWkB,KAAG4J,aAAnB,WACMgC,GAAa,sBAAK9M,UAAWkB,KAAG6J,KAAnB,UACZ,qBAAK/K,UAAWkB,KAAG8J,KAAnB,0BAGC,qBAAKhL,UAAWkB,KAAG8L,YAAnB,SAAiCnJ,IAClC,qBAAK7D,UAAWkB,KAAGyL,QAAnB,SAA4B,qBAAK1M,IAAKuE,GAAiBoI,GAAUzM,IAAI,aACrE,sBAAKH,UAAWkB,KAAG+J,IAAnB,UACI,yCAAa1G,KACb,sCAASX,QAEb,wBAAQ9B,QAAS,WAAKoK,GAAe,IAArC,0BACA,cAAC,EAAD,UAAa,cAAC,IAAD,CAASvB,GAAIC,GAAKqC,aAAcnG,MAAO,CAACC,MAAM,QAAQmG,eAAe,QAArE,wCAEfJ,GAAc,cAAC,GAAD,CAAaZ,eAAgBA,EAAgBY,WAAYA,OAnBtE,cAAC,IAAD,CAAUnC,GAAIC,GAAK8B,S,wCChDnB,OAA0B,iCCA1B,OAA0B,kCCA1B,OAA0B,oCCSnC5B,GAA2DhL,KAA3DgL,aAAaC,GAA8CjL,KAA9CiL,KAAKC,GAAyClL,KAAzCkL,KAAKC,GAAoCnL,KAApCmL,IAAIkC,GAAgCrN,KAAhCqN,YAAYC,GAAoBtN,KAApBsN,QAAQlC,GAAYpL,KAAZoL,WAYxCmC,GAAc,SAACzG,GAA+B,IACjDrC,EAA4BqC,EAA5BrC,MAAM+I,EAAsB1G,EAAtB0G,WAAsB1G,EAAX2G,UACvB,OACK,sBAAKvN,UAAW8K,GAAhB,UACkB,SAAbwC,GAAsB,sBAAKtN,UAAW+K,GAAhB,UACpB,qBAAK/K,UAAWgL,GAAhB,0BAGA,qBAAKhL,UAAWiL,GAAhB,yBAGA,qBAAKjL,UAAWmN,GAAhB,SACA,qBAAKlN,IAAKuN,GAAMrN,IAAI,eAEpB,sBAAKH,UAAWoN,GAAhB,qDAC6C7I,KAE5C,cAAC,IAAD,CAASvE,UAAWkL,GAAYP,GAAIC,GAAK8B,MAAzC,wBAEU,UAAbY,GAAuB,sBAAKtN,UAAW+K,GAAhB,UACpB,qBAAK/K,UAAWgL,GAAhB,0BAGA,qBAAKhL,UAAWiL,GAAhB,wBAGA,qBAAKjL,UAAWmN,GAAhB,SACI,qBAAKlN,IAAKW,GAAOT,IAAI,YAEzB,qBAAKH,UAAWoN,GAAhB,0DAIU,YAAbE,GAAyB,sBAAKtN,UAAW+K,GAAhB,UACtB,qBAAK/K,UAAWgL,GAAhB,0BAGA,qBAAKhL,UAAWiL,GAAhB,sBAGA,qBAAKjL,UAAWmN,GAAhB,SACI,qBAAKlN,IAAKwN,GAAStN,IAAI,iBAGjB,eAAbmN,GAA4B,sBAAKtN,UAAW+K,GAAhB,UACzB,qBAAK/K,UAAWgL,GAAhB,0BAGA,qBAAKhL,UAAWiL,GAAKnE,MAAO,CAACC,MAAM,OAAnC,wBAGA,qBAAK/G,UAAWoN,GAAhB,8DCgCFM,GAxFK,WAChB,IAAMnJ,EAAQ4D,GAAS,GAAI,CAACQ,SAAS,EAAMqB,UAAW,EAAGC,UAAW,GAAIC,cAAc,IAChFG,EAAWC,cACXqD,EAAsBnD,aAAmD,SAAAxF,GAAK,OAAIA,EAAM4I,YAAY5F,iBACpGuC,EAAkBC,aAAkC,SAAAxF,GAAK,OAAIA,EAAM4I,YAAY3F,gCAC/EyC,EAAUF,aAAmC,SAAAxF,GAAK,OAAIA,EAAMyF,MAAM9E,UAepEpB,EAAMiE,SAAWjE,EAAMtD,QACvBoJ,EAAS9E,GAAc,KAG3B,IAAM6B,EAAoB7C,EAAMiE,SAAWjE,EAAMsE,eAC3CtB,EAAkBhD,EAAMiE,SAAWjE,EAAM0E,kBACzCpC,EAAkBtC,EAAMiE,SAAWjE,EAAMoE,QACzCyB,GAAmB7F,EAAM4E,aAAe/B,EAG9C,OAAIsD,EACO,cAAC,IAAD,CAAUC,GAAIC,GAAKC,UAGF,YAAxB8C,EACO,cAAC,GAAD,IAIiB,SAAxBA,EACO,cAAC,GAAD,CAAcL,WAAY,OAAQ/I,MAAOA,EAAMtD,QAK9B,QAAxB0M,EACO,cAAC,IAAD,CAAUhD,GAAIC,GAAK8B,QAK1B,qBAAK1M,UAAWkB,KAAG4J,aAAnB,SACI,sBAAK9K,UAAWkB,KAAG6J,KAAnB,UACI,qBAAK/K,UAAWkB,KAAG8J,KAAnB,0BAGA,qBAAKhL,UAAWkB,KAAG+J,IAAnB,mCAKA,cAAC,GAAD,CAAa7D,kBAAmBA,EAAmBG,gBAAiBA,EACvDV,gBAAiBA,IAG9B,uBAAM5B,OAAO,GAAb,UACKsF,GAAmB,8BAAMA,IAE1B,cAAC,EAAD,CAAgB/J,SAAU+D,EAAM/D,SAAUqJ,OAAQ,WAC9CtF,EAAMsF,QAAO,IACd5I,MAAOsD,EAAMtD,MACAJ,MAAO,UAGvB,cAAC,IAAD,CAASb,UAAWkB,KAAGgK,WAAYP,GAAIC,GAAK8B,MAA5C,wBAGA,cAAC,EAAD,CAAa7K,SAAUuI,EAAiBtI,QArEjC,WACnB,ITaoBa,ESbdgJ,EAAU,CACZpH,MAAOA,EAAMtD,MACb4M,KAAM,gDACNlC,QAAQ,qNAKZtB,GTKoB1H,ESLCgJ,ETMlB,SAACtB,GACJA,EAASxC,GAAiB,YAC1BnF,EAAmBC,GACd2I,MAAK,SAAAC,GACElB,EAASxC,GAAiB,YAGjC2D,OAAM,SAAA5K,GACH,IAAM6K,EAAS7K,EAAM8K,SAAW9K,EAAM8K,SAAS/I,KAAK/B,MAC7CA,EAAM+K,QAAU,gCACvBtB,EAASvC,GAA4B2D,IACrCpB,EAASxC,GAAiB,aAE7B+D,SAAQ,WACDkC,YAAW,WACPzD,EAASxC,GAAiB,UAC3B,YSuCUf,MAAO,CAACgF,MAAO,IAAKC,UAAW,GAAIC,aAAc,IAD9D,mC,oBCkDL+B,GAhIM,WAEjB,IAAMxJ,EAAQ4D,GAAS,GAAI,CAACQ,SAAS,EAAMqB,UAAW,EAAGC,UAAW,GAAIC,cAAc,IAChFC,EAAWhC,GAAS,GAAI,CAACQ,SAAS,EAAMqB,UAAW,EAAGC,UAAW,KACjE+D,EAAY7F,GAAS,GAAI,CAACQ,SAAS,EAAMqB,UAAW,EAAGC,UAAW,KAGlEpD,EAAkBtC,EAAMiE,SAAWjE,EAAMoE,QACzC3B,EAAiBmD,EAAS3B,SAAW2B,EAASxB,QAG9CvB,EAAoB7C,EAAMiE,SAAWjE,EAAMsE,eAC3CxB,EAAmB8C,EAAS3B,SAAW2B,EAAStB,eAGhDtB,EAAkBhD,EAAMiE,SAAWjE,EAAM0E,kBACzC3B,EAAmB6C,EAAS3B,SAAW2B,EAASpB,eAGhDqB,EAAkB7F,EAAM4E,YAAcgB,EAAShB,WAI/C3B,EAA2B2C,EAASlJ,QAAU+M,EAAU/M,OAASkJ,EAAS3B,QAC1EyF,EAAsB9D,EAASlJ,QAAU+M,EAAU/M,MAGnDoJ,EAAWC,cAEXI,EAAUF,aAAmC,SAAAxF,GAAK,OAAIA,EAAMyF,MAAM9E,SAClEE,EAAY2E,aAAmC,SAAAxF,GAAK,OAAIA,EAAMyF,MAAM5E,aACpEqI,EAAe1D,aAAmC,SAAAxF,GAAK,OAAIA,EAAMmJ,aAAa5H,cAC9E6H,EAAiB5D,aAAkC,SAAAxF,GAAK,OAAIA,EAAMmJ,aAAa1H,eAC/ED,EAAiBgE,aAAkC,SAAAxF,GAAK,OAAIA,EAAMmJ,aAAa3H,kBA2BrF,OALIjC,EAAMiE,SAAWjE,EAAMtD,OAASkJ,EAAS3B,SAAW2B,EAASlJ,OAAS+M,EAAUxF,SAAWwF,EAAU/M,QACrGoJ,EAASjE,GAAe,KAIxBP,GAAgC,YAAnBW,EACN,cAAC,GAAD,IAEPX,GAAgC,YAAnBW,EACN,cAAC,GAAD,CAAc8G,WAAY,YAEjCzH,GAAgC,UAAnBW,EACN,cAAC,GAAD,CAAc8G,WAAY,UAGjCY,EACO,cAAC,IAAD,CAAUvD,GAAIC,GAAK8B,QAG1BhC,EACO,cAAC,IAAD,CAAUC,GAAIC,GAAKC,UAK1B,qBAAK7K,UAAWkB,KAAG4J,aAAnB,SACI,sBAAK9K,UAAWkB,KAAG6J,KAAnB,UACI,qBAAK/K,UAAWkB,KAAG8J,KAAnB,0BAGA,qBAAKhL,UAAWkB,KAAG+J,IAAnB,qBAGA,iCACKmD,GAAkB,qBAAKtH,MAAO,CAACC,MAAO,OAApB,SAA6BqH,IAEhD,cAAC,GAAD,CAAavH,gBAAiBA,EAAiBO,kBAAmBA,EACrDG,gBAAiBA,IAE9B,cAAC,EAAD,CAAgB/G,SAAU+D,EAAM/D,SAAUqJ,OAAQ,WAC9CtF,EAAMsF,QAAO,IACd5I,MAAOsD,EAAMtD,MACAJ,MAAO,qBAEvB,cAAC,GAAD,CAAamG,eAAgBA,EAAgBK,iBAAkBA,EAClDC,iBAAkBA,IAG/B,cAAC,EAAD,CAAgB9G,SAAU2J,EAAS3J,SAAUqJ,OAAQ,WACjDM,EAASN,QAAO,IACjB5I,MAAOkJ,EAASlJ,MACHJ,MAAO,6BAA8BN,KAAM,aAE3D,cAAC,GAAD,CAAaiH,yBAA0BA,IAEvC,cAAC,EAAD,CAAgBhH,SAAUwN,EAAUxN,SAAUqJ,OAAQ,WAClDmE,EAAUnE,QAAO,IAClB5I,MAAO+M,EAAU/M,MACJJ,MAAO,uBAAwBN,KAAM,aAGrD,cAAC,IAAD,CAASP,UAAWkB,KAAGgK,WAAYP,GAAIC,GAAK8B,MAA5C,qBACA,cAAC,EAAD,CAAa5K,QAjFN,WAEnB,IAAMuJ,EAAc,CAChB9G,MAAOA,EAAMtD,MACbkJ,SAAUA,EAASlJ,OAGvBoJ,EblBgB,SAACgB,GACrB,OAAO,SAAChB,GACJA,EAAS5E,IAAa,IACtB/C,EAAe2I,GACVC,MAAK,SAAAC,GACElB,EAASnE,IAAc,IACvBmE,EAAShE,GAAkB,eAGlCmF,OAAM,SAAA5K,GACH,IAAM6K,EAAS7K,EAAM8K,SAAW9K,EAAM8K,SAAS/I,KAAK/B,MAC7CA,EAAM+K,QAAU,gCACvBtB,EAAShE,GAAkB,UAC3BgE,EAASjE,GAAeqF,OAE3BG,SAAQ,WACDkC,YAAW,WACPzD,EAAS5E,IAAa,IACtB4E,EAAShE,GAAkB,cAC5B,SaDNgI,CAAShD,IAElB9G,EAAM/D,SAAS,IACf+D,EAAMsF,QAAO,GACbM,EAAS3J,SAAS,IAClB2J,EAASN,QAAO,GAChBmE,EAAUnE,QAAO,GACjBmE,EAAUxN,SAAS,KAmE+BqB,UAAWoM,IAAwB7D,EAC5DtD,MAAO,CAACgF,MAAO,IAAKC,UAAW,GAAIC,aAAc,IAD9D,8B,oBCpIL,OAA0B,iC,SCKnCsC,GAAkB,gCAClBC,GAAmB,iCACnBC,GAA0B,wCAC1BC,GAAkB,gCAClBC,GAAkB,gCAClBC,GAAkB,gCAClBC,GAAuB,qCACvBC,GAAkB,gCAClBC,GAA2B,yCAC3BC,GAAmB,iCACnBC,GAAqB,mCACrBC,GAAiB,+BACjBC,GAAsB,oCAGfC,GAAgB,SAACC,GAAD,MAA4C,CACrE7O,KAAM,gCACN6O,kBAaSC,GAAgB,SAACC,GAAD,MAAkC,CAC3D/O,KAAM,gCACN+O,kBAWSC,GAAoB,SAACC,GAAD,MAAkC,CAC/DjP,KAAM,qCACNiP,aAESC,GAAgB,SAACC,GAAD,MAAuB,CAChDnP,KAAM,gCACNmP,YAMSC,GAAiB,SAACC,GAAD,MAAkB,CAC5CrP,KAAM,iCACNqP,QAESC,GAAmB,SAAC1J,GAAD,MAAmC,CAC/D5F,KAAM,mCACN4F,cAES2J,GAAe,SAACC,GAAD,MAAsB,CAC9CxP,KAAM,+BACNwP,YAQAzL,GAAe,CACf0L,UAAW,GACXC,eAAgB,KAChBC,oBAAqB,EACrBC,cAAe,GACfC,cAAe,EACf/M,KAAM,EACNC,UAAW,GACX+M,YAAa,EACbC,WAAY,WACZC,WAAY,GACZC,eAAe,EACfC,WAAY,GACZC,YAAY,EACZC,kBAAmB,EACnBC,YAAa,GACbC,cAAe,UACftD,UAAW,IA0CFuD,GAAc,WACvB,OAAO,SAACzG,EAAoB0G,GACxB,IAAM/L,EAAQ+L,IACR1N,EAAO2B,EAAMgM,OAAOX,YACpB/M,EAAY0B,EAAMgM,OAAO1N,UACzBJ,EAAM8B,EAAMgM,OAAOZ,cACnBjN,EAAM6B,EAAMgM,OAAOb,cACnB/M,EAAY4B,EAAMgM,OAAOV,WAEzB/M,EADgByB,EAAMgM,OAAOR,cACHxL,EAAMX,QAAQA,QAAQT,IAAM,GAE5DyG,EAASwF,GAAiB,YAC1B,IAAMoB,EAAUjO,EAAsB,CAACK,OAAMC,YAAWJ,MAAKC,MAAKC,YAAWG,YACxE+H,MAAK,SAAAC,GACElB,EAAS8E,GAAc5D,EAAI5I,UAGlC6I,OAAM,SAAA5K,GACHyJ,EAASyF,GAAalP,EAAMsQ,aAC5B7G,EAASwF,GAAiB,UAC1B/B,YAAW,WACPzD,EAASwF,GAAiB,eAC3B,QAGXsB,QAAQC,IAAI,CAACH,IAAU3F,MAAK,SAAAC,GAAG,OAAIuC,YAAW,WACtCzD,EAASwF,GAAiB,cAC3B,UAOFwB,GAAqB,WAC9B,OAAO,SAAChH,EAAoB0G,GACxB,IAAM/L,EAAQ+L,IACRR,EAAavL,EAAMgM,OAAOT,WAC1Be,EAAWtM,EAAMgM,OAAOP,WACxBvN,EAAM8B,EAAMgM,OAAOZ,cACnBjN,EAAM6B,EAAMgM,OAAOb,cACnB/M,EAAY4B,EAAMgM,OAAOV,WAEzB/M,EADgByB,EAAMgM,OAAOR,cACHxL,EAAMX,QAAQA,QAAQT,IAAM,GAE5DyG,EAASwF,GAAiB,YAC1B,IAAMoB,EAAUjO,EAAsB,CAACK,KAAM,EAAGC,UAAW,IAAMJ,MAAKC,MAAKC,YAAWG,YACjF+H,MAAK,SAAAC,GACE,GAAiB,YAAb+F,EAAwB,CACxB,IAAMC,EAAgBhG,EAAI5I,KAAKqN,UAAUwB,QAAO,SAAC1H,GAAD,OAA6E,IAA5DA,EAAEjG,KAAK4F,cAAcgI,QAAQlB,EAAW9G,kBACnGiI,EAAgBH,EAAcjI,OAC9BqI,EAAO,GACb,GAA6B,IAAzBJ,EAAcjI,OAAc,CAC5B,KAAOiI,EAAcjI,OAAS,GAC1BqI,EAAKC,KAAKL,EAAcM,OAAO,EAAG,KAEtCxH,EAASsF,GAAe,KACxBtF,EAASoF,IAAc,IACvBpF,EAASkF,GAAkBoC,IAC3BtH,EAAS8E,GAAc,2BAAI5D,EAAI5I,MAAT,IAAeuN,oBAAqBwB,EAAe1B,UAAW,OACpF3F,EAASwF,GAAiB,iBAE1BxF,EAASoF,IAAc,IACvBpF,EAASkF,GAAkB,OAE3BlF,EAAS8E,GAAc,2BAAI5D,EAAI5I,MAAT,IAAeuN,oBAAqB,EAAGF,UAAW,OACxE3F,EAASsF,GAAe,2BACxBtF,EAASwF,GAAiB,YAGlC,GAAiB,eAAbyB,EAA2B,CAC3B,IAAMC,EAAgBhG,EAAI5I,KAAKqN,UAAUwB,QAAO,SAAC1H,GAAD,OAAkF,IAAjEA,EAAEgI,UAAUrI,cAAcgI,QAAQlB,EAAW9G,kBACxGiI,EAAgBH,EAAcjI,OAC9BqI,EAAO,GACb,GAA6B,IAAzBJ,EAAcjI,OAAc,CAC5B,KAAOiI,EAAcjI,OAAS,GAC1BqI,EAAKC,KAAKL,EAAcM,OAAO,EAAG,KAEtCxH,EAASsF,GAAe,KACxBtF,EAASoF,IAAc,IACvBpF,EAASkF,GAAkBoC,IAC3BtH,EAAS8E,GAAc,2BAAI5D,EAAI5I,MAAT,IAAeuN,oBAAqBwB,EAAe1B,UAAW,OACpF3F,EAASwF,GAAiB,iBAE1BxF,EAASoF,IAAc,IACvBpF,EAASkF,GAAkB,OAC3BlF,EAAS8E,GAAc,2BAAI5D,EAAI5I,MAAT,IAAeuN,oBAAqB,EAAGF,UAAW,OACxE3F,EAASsF,GAAe,8BACxBtF,EAASwF,GAAiB,gBAMzCrE,OAAM,SAAA5K,GACHyJ,EAASyF,GAAalP,EAAMsQ,aAC5B7G,EAASwF,GAAiB,UAC1B/B,YAAW,WACPzD,EAASwF,GAAiB,eAC3B,QAGXsB,QAAQC,IAAI,CAACH,IAAU3F,MAAK,SAAAC,GAAG,OAAIuC,YAAW,WACtCzD,EAASwF,GAAiB,cAC3B,UA+IAkC,GA5Rc,WAAqF,IAApF/M,EAAmF,uDAAnDV,GAAcW,EAAqC,uCAC7G,OAAQA,EAAO1E,MACX,KAAK+N,GACD,OAAO,2BACAtJ,GADP,IAEIgL,UAAU,aAAK/K,EAAOmK,cAAcY,WACpCE,oBAAqBjL,EAAOmK,cAAcc,sBAElD,KAAK3B,GACD,OAAO,2BAAIvJ,GAAX,IAAkBqL,YAAapL,EAAO+M,UAC1C,KAAKxD,GACD,OAAO,2BAAIxJ,GAAX,IAAkBoL,cAAenL,EAAOgN,iBAAiB,GAAI9B,cAAelL,EAAOgN,iBAAiB,KACxG,KAAKxD,GACD,OAAO,2BAAIzJ,GAAX,IAAkBsL,WAAYrL,EAAOqK,gBACzC,KAAKZ,GACD,OAAO,2BAAI1J,GAAX,IAAkBuL,WAAYtL,EAAO8K,UACzC,KAAKpB,GACD,OAAO,2BAAI3J,GAAX,IAAkByL,WAAYxL,EAAOkB,YACzC,KAAKyI,GACD,OAAO,2BAAI5J,GAAX,IAAkBiL,eAAgBhL,EAAOuK,WAC7C,KAAKX,GACD,OAAO,2BAAI7J,GAAX,IAAkB0L,WAAYzL,EAAOyK,UACzC,KAAKZ,GACD,OAAO,2BAAI9J,GAAX,IAAkB2L,kBAAmB1L,EAAO+M,UAChD,KAAKjD,GACD,OAAO,2BAAI/J,GAAX,IAAkB4L,YAAa3L,EAAO2K,MAC1C,KAAKZ,GACD,OAAO,2BAAIhK,GAAX,IAAkB6L,cAAe5L,EAAOkB,YAC5C,KAAK8I,GACD,OAAO,2BAAIjK,GAAX,IAAkBuI,UAAWtI,EAAO8K,UACxC,KAAKb,GACD,OAAO,2BAAIlK,GAAX,IAAkBwL,cAAevL,EAAOkB,YAC5C,QACI,OAAOnB,I,oBC/HbkN,GAAgB,4BAChBC,GAA0B,sCAC1BC,GAAW,uBACXC,GAAkB,8BAClBC,GAAuB,mCACvBC,GAAuB,mCACvBC,GAAuB,mCACvBC,GAAuB,mCACvB1D,GAAmB,+BACnB2D,GAAsB,kCACtBC,GAAgC,4CAChCC,GAAiB,6BACjBC,GAAsB,kCAGfC,GAAc,SAACC,GAAD,MAAwC,CAC/DxS,KAAM,4BACNwS,gBAOSC,GAAuB,SAAC7M,GAAD,MAAmC,CACnE5F,KAAM,sCACN4F,cAES8M,GAAgB,SAACC,GAAD,MAA8B,CACvD3S,KAAM,8BACN2S,kBAESC,GAAoB,SAAC7D,GAAD,MAAyC,CACtE/O,KAAM,mCACN+O,kBAES8D,GAAoB,SAACrD,GAAD,MAAsB,CACnDxP,KAAM,mCACNwP,YAESsD,GAAoB,SAAClN,GAAD,MAAoC,CACjE5F,KAAM,mCACN4F,cAESmN,GAAoB,SAACnN,GAAD,MAAyB,CACtD5F,KAAM,mCACN4F,cAESoN,GAAqB,SAACxD,GAAD,MAAsB,CACpDxP,KAAM,+BACNwP,YAESyD,GAAmB,SAACC,GAAD,MAA2C,CACvElT,KAAM,kCACNkT,WAUSC,GAAmB,SAAC3D,GAAD,MAAsB,CAClDxP,KAAM,kCACNwP,YAIAzL,GAAe,CACfqP,MAAO,GACPC,cAAe,KACfC,gBAAiB,EACjBC,SAAU,EACVC,SAAU,EACV1Q,KAAM,EACNC,UAAW,EACX0Q,WAAY,GACZC,WAAY,CAAC,EAAG,GAChBC,kBAAmB,UACnBnQ,UAAW,UACXoQ,eAAgB,GAChBC,eAAgB,GAChBC,gBAAgB,EAChBC,gBAAiB,GACjBC,sBAAuB,EACvBC,cAAe,IAsCNC,GAAU,SAAC9Q,GACpB,OAAO,SAAC0G,EAAoB0G,GACxB,IAAM/L,EAAQ+L,IACR1N,EAAO2B,EAAMd,KAAKb,KAClBC,EAAY0B,EAAMd,KAAKZ,UACvB2Q,EAAajP,EAAMd,KAAK+P,WACxBlQ,EAAYiB,EAAMd,KAAKH,UAC7BsG,EAAS2I,GAAqB,YAC9BlP,EAAiB,CAACE,aAAcL,EAAIN,OAAMC,YAAWJ,IAAK+Q,EAAW,GAAI9Q,IAAK8Q,EAAW,GAAIlQ,cACxFuH,MAAK,SAAAC,GACgC,IAA1BA,EAAI5I,KAAKgR,MAAMrK,QACfe,EAASkJ,GAAmB,KAC5BlJ,EAASyI,GAAYvH,EAAI5I,OACzB0H,EAAS2I,GAAqB,cAE9B3I,EAASyI,GAAY,2BAAIvH,EAAI5I,MAAT,IAAekR,gBAAiB,EAAGF,MAAO,OAC9DtJ,EAASkJ,GAAmB,wBAC5BlJ,EAAS2I,GAAqB,gBAIzCxH,OAAM,SAAA5K,GACHyJ,EAASqJ,GAAiB9S,EAAMsQ,aAChC7G,EAAS2I,GAAqB,UAC9BlF,YAAW,WACPzD,EAAS2I,GAAqB,eAC/B,QAGNpH,SAAQ,WACLkC,YAAW,WACPzD,EAAS2I,GAAqB,cAC/B,UAON0B,GAAa,SAAC/Q,GACvB,OAAO,SAAC0G,EAAoB0G,GACxB,IAAM/L,EAAQ+L,IACRkD,EAAajP,EAAMd,KAAK+P,WACxBlQ,EAAYiB,EAAMd,KAAKH,UACvBqQ,EAAiBpP,EAAMd,KAAKkQ,eAC5BD,EAAiBnP,EAAMd,KAAKiQ,eAChBnP,EAAMd,KAAKZ,UAC7B+G,EAAS2I,GAAqB,YAC9BlP,EAAiB,CAACE,aAAcL,EAAIN,KAAM,EAAGC,UAAW,IAAKJ,IAAK+Q,EAAW,GAAI9Q,IAAK8Q,EAAW,GAAIlQ,cAChGuH,MAAK,SAAAC,GACE,GAAuB,gBAAnB6I,EAAkC,CAClC,IAAM7C,EAAgBhG,EAAI5I,KAAKgR,MAAMnC,QAAO,SAAC1H,GAAD,OAAyF,IAApEA,EAAE6K,SAASlL,cAAcgI,QAAQ0C,EAAe1K,kBAC3GiI,EAAgBH,EAAcjI,OAC9BqI,EAAO,GACb,GAA6B,IAAzBJ,EAAcjI,OAAc,CAC5B,KAAOiI,EAAcjI,OAAS,GAC1BqI,EAAKC,KAAKL,EAAcM,OAAO,EAAG,IAEtCxH,EAASkJ,GAAmB,KAC5BlJ,EAASiJ,IAAkB,IAC3BjJ,EAASmJ,GAAiB7B,IAC1BtH,EAASyI,GAAY,2BAAIvH,EAAI5I,MAAT,IAAekR,gBAAiBnC,EAAeiC,MAAO,OAC1EtJ,EAAS2I,GAAqB,iBAE9B3I,EAASiJ,IAAkB,IAC3BjJ,EAASmJ,GAAiB,OAC1BnJ,EAASyI,GAAY,2BAAIvH,EAAI5I,MAAT,IAAekR,gBAAiB,EAAGF,MAAO,OAC9DtJ,EAASkJ,GAAmB,+BAC5BlJ,EAAS2I,GAAqB,YAItC,GAAuB,cAAnBoB,EAAgC,CAChC,IAAM7C,EAAgBhG,EAAI5I,KAAKgR,MAAMnC,QAAO,SAAC1H,GAAD,OAAuF,IAAlEA,EAAE8K,OAAOnL,cAAcgI,QAAQ0C,EAAe1K,kBACzGiI,EAAgBH,EAAcjI,OAC9BqI,EAAO,GACb,GAA6B,IAAzBJ,EAAcjI,OAAc,CAC5B,KAAOiI,EAAcjI,OAAS,GAC1BqI,EAAKC,KAAKL,EAAcM,OAAO,EAAG,IAEtCxH,EAASkJ,GAAmB,KAC5BlJ,EAASiJ,IAAkB,IAC3BjJ,EAASmJ,GAAiB7B,IAC1BtH,EAASyI,GAAY,2BAAIvH,EAAI5I,MAAT,IAAekR,gBAAiBnC,EAAeiC,MAAO,OAC1EtJ,EAAS2I,GAAqB,iBAE9B3I,EAASiJ,IAAkB,IAC3BjJ,EAASmJ,GAAiB,OAC1BnJ,EAASyI,GAAY,2BAAIvH,EAAI5I,MAAT,IAAekR,gBAAiB,EAAGF,MAAO,OAC9DtJ,EAASkJ,GAAmB,6BAC5BlJ,EAAS2I,GAAqB,gBAM7CxH,OAAM,SAAA5K,GACHyJ,EAASqJ,GAAiB9S,EAAMsQ,aAChC7G,EAAS2I,GAAqB,UAC9BlF,YAAW,WACPzD,EAAS2I,GAAqB,eAC/B,QAGNpH,SAAQ,WACLkC,YAAW,WACPzD,EAAS2I,GAAqB,cAC/B,UA6JJ6B,GAzSY,WAAmF,IAAlF7P,EAAiF,uDAAnDV,GAAcW,EAAqC,uCACzG,OAAQA,EAAO1E,MACX,KAAK2R,GACD,OAAO,2BAAIlN,GAAUC,EAAO8N,aAChC,KAAKZ,GACD,OAAO,2BAAInN,GAAX,IAAkBkP,kBAAmBjP,EAAOkB,YAChD,KAAKiM,GACD,OAAO,2BAAIpN,GAAX,IAAkB3B,KAAM4B,EAAO+M,UACnC,KAAKK,GACD,OAAO,2BAAIrN,GAAX,IAAkBiP,WAAYhP,EAAOiO,gBACzC,KAAKZ,GACD,OAAO,2BAAItN,GAAX,IAAkBjB,UAAWkB,EAAOqK,gBACxC,KAAKiD,GACD,OAAO,2BAAIvN,GAAX,IAAkBmP,eAAgBlP,EAAO8K,UAC7C,KAAKyC,GACD,OAAO,2BAAIxN,GAAX,IAAkBoP,eAAgBnP,EAAOkB,YAC7C,KAAKsM,GACD,OAAO,2BAAIzN,GAAX,IAAkBqP,eAAgBpP,EAAOkB,YAC7C,KAAK4I,GACD,OAAO,2BAAI/J,GAAX,IAAkBsP,gBAAiBrP,EAAO8K,UAC9C,KAAK2C,GACD,OAAO,2BAAI1N,GAAX,IAAkB4O,cAAe3O,EAAOwO,SAC5C,KAAKd,GACD,OAAO,2BAAI3N,GAAX,IAAkBuP,sBAAuBtP,EAAO+M,UACpD,KAAKY,GACD,OAAO,2BAAI5N,GAAX,IAAkB1B,UAAW2B,EAAO+M,UACxC,KAAKa,GACD,OAAO,2BAAI7N,GAAX,IAAkBwP,cAAevP,EAAO8K,UAC5C,QACI,OAAO/K,ICxHZ3B,GAA8BvD,KAA9BuD,KAAMyR,GAAwBhV,KAAxBgV,WAAYC,GAAYjV,KAAZiV,SAiFVC,GApEG,SAACpO,GA2Bf,IA3B8C,IACvCqO,EAAmFrO,EAAnFqO,gBAAiBC,EAAkEtO,EAAlEsO,SAAU7E,EAAwDzJ,EAAxDyJ,YAAaK,EAA2C9J,EAA3C8J,WAAYC,EAA+B/J,EAA/B+J,kBAAmBwE,EAAYvO,EAAZuO,SAExE9K,EAAWC,cAsBb8K,EAAaC,KAAKC,KAAKL,EAAkBC,GACzCK,EAAW,GACNC,EAAI,EAAGA,GAAKJ,EAAYI,IAC7BD,EAAS3D,KAAK4D,GAGlB,IAAMC,EAAeJ,KAAKC,KAAKF,EA3BX,IAJyB,EAiCH9M,mBAAS,GAjCN,mBAiCtCoN,EAjCsC,KAiCvBC,EAjCuB,KAoCvCC,EAhCc,IAgCWF,EAAgB,GAAmB,EAC5DG,EAjCc,GAiCWH,EAG/B,OAEI,sBAAK1V,UAAW+U,GAAhB,UACKW,EAAgB,GACjB,wBAAQ5T,QAAS,WACb6T,EAAiBD,EAAgB,IADrC,kBAICH,EAAS/D,QAAO,SAAA1H,GAAC,OAAIA,GAAK8L,GAAyB9L,GAAK+L,KACpDC,KAAI,SAACC,GACF,OAAO,sBACH/V,UAAW0Q,EAAaC,IAAsBoF,EAAI,EAAIjB,GAAazR,GAAOgN,IAAgB0F,EAAIjB,GAAazR,GAE3GvB,QAAS,YA9CP,SAACiU,GACdZ,IASIzE,GAAcrG,GDXP2H,ECWwB+D,EDXH,CACzCxV,KAAM,uBACNyR,aCYYtB,GAAcrG,EDsBU,SAAC2H,GAAD,MAAsB,CAC1DzR,KAAM,4CACNyR,WCxBmCgE,CAAyBD,EAAI,OAVnDrF,GAAcrG,EFLqB,CAChD9J,KAAM,iCACNyR,QEGmD+D,IAGvCrF,GAAcrG,EFuBM,SAAC2H,GAAD,MAAsB,CACtDzR,KAAM,yCACNyR,WEzBmCiE,CAAqBF,EAAI,KDPzC,IAAC/D,ECgDIkE,CAAcH,IAJf,SAKCA,GAHCA,MAMhBN,EAAeC,GAChB,wBAAQ5T,QAAS,WACb6T,EAAiBD,EAAgB,IADrC,sB,0BC5ENS,G,QAAQrW,EAARqW,OA+BSC,GAtBqC,SAAC,GAM/C,IAJEC,EAIH,EAJGA,QACUC,GAGb,EAHG9V,SAGH,EAHa8V,gBACPxV,EAEN,uDACKyV,EAAuBF,EAAUA,EAAQP,KAAI,SAAChM,EAAG0L,GAAJ,OAAW,iCAAiB1L,GAAJ0L,MAAoB,GAQ/F,OACI,gDAAQxV,UAAWmW,GAAQ3V,SAPN,SAACa,GACnBA,EAAEC,cAAcL,OAASqV,GACxBA,EAAejV,EAAEC,cAAcL,SAKwBH,GAA3D,aACKyV,MC0PEC,GApPY,WAEvB,IAAM9L,EAAUF,aAAmC,SAAAxF,GAAK,OAAIA,EAAMyF,MAAM9E,SAClEtB,EAAUmG,aAAiD,SAAAxF,GAAK,OAAIA,EAAMX,WAHnD,EAQzBA,EAAQA,QAHRT,EALyB,EAKzBA,IACAC,EANyB,EAMzBA,KACAW,EAPyB,EAOzBA,OAGEwM,EAASxG,aAAkD,SAAAxF,GAAK,OAAIA,EAAMgM,UAVnD,EAWO1I,mBAAmB,CAAC0I,EAAOZ,cAAeY,EAAOb,gBAXxD,mBAWtBsG,EAXsB,KAWVC,EAXU,OAYDpO,mBAAiB,IAZhB,mBAYtBqO,EAZsB,KAYdC,EAZc,KAevBC,EAAwC,CAAC,UAAW,cAf7B,EAgBavO,mBAAyBuO,EAAoB,IAhB1D,mBAgBtBC,EAhBsB,KAgBNC,EAhBM,KAoBzB/G,EAcAgB,EAdAhB,UACAK,EAaAW,EAbAX,YACAH,EAYAc,EAZAd,oBACA5M,EAWA0N,EAXA1N,UACA8M,EAUAY,EAVAZ,cACAD,EASAa,EATAb,cACAG,EAQAU,EARAV,WACAL,EAOAe,EAPAf,eACAS,EAMAM,EANAN,WACAC,EAKAK,EALAL,kBACAC,EAIAI,EAJAJ,YACAJ,EAGAQ,EAHAR,cACAK,EAEAG,EAFAH,cACAtD,EACAyD,EADAzD,UAGElD,EAAWC,cAEjBjB,qBAAU,YAEDqH,GAAcrG,EAASyG,MAGxBJ,GAAcrG,EAASgH,QAE5B,CAAChB,EAAaD,EAAeD,EAAeG,EAAYE,EAAe9F,IAG1E,IAGMsM,EAA0B,SAAC/E,EAA6BgF,GACtDhF,EACA5H,EJ1DyB,SAAC4H,GAAD,MAAiC,CAClE1R,KAAM,wCACN0R,oBIwDiBiF,CAAsBjF,IACxBgF,IACP5M,EJ9CiD,CACzD9J,KAAM,gCACN4F,UI4C+B8Q,IACvB5M,EJnDuC,CAC/C9J,KAAM,gCACNwP,QIiD+B4G,IACvBtM,EAASgH,QAIX8F,EAAmB,SAAChR,GACtBkE,EAASgF,GAAclJ,KAErBiR,EAAuB,SAAC1T,GAC1B2G,EJ2MmB,SAAC3G,GACxB,OAAO,SAAC2G,EAAyB0G,GAC7B,IAAML,EAAaK,IAAWC,OAAON,WACrC1N,EAAyBU,GACpB4H,MAAK,SAAAC,IAEGmF,GAAcrG,EAASyG,MAGxBJ,GAAcrG,EAASgH,SAG9B7F,OAAM,SAAA5K,GACHyJ,EAASyF,GAAalP,EAAMsQ,aAC5B7G,EAASwF,GAAiB,UAC1B/B,YAAW,WACPzD,EAASwF,GAAiB,eAC3B,QAGNjE,SAAQ,WACLkC,YAAW,WACPzD,EAASwF,GAAiB,cAC3B,SIlOFwH,CAAY3T,KAGnB4T,EAAuB,SAAC5T,GAC1B2G,EJ2KmB,SAAC3G,GACxB,OAAO,SAAC2G,EAAyB0G,GAC7B1G,EAASwF,GAAiB,YAC1B,IAAMa,EAAaK,IAAWC,OAAON,WACrB1N,EAAyBU,GACpC4H,MAAK,SAAAC,IAEGmF,GAAcrG,EAASyG,MAGxBJ,GAAcrG,EAASgH,SAG9B7F,OAAM,SAAA5K,GACHyJ,EAASyF,GAAalP,EAAMsQ,aAC5B7G,EAASwF,GAAiB,UAC1B/B,YAAW,WACPzD,EAASwF,GAAiB,eAC3B,QAGNjE,SAAQ,WACLkC,YAAW,WACPzD,EAASwF,GAAiB,cAC3B,SInMF0H,CAAY7T,KAMnB8T,EAAkB,SAACnW,GACrBuV,EAAUvV,EAAEC,cAAcL,QAiB9B,OAAKyJ,EAIiB,YAAlBmG,EACO,cAAC,GAAD,IAGW,UAAlBA,EACO,cAAC,GAAD,CAAcvD,WAAY,aAAcC,UAAWA,IAKxC,aAAlBsD,EACO,cAAC,IAAD,CAAUlG,GAAIC,GAAKC,UAK1B,qCACI,sBAAK7K,UAAWF,KAAEuE,QAAlB,UACI,sBAAKrE,UAAWF,KAAE2X,KAAlB,UACI,sBAAKzX,UAAWF,KAAE4X,UAAlB,UACI,qBAAK1X,UAAWF,KAAE6X,KAAlB,SACI,cAAC,IAAD,CAAShN,GAAIC,GAAKC,QAAlB,SAA2B,qBAAK5K,IAAKuE,GAAkBiT,GAAMtX,IAAI,SAErE,qBAAKH,UAAWF,KAAE+D,KAAlB,SACKA,IAEL,qBAAK7D,UAAWF,KAAE8X,MAAlB,SACKhU,IAEL,uBACA,uBACA,cAAC,EAAD,CAAa9B,QAjDC,WAC9BuI,EJqIiB,WAA8C,IAA7CpH,EAA4C,uDAApB,CAACY,KAAM,SACrD,OAAO,SAACwG,EAAyB0G,GAC7B,IAAML,EAAaK,IAAWC,OAAON,WACrCrG,EAASwF,GAAiB,YACV7M,EAAyBC,GACpCqI,MAAK,SAAAC,IAEGmF,GAAcrG,EAASyG,MAGxBJ,GAAcrG,EAASgH,SAG9B7F,OAAM,SAAA5K,GACHyJ,EAASyF,GAAalP,EAAMsQ,aAC5B7G,EAASwF,GAAiB,UAC1B/B,YAAW,WACPzD,EAASwF,GAAiB,eAC3B,QAENjE,SAAQ,WACLkC,YAAW,WACPzD,EAASwF,GAAiB,cAC3B,SI5JFgI,KAgDO,6BAGJ,sBAAK7X,UAAWF,KAAEgY,KAAlB,UACI,qBAAK9X,UAAWF,KAAEiY,QAAlB,6BACA,uBACA,uBAHJ,mBAKI,uBACA,uBACA,sBAAK/X,UAAWF,KAAEkY,YAAlB,UACI,uCAAUvB,EAAW,MACrB,uCAAUA,EAAW,SAEzB,cAAC,KAAD,CAAOvT,IAAK,EAAGC,IAAK,IAAK8U,aAAcxB,EAAYxV,MAAOwV,EACnDjW,SA/FE,SAAC0S,GAC1BwD,EAAcxD,MA+FE,uBACA,uBACA,cAAC,EAAD,CAAapR,QAAS,kBAAMkV,EAAwBP,IAApD,0BAGR,sBAAKzW,UAAWF,KAAEoY,MAAlB,UACI,sBAAKlY,UAAWF,KAAEmL,IAAlB,2BACmBpH,KAEnB,sBAAKiD,MAAO,CAACqR,QAAS,gBAAtB,UACI,uBAAO3X,SAlFI,WAC3B6J,EJpCiD,CACrD9J,KAAM,oCACN4F,WIkC+BqK,KAiF8B4H,QAAS5H,EAAejQ,KAAM,aAD3E,cAGA,sBAAKP,UAAWF,KAAEuY,IAAlB,UACI,sBAAKvR,MAAO,CAACqR,QAAS,QAAtB,UACwB,YAAnBrB,GACD,cAAC,EAAD,CAAgBtW,SAAUgX,EAAiBvW,MAAO0V,EAAQ9V,MAAM,mBAC5C,eAAnBiW,GACD,cAAC,EAAD,CAAgBtW,SAAUgX,EAAiBvW,MAAO0V,EAAQ9V,MAAM,sBAChE,cAAC,EAAD,CAAagB,SAAqB,KAAX8U,EACV7U,QAAS,kBAAMkV,OAAwBsB,EAAWxB,IAD/D,oBAECpG,GAAc,cAAC,EAAD,CAAa5O,QAjF1B,WACtBuI,EAASsF,GAAe,KACxBtF,EAASoF,IAAc,IACvBpF,EAASkF,GAAkB,OAC3BlF,EAASgF,GAAc,aACvBhF,EAASyG,MACT8F,EAAU,KA2EyB,0BAEnB,cAAC,GAAD,CAAaN,eAAgBS,EAAiBV,QAASQ,OAG3D,wBAAO7W,UAAWF,KAAEyY,QAApB,UACI,gCACA,+BACI,sCACI,gCACI,wBAAQvY,UAAiC,UAAtBgR,EAAOV,WAAyBxQ,KAAE0Y,UAAY,GACzD1W,QAAS,kBAAMqV,EAAiB,UADxC,iBAGA,wBAAQnX,UAAiC,UAAtBgR,EAAOV,WAAyBxQ,KAAE0Y,UAAY,GACzD1W,QAAS,kBAAMqV,EAAiB,UADxC,uBAMR,uCACI,gCACI,wBAAQnX,UAAiC,gBAAtBgR,EAAOV,WAA+BxQ,KAAE0Y,UAAY,GAC/D1W,QAAS,kBAAMqV,EAAiB,gBADxC,iBAGA,wBAAQnX,UAAiC,gBAAtBgR,EAAOV,WAA+BxQ,KAAE0Y,UAAY,GAC/D1W,QAAS,kBAAMqV,EAAiB,gBADxC,uBAKR,8CACI,gCACI,wBAAQnX,UAAiC,aAAtBgR,EAAOV,WAA4BxQ,KAAE0Y,UAAY,GAC5D1W,QAAS,kBAAMqV,EAAiB,aADxC,iBAGA,wBAAQnX,UAAiC,aAAtBgR,EAAOV,WAA4BxQ,KAAE0Y,UAAY,GAC5D1W,QAAS,kBAAMqV,EAAiB,aADxC,uBAIR,4CACA,8CAGJ,kCAAQvG,GACR,qBAAK9J,MAAO,CAAC2R,OAAQ,OAAQC,SAAU,OAAQ3R,MAAO,OAAtD,SAA+D6J,IAC9DZ,GAAaA,EAAU8F,KAAI,SAAAhM,GAAC,OACzB,+BACI,6BAAKA,EAAEjG,OACP,6BAAKiG,EAAE6O,aACP,6BAAK7O,EAAEnF,QAAU,IAAIiU,KAAK9O,EAAEnF,SAASkU,qBAAuB,KAC5D,6BAAK/O,EAAEgI,YACP,qBAAIhL,MAAO,CAACqR,QAAS,QAArB,UAA8B,cAAC,IAAD,CAC1BxN,GAAI,SAAWb,EAAElG,IADS,SACJ,cAAC,EAAD,sBACrBkG,EAAEvG,UAAYc,EAAQA,QAAQT,KAC/B,cAAC,EAAD,CAAa9B,QAAS,kBAAMwV,EAAqBxN,EAAElG,MAAnD,iBACCkG,EAAEvG,UAAYc,EAAQA,QAAQT,KAC/B,cAAC,EAAD,CAAa9B,QAAS,kBAAMsV,EAAqBtN,EAAElG,MAAnD,yBAVCkG,EAAElG,QAadqM,GAAkBA,EAAeU,GAAmBmF,KAAI,SAAAhM,GAAC,OACtD,+BACI,6BAAKA,EAAEjG,OACP,6BAAKiG,EAAE6O,aACP,6BAAK7O,EAAEnF,QAAU,IAAIiU,KAAK9O,EAAEnF,SAASkU,qBAAuB,KAC5D,6BAAK/O,EAAEgI,YACP,qBAAIhL,MAAO,CAACqR,QAAS,QAArB,UAA8B,cAAC,EAAD,oBACzBrO,EAAEvG,UAAYc,EAAQA,QAAQT,KAC/B,cAAC,EAAD,CAAa9B,QAAS,kBAAMwV,EAAqBxN,EAAElG,MAAnD,iBACCkG,EAAEvG,UAAYc,EAAQA,QAAQT,KAC/B,cAAC,EAAD,CAAa9B,QAAS,kBAAMsV,EAAqBtN,EAAElG,MAAnD,yBATCkG,EAAElG,oBAe3B,cAAC,GAAD,CAAW+M,kBAAmBA,EAAmBD,WAAYA,EAClDuE,gBAAiB/E,EAAqBG,YAAaA,EAAa6E,SAAU5R,OAjJlF,cAAC,GAAD,K,oBCnBAwV,GA9Fe,WAC1B,IAAM3O,EAAWhC,GAAS,GAAI,CAACQ,SAAS,EAAMqB,UAAW,EAAGC,UAAW,KACjE+D,EAAY7F,GAAS,GAAI,CAACQ,SAAS,EAAMqB,UAAW,EAAGC,UAAW,KAClEI,EAAWC,cACXqD,EAAsBnD,aAAmD,SAAAxF,GAAK,OAAIA,EAAM4I,YAAY5F,iBACpGuC,EAAkBC,aAAkC,SAAAxF,GAAK,OAAIA,EAAM4I,YAAY3F,gCAC/EyC,EAAUF,aAAmC,SAAAxF,GAAK,OAAIA,EAAMyF,MAAM9E,SACjEoT,EAASC,cAATD,OAUH5O,EAAS3B,SAAW2B,EAASlJ,QAC7BoJ,EAAS9E,GAAc,KAI3B,IAAMyB,EAAiBmD,EAAS3B,SAAW2B,EAASxB,QAG9CtB,EAAmB8C,EAAS3B,SAAW2B,EAAStB,eAEhDvB,EAAmB6C,EAAS3B,SAAW2B,EAASpB,eAGhDvB,EAA2B2C,EAASlJ,QAAU+M,EAAU/M,OAA6B,KAApB+M,EAAU/M,OAEvDkJ,EAAShB,YAAegB,EAAShB,WAE3D,OAAIuB,EACO,cAAC,IAAD,CAAUC,GAAIC,GAAKC,UAGF,YAAxB8C,EACO,cAAC,GAAD,IAIiB,SAAxBA,EACQ,8BACA,cAAC,GAAD,CAAcL,WAAY,cAIV,QAAxBK,EACQ,cAAC,IAAD,CAAUhD,GAAIC,GAAK8B,QAM3B,qBAAK1M,UAAWkB,KAAG4J,aAAnB,SACI,sBAAK9K,UAAWkB,KAAG6J,KAAnB,UACI,qBAAK/K,UAAWkB,KAAG8J,KAAnB,0BAGA,qBAAKhL,UAAWkB,KAAG+J,IAAnB,iCAGA,iCACKV,GAAmB,8BAAMA,IAE1B,cAAC,GAAD,CAAavD,eAAgBA,EAAgBK,iBAAkBA,EAClDC,iBAAkBA,IAG/B,cAAC,EAAD,CAAgB9G,SAAU2J,EAAS3J,SAAUqJ,OAAQ,WACjDM,EAASN,QAAO,IACjB5I,MAAOkJ,EAASlJ,MACHJ,MAAO,4BAA6BN,KAAM,aAE1D,cAAC,GAAD,CAAaiH,0BAA2BA,GAA8C,KAAlBwG,EAAU/M,QAG9E,cAAC,EAAD,CAAgBT,SAAUwN,EAAUxN,SAAUqJ,OAAQ,WAClDmE,EAAUnE,QAAO,IAClB5I,MAAO+M,EAAU/M,MACJJ,MAAO,uBAAwBN,KAAM,aAGrD,cAAC,EAAD,CAAasB,UAAW2F,EAA0B1F,QA5E3C,WACnB,IjBkC0Ba,EiBlCpBgJ,EAAU,CACZxB,SAAUA,EAASlJ,MACnBgY,mBAAoBF,GAExB1O,GjB8B0B1H,EiB9BCgJ,EjB+BxB,SAACtB,GACJA,EAASxC,GAAiB,YAC1BnF,EAAmBC,GACd2I,MAAK,SAAAC,GACElB,EAASxC,GAAiB,YAGjC2D,OAAM,SAAA5K,GACH,IAAM6K,EAAS7K,EAAM8K,SAAW9K,EAAM8K,SAAS/I,KAAK/B,MAC7CA,EAAM+K,QAAU,gCACvBtB,EAASvC,GAA4B2D,IACrCpB,EAASxC,GAAiB,aAE7B+D,SAAQ,WACDkC,YAAW,WACPzD,EAASxC,GAAiB,UAC3B,YiByBUf,MAAO,CAACgF,MAAO,IAAKC,UAAW,GAAIC,aAAc,IAD9D,0C,mBCsMLkN,GAxQK,WAEhB,IAAM7O,EAAWC,cACVyO,EAASC,cAATD,MACDI,EAAa3O,aAAgD,SAAAxF,GAAK,OAAIA,EAAMd,QAC5EkV,EAAW5O,aAA0C,SAAAxF,GAAK,OAAIA,EAAMd,KAAKyP,SACzEtP,EAAUmG,aAAiD,SAAAxF,GAAK,OAAIA,EAAMX,WAN1D,EAOsBiE,mBAAmB,CAAC6Q,EAAWlF,WAAW,GAAIkF,EAAWlF,WAAW,KAP1F,mBAOfoF,EAPe,KAOCC,EAPD,KAQhBC,EAAgD,CAAC,YAAa,eAR9C,EAS8BjR,mBAA6BiR,EAAwB,IATnF,mBASfC,EATe,KASKC,EATL,OAUMnR,mBAAiB,IAVvB,mBAUfqO,EAVe,KAUPC,EAVO,KAWhBlM,EAAUF,aAAmC,SAAAxF,GAAK,OAAIA,EAAMyF,MAAM9E,SAGpEuO,EAWAiF,EAXAjF,kBACAF,EAUAmF,EAVAnF,WACAH,EASAsF,EATAtF,gBACAxQ,EAQA8V,EARA9V,KACA4Q,EAOAkF,EAPAlF,WACAlQ,EAMAoV,EANApV,UACAsQ,EAKA8E,EALA9E,eACAE,EAIA4E,EAJA5E,sBACAX,EAGAuF,EAHAvF,cACAU,EAEA6E,EAFA7E,gBACAE,EACA2E,EADA3E,cAQEkF,EAA2B,SAACC,EAAqC1C,GAC/D0C,EACAtP,EAAS4I,GAAc0G,IAChB1C,IACP5M,EAASgJ,GAAkB4D,IAC3B5M,EAAS+I,GAAkBuD,IAC3BtM,EAASqK,GAAWqE,MAWtB5B,EAAmB,SAAChR,GACtBkE,EAAS8I,GAAkBhN,KAEzByT,EAAsB,SAACvY,GACzBuV,EAAUvV,EAAEC,cAAcL,QAGxB4Y,EAAsB,SAAC7V,GL0JV,IAACC,EKzJhBoG,GLyJgBpG,EKzJC,CAACD,gBL0Jf,SAACqG,EAAyB0G,GAC7B1G,EAAS2I,GAAqB,YAC9B,IAAMtC,EAAaK,IAAWC,OAAON,WACrC5M,EAAoBG,GACfqH,MAAK,SAAAC,IAEGmF,GAAcrG,EAASoK,GAAQxQ,EAAcD,eAG9C0M,GAAcrG,EAASqK,GAAWzQ,EAAcD,kBAGvDwH,OAAM,SAAA5K,GACHyJ,EAASqJ,GAAiB9S,EAAMsQ,aAChC7G,EAAS2I,GAAqB,UAC9BlF,YAAW,WACPzD,EAAS2I,GAAqB,eAC/B,QAGNpH,SAAQ,WACLkC,YAAW,WACPzD,EAAS2I,GAAqB,cAC/B,YK9KT8G,EAAsB,SAACpW,EAAgBM,GACzCqG,EL8MkB,SAAC3G,EAAgBM,GACvC,OAAO,SAACqG,EAAyB0G,GAC7B1G,EAAS2I,GAAqB,YAC9B,IAAMtC,EAAaK,IAAWC,OAAON,WACrC5M,EAAmBJ,GACd4H,MAAK,SAAAC,IAEGmF,GAAcrG,EAASoK,GAAQzQ,IAGhC0M,GAAcrG,EAASqK,GAAW1Q,OAGzCwH,OAAM,SAAA5K,GACHyJ,EAASqJ,GAAiB9S,EAAMsQ,aAChC7G,EAAS2I,GAAqB,UAC9BlF,YAAW,WACPzD,EAAS2I,GAAqB,eAC/B,QAGNpH,SAAQ,WACLkC,YAAW,WACPzD,EAAS2I,GAAqB,cAC/B,SKtOF+G,CAAWrW,EAAQM,KAG1BgW,EAAsB,SAACpW,EAAaI,GACtCqG,EL6KkB,SAACpG,EAAsCD,GAC7D,OAAO,SAACqG,EAAyB0G,GAC7B1G,EAAS2I,GAAqB,YAC9B,IAAMtC,EAAaK,IAAWC,OAAON,WACrC5M,EAAmBG,GACdqH,MAAK,SAAAC,IAEGmF,GAAcrG,EAASoK,GAAQzQ,IAGhC0M,GAAcrG,EAASqK,GAAW1Q,OAGzCwH,OAAM,SAAA5K,GACHyJ,EAASqJ,GAAiB9S,EAAMsQ,aAChC7G,EAAS2I,GAAqB,UAC9BlF,YAAW,WACPzD,EAAS2I,GAAqB,eAC/B,QAGNpH,SAAQ,WACLkC,YAAW,WACPzD,EAAS2I,GAAqB,cAC/B,SKrMFiH,CAAW,CAACrW,MAAK+Q,SAAU,aAAc3Q,KAjEhC,EAmFlBK,EAAQA,QAHRT,EAhFkB,EAgFlBA,IACAC,EAjFkB,EAiFlBA,KACAW,EAlFkB,EAkFlBA,OAcJ,OAXA6E,qBAAU,YAEDgL,GAAkBhK,EAASoK,GAAQsE,IAGpC1E,GAAkBhK,EAASqK,GAAWqE,MAG3C,CAAC1V,EAAM4Q,EAAYlQ,IAGjB2G,EAIqB,YAAtBwJ,EACO,cAAC,GAAD,IAGe,UAAtBA,EACO,cAAC,GAAD,CAAc5G,WAAY,aAAcC,UAAWiH,IAKpC,aAAtBN,EACO,cAAC,IAAD,CAAUvJ,GAAIC,GAAKC,UAI1B,qCACI,sBAAK7K,UAAWF,KAAEuE,QAAlB,UACI,sBAAKrE,UAAWF,KAAE2X,KAAlB,UACI,sBAAKzX,UAAWF,KAAE4X,UAAlB,UACI,qBAAK1X,UAAWF,KAAE6X,KAAlB,SACI,cAAC,IAAD,CAAShN,GAAIC,GAAKC,QAAlB,SAA2B,qBAAK5K,IAAKuE,GAAkBiT,GAAMtX,IAAI,SAErE,qBAAKH,UAAWF,KAAE+D,KAAlB,SACKA,IAEL,qBAAK7D,UAAWF,KAAE8X,MAAlB,SACKhU,IAEL,uBACA,uBACA,cAAC,EAAD,CAAa/B,WAAYwC,EAAQA,QAAQT,MAAQuV,EAAWnF,YAAalS,QAAS,WAC9E+X,EAAoBd,IADxB,6BAKJ,sBAAK/Y,UAAWF,KAAEgY,KAAlB,UACI,qBAAK9X,UAAWF,KAAEiY,QAAlB,yBACA,uBACC/D,EACD,uBACA,uBACA,uBANJ,qBAOuBH,EACnB,uBACA,uBACA,sBAAK7T,UAAWF,KAAEkY,YAAlB,UACI,uCAAUqB,EAAe,MACzB,uCAAUA,EAAe,SAE7B,cAAC,KAAD,CAAOa,KAAM,GAAKhX,IAAK,EAAGC,IAAK,EAAG8U,aAAcoB,EAAgBpY,MAAOoY,EAChE7Y,SA1HE,SAACmZ,GAC1BL,EAAkBK,MA0HF,uBACA,wBACEtF,GACF,cAAC,EAAD,CAAavS,QAAS,kBAAM4X,EAAyBL,IAArD,oBACChF,GAAkB,cAAC,EAAD,CACfvS,QAAS,kBAnH8BmV,EAmHqBuC,EAlHhFnP,EAAS4I,GAkHuDoG,IAjHhEhP,EAASgJ,GAAkB4D,IAC3B5M,EAAS+I,GAAkBuD,SAC3BtM,EAASqK,GAAWqE,IAJa,IAA0B9B,GAkHxB,0BAI3B,sBAAKjX,UAAWF,KAAEoY,MAAlB,UACI,sBAAKlY,UAAWF,KAAEmL,IAAlB,2BACmBpH,KAEnB,uBACA,uBACA,sBAAK7D,UAAWF,KAAEuY,IAAlB,UACI,sBAAKvR,MAAO,CAACqR,QAAS,QAAtB,UAC4B,cAAvBqB,GACD,cAAC,EAAD,CAAgBhZ,SAAUoZ,EAAqB3Y,MAAO0V,EAAQ9V,MAAM,qBAC5C,gBAAvB2Y,GACD,cAAC,EAAD,CAAgBhZ,SAAUoZ,EAAqB3Y,MAAO0V,EAAQ9V,MAAM,uBACpE,cAAC,EAAD,CAAagB,SAAqB,KAAX8U,EACV7U,QAAS,kBAAM4X,OAAyBpB,EAAWkB,IADhE,oBAECnF,GAAkB,cAAC,EAAD,CAAavS,QAxG1B,WAC1BuI,EAASkJ,GAAmB,KAC5BlJ,EAASiJ,IAAkB,IAC3BjJ,EAASmJ,GAAiB,OAC1BnJ,EAAS8I,GAAkB,aAC3B9I,EL3C0C,CAC9C9J,KAAM,6BACNyR,QKyC0B,IACtB3H,EAASoK,GAAQsE,IACjBnC,EAAU,KAiG6B,0BAEvB,cAAC,GAAD,CAAaN,eAAgBmD,EAAuBpD,QAASkD,OAGjE,wBAAOvZ,UAAWF,KAAEyY,QAApB,UACI,gCACA,+BACI,0CACI,gCACI,wBAAQvY,UAAoC,cAAzBmZ,EAAWpV,UAA4BjE,KAAE0Y,UAAY,GAChE1W,QAAS,kBAAMqV,EAAiB,cADxC,iBAGA,wBAAQnX,UAAoC,cAAzBmZ,EAAWpV,UAA4BjE,KAAE0Y,UAAY,GAChE1W,QAAS,kBAAMqV,EAAiB,cADxC,uBAMR,wCACI,gCACI,wBAAQnX,UAAoC,YAAzBmZ,EAAWpV,UAA0BjE,KAAE0Y,UAAY,GAC9D1W,QAAS,kBAAMqV,EAAiB,YADxC,iBAGA,wBAAQnX,UAAoC,YAAzBmZ,EAAWpV,UAA0BjE,KAAE0Y,UAAY,GAC9D1W,QAAS,kBAAMqV,EAAiB,YADxC,uBAKR,uCACI,gCACI,wBAAQnX,UAAoC,WAAzBmZ,EAAWpV,UAAyBjE,KAAE0Y,UAAY,GAC7D1W,QAAS,kBAAMqV,EAAiB,WADxC,iBAGA,wBAAQnX,UAAoC,WAAzBmZ,EAAWpV,UAAyBjE,KAAE0Y,UAAY,GAC7D1W,QAAS,kBAAMqV,EAAiB,WADxC,uBAKR,yCACI,gCACI,wBAAQnX,UAAoC,aAAzBmZ,EAAWpV,UAA2BjE,KAAE0Y,UAAY,GAC/D1W,QAAS,kBAAMqV,EAAiB,aADxC,iBAGA,wBAAQnX,UAAoC,aAAzBmZ,EAAWpV,UAA2BjE,KAAE0Y,UAAY,GAC/D1W,QAAS,kBAAMqV,EAAiB,aADxC,uBAIR,6CAGJ,kCACC7C,GACD,qBAAKxN,MAAO,CAAC2R,OAAQ,OAAQC,SAAU,OAAQ3R,MAAO,OAAtD,SAA+DuN,IAC9D8E,GAAYA,EAAStD,KAAI,SAAAhM,GAAC,OACvB,+BACI,6BAAKA,EAAE6K,WACP,6BAAK7K,EAAE8K,SACP,6BAAK9K,EAAEqQ,MAAMC,QAAQ,KACrB,6BAAK,IAAIxB,KAAK9O,EAAEnF,SAASkU,uBACzB,+BAAI,cAAC,EAAD,CAAa/W,QAAS,WACtBgY,EAAoBhQ,EAAElG,IAAKkG,EAAE9F,eAD7B,oBAGA,cAAC,EAAD,CAAalC,QAAS,WAClBkY,EAAoBlQ,EAAElG,IAAKkG,EAAE9F,eADjC,yBARC8F,EAAE9F,iBAYd4P,GAAiBA,EAAcW,GAAuBuB,KAAI,SAAAhM,GAAC,OACxD,+BACI,6BAAKA,EAAE6K,WACP,6BAAK7K,EAAE8K,SACP,6BAAK9K,EAAEqQ,MAAMC,QAAQ,KACrB,6BAAK,IAAIxB,KAAK9O,EAAEnF,SAASkU,uBACzB,+BAAI,cAAC,EAAD,CAAa/W,QAAS,WACtBgY,EAAoBhQ,EAAElG,IAAKkG,EAAE9F,eAD7B,oBAGA,cAAC,EAAD,CAAalC,QAAS,WAClBkY,EAAoBlQ,EAAElG,IAAKkG,EAAE9F,eADjC,yBARC8F,EAAE9F,6BAgB3B,cAAC,GAAD,CAAWmR,UAAU,EAAMxE,kBAAmB4D,EAAuB7D,WAAY2D,EACtEY,gBAAiBpB,EAAiBxD,YAAahN,EAAM6R,SAAU,OAjKvE,cAAC,GAAD,KCxHFtK,GAAO,CAChByP,UAAW,UACX3N,MAAO,SACP7B,QAAS,WACTM,aAAc,eACdC,aAAc,OACdkP,KAAM,eACNC,gBAAgB,2BAChBtN,aAAa,iBAIJuN,GAAS,WAClB,OACI,8BACI,eAAC,IAAD,WAEI,cAAC,IAAD,CAAOC,KAAM,IAAKC,OAAK,EAACC,OAAQ,kBAAM,cAAC,IAAD,CAAUhQ,GAAIC,GAAK8B,WACzD,cAAC,IAAD,CAAO+N,KAAM7P,GAAK8B,MAAOiO,OAAQ,kBAAM,cAAC,GAAD,OACvC,cAAC,IAAD,CAAOF,KAAM7P,GAAKC,QAAS8P,OAAQ,kBAAM,cAAC,GAAD,OACzC,cAAC,IAAD,CAAOF,KAAM7P,GAAKO,aAAcwP,OAAQ,kBAAM,cAAC,GAAD,OAC9C,cAAC,IAAD,CAAOF,KAAM7P,GAAKQ,aAAcuP,OAAQ,kBAAM,cAAC,GAAD,OAC9C,cAAC,IAAD,CAAOF,KAAM7P,GAAK0P,KAAMK,OAAQ,kBAAM,cAAC,GAAD,OACtC,cAAC,IAAD,CAAOF,KAAM7P,GAAK2P,gBAAiBI,OAAQ,kBAAM,cAAC,GAAD,OACjD,cAAC,IAAD,CAAOF,KAAM7P,GAAKqC,aAAc0N,OAAQ,kBAAM,cAAC,GAAD,OAE9C,cAAC,IAAD,CAAOA,OAAQ,kBAAM,cAAC,EAAD,a,6BC1B9BC,GAAgD9a,KAAhD8a,cAAeC,GAAiC/a,KAAjC+a,WAAYC,GAAqBhb,KAArBgb,kBAuCnBC,GArCA,WAEX,IAAM1Q,EAAWC,cAEXI,EAAUF,aAAmC,SAAAxF,GAAK,OAAIA,EAAMyF,MAAM9E,SAOxE,OACI,qBAAK3F,UAAWkB,KAAG8Z,KAAnB,SACI,sBAAKhb,UAAWkB,KAAG+Z,OAAnB,UACI,8BAAK,cAAC,KAAD,CAASjb,UAAWkB,KAAGyW,SAC5B,sBAAK3X,UAAW4a,GAAhB,UACI,cAAC,IAAD,CAASjQ,GAAIC,GAAK2P,gBAAiBva,UAAW6a,GAAYK,gBAAiBJ,GAA3E,6BAEA,cAAC,IAAD,CAASnQ,GAAIC,GAAKyP,UAAWra,UAAW6a,GAC/BK,gBAAiBJ,GAD1B,sBAEA,cAAC,IAAD,CAASnQ,GAAIC,GAAK8B,MAAO1M,UAAW6a,GAAYK,gBAAiBJ,GAAjE,mBACA,eAAC,IAAD,CAASnQ,GAAIC,GAAKC,QAAS7K,UAAW6a,GAC7BK,gBAAiBJ,GAD1B,cAC8C,cAAC,KAAD,CAAW9a,UAAWkB,KAAGia,WADvE,cAEA,cAAC,IAAD,CAASxQ,GAAIC,GAAKO,aAAcnL,UAAW6a,GAAYK,gBAAiBJ,GAAxE,0BAEA,cAAC,IAAD,CAASnQ,GAAIC,GAAKQ,aAAcpL,UAAW6a,GAClCK,gBAAiBJ,GAD1B,0BAEA,cAAC,IAAD,CAASnQ,GAAIC,GAAK0P,KAAMta,UAAW6a,GAAYK,gBAAiBJ,GAAhE,kBACA,cAAC,IAAD,CAASnQ,GAAIC,GAAKqC,aAAcjN,UAAW6a,GAAYK,gBAAiBJ,GAAxE,4BAGHpQ,GAAW,8BAAK,cAAC,EAAD,CAAa5I,QAxBf,WACvBuI,GxBwCG,SAACA,GACJA,EAAS5E,IAAa,IACtB/C,IACK4I,MAAK,SAAAC,GAEElB,EAASjG,EAAW,CAChBR,IAAK,KACLW,MAAO,KACPV,KAAM,KACNW,OAAQ,KACRC,qBAAsB,KACtBC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,SAAU,KACVC,WAAY,KACZlE,MAAO,QAEfyJ,EAAShF,IAAU,OAGtBmG,OAAM,SAAA5K,GACH,IAAM6K,EAAS7K,EAAM8K,SAAW9K,EAAM8K,SAAS/I,KAAK/B,MAC7CA,EAAM+K,QAAU,gCACvBtB,EAAS9E,GAAckG,OAE1BG,SAAQ,WACDvB,EAAS5E,IAAa,WwB5CT,4BCvC3B2V,GAAqB,gCAGdC,GAAmB,SAACC,GAAD,MAAoD,CAChF/a,KAAM,gCACN+a,yBAIAhX,GAAe,CACfiX,cAAe,WAKNC,GAAa,WAA2G,IAA1GxW,EAAyG,uDAA1EV,GAAcW,EAA4D,uCAChI,OAAQA,EAAO1E,MACX,KAAK6a,GACD,OAAO,2BAAIpW,GAAX,IAAkBuW,cAAetW,EAAOqW,uBAC5C,QACI,OAAOtW,ICSJyW,GAtBH,WACR,IAAMF,EAAgB/Q,aAAmD,SAAAxF,GAAK,OAAIA,EAAM0W,IAAIH,iBACtFlR,EAAWC,cAQjB,OALAjB,qBAAU,WACNgB,GDYG,SAACA,GAEJ3H,IACK4I,MAAK,SAAAC,GACElB,EAASjG,EAAWmH,EAAI5I,OACxB0H,EAAShF,IAAU,IACnBgF,EAASgR,GAAiB,eAIjC7P,OAAM,SAAA5K,GACH,IAAM6K,EAAS7K,EAAM8K,SAAW9K,EAAM8K,SAAS/I,KAAK/B,MAC7CA,EAAM+K,QAAU,gCACZ,kDAARF,GACCpB,EAAS9E,GAAckG,IAE3BpB,EAASgR,GAAiB,2BC3BnC,IAGmB,YAAlBE,EACO,cAAC,GAAD,IAIP,sBAAKvb,UAAU,MAAf,UACI,cAAC,GAAD,IACA,cAAC,GAAD,QChBG2b,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBvQ,MAAK,YAAkD,IAA/CwQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,2BCMRO,GAAWC,2BAAgB,CAC7BC,aCV+B,WAAiC,IAAhCrX,EAA+B,uDAApB,GAEnC,OAAOA,GDSfyF,MAAO3E,GACPyD,KEfuB,WAAiC,IAAhCvE,EAA+B,uDAApB,GAEnC,OAAOA,GFcP4I,YAAa1F,GACbiG,aAAczH,GACd4V,SGlB2B,WAAiC,IAAhCtX,EAA+B,uDAApB,GAEvC,OAAOA,GHiBPX,QAASU,EACT2W,IAAKF,GACLxK,OAAQe,GACR7N,KAAM2Q,KAIJ0H,GAAQC,uBAAYL,GAAUM,+BAAoBC,2BAAgBC,QAMzDJ,MAIfK,OAAOL,MAAQA,GI9BfM,IAASlC,OACL,cAAC,IAAD,UACF,cAAC,IAAMmC,WAAP,UACE,cAAC,IAAD,CAAUP,MAAOA,GAAjB,SACA,cAAC,GAAD,UAIFQ,SAASC,eAAe,SAI1BrB,M,mBCpBAhc,EAAOC,QAAU,CAAC,KAAO,qBAAqB,KAAO,qBAAqB,OAAS,uBAAuB,cAAgB,8BAA8B,SAAW,yBAAyB,WAAa,2BAA2B,kBAAoB,oC,mBCAxPD,EAAOC,QAAU,CAAC,aAAe,mCAAmC,KAAO,2BAA2B,KAAO,2BAA2B,IAAM,0BAA0B,YAAc,kCAAkC,QAAU,8BAA8B,WAAa,mC,mBCA7QD,EAAOC,QAAU,CAAC,MAAQ,8BAA8B,IAAM,4BAA4B,UAAY,kCAAkC,iBAAmB,2C,mBCA3JD,EAAOC,QAAU,CAAC,aAAe,4BAA4B,KAAO,oBAAoB,KAAO,oBAAoB,IAAM,mBAAmB,WAAa,0BAA0B,WAAa,4B,mBCAhMD,EAAOC,QAAU,CAAC,aAAe,8BAA8B,KAAO,sBAAsB,KAAO,sBAAsB,IAAM,qBAAqB,QAAU,yBAAyB,YAAc,+B,mBCArMD,EAAOC,QAAU,CAAC,aAAe,kCAAkC,KAAO,0BAA0B,KAAO,0BAA0B,IAAM,yBAAyB,WAAa,kC,mBCAjLD,EAAOC,QAAU,CAAC,aAAe,kCAAkC,KAAO,0BAA0B,KAAO,0BAA0B,IAAM,yBAAyB,WAAa,kC,mBCAjLD,EAAOC,QAAU,CAAC,aAAe,kCAAkC,KAAO,0BAA0B,KAAO,0BAA0B,IAAM,yBAAyB,QAAU,+B,mBCA9KD,EAAOC,QAAU,CAAC,aAAe,qCAAqC,KAAO,6BAA6B,KAAO,6BAA6B,IAAM,4BAA4B,WAAa,qC,mBCA7LD,EAAOC,QAAU,CAAC,QAAU,6BAA6B,IAAM,yBAAyB,aAAe,oC,mBCAvGD,EAAOC,QAAU,CAAC,SAAW,4BAA4B,KAAO,wBAAwB,WAAa,gC,mBCArGD,EAAOC,QAAU,CAAC,OAAS,2B,mBCA3BD,EAAOC,QAAU,CAAC,OAAS,0BAA0B,MAAQ,2B,kBCA7DD,EAAOC,QAAU,CAAC,eAAiB,6BAA6B,QAAU,sBAAsB,KAAO,mBAAmB,UAAY,wBAAwB,KAAO,mBAAmB,KAAO,mBAAmB,MAAQ,oBAAoB,KAAO,mBAAmB,QAAU,sBAAsB,MAAQ,oBAAoB,IAAM,kBAAkB,IAAM,kBAAkB,QAAU,sBAAsB,YAAc,0BAA0B,UAAY,0B,mBCAxcD,EAAOC,QAAU,CAAC,OAAS,8B","file":"static/js/main.e10b1792.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"test_component\":\"tablet-cards_test_component__2NWTK\",\"profile\":\"tablet-cards_profile__1ZjqQ\",\"user\":\"tablet-cards_user__2MrTw\",\"user_card\":\"tablet-cards_user_card__2UrRR\",\"logo\":\"tablet-cards_logo__117Ue\",\"name\":\"tablet-cards_name__2pMyX\",\"about\":\"tablet-cards_about__3xCx4\",\"polz\":\"tablet-cards_polz__1Mh_v\",\"polztit\":\"tablet-cards_polztit__1qRkO\",\"table\":\"tablet-cards_table__ETl4B\",\"tit\":\"tablet-cards_tit__2WLp0\",\"inp\":\"tablet-cards_inp__1iLsm\",\"mainTab\":\"tablet-cards_mainTab__2lzLm\",\"rangeValues\":\"tablet-cards_rangeValues__NHkN5\",\"activeBtn\":\"tablet-cards_activeBtn__3Wqgd\"};","export default __webpack_public_path__ + \"static/media/notfound.52f5b072.gif\";","import React from 'react';\r\nimport errImg from './404ErrImg/notfound.gif';\r\nimport s from './error404.module.css';\r\n\r\nconst{err404}=s;\r\n\r\nconst Error404 = () => {\r\n    return (\r\n        <div className={err404}>\r\n            <img src={errImg} alt=\"ErrorImg\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Error404;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './SuperInputText.module.css'\r\nimport cn from './SuperInputText.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: (e: React.KeyboardEvent<HTMLInputElement>) => void\r\n    error?: string\r\n    spanClassName?: string\r\n    label: string\r\n}\r\n\r\nconst {superInput, errorInput} = s;\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        label,\r\n        className, spanClassName,\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter(e) // то вызвать его\r\n    }\r\n\r\n\r\n    const finalInputClassName = restProps.value ? superInput : errorInput;\r\n\r\n\r\n    return (\r\n\r\n    <div className={cn.group}>\r\n        <input\r\n               required\r\n               onChange={onChangeCallback}\r\n               onKeyPress={onKeyPressCallback}\r\n               className={finalInputClassName}\r\n               placeholder={error}\r\n               {...restProps}\r\n        />\r\n            <span className={cn.highlight}></span>\r\n            <span className={cn.bar}></span>\r\n            <label>{label}</label>\r\n    </div>\r\n\r\n    )\r\n}\r\n\r\nexport default SuperInputText\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './SuperButton.module.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n    disabled?: boolean\r\n    onClick?: () => void\r\n    filter?: string\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className, disabled, onClick,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${red ? s.red : s.default} ${className}`\r\n    const isDisabledClass = `${disabled ? s.disableClass : finalClassName}`\r\n\r\n    return (\r\n        <button\r\n            onClick={onClick}\r\n            disabled={disabled}\r\n            className={isDisabledClass}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n}\r\n\r\nexport default SuperButton\r\n","import axios from 'axios'\r\n\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    ...settings\r\n})\r\n\r\nconst instanceHeroky = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    ...settings\r\n})\r\n\r\n// api\r\n\r\nexport type RequestDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport type SignUpDataRequestType = {\r\n    email: string\r\n    password: string\r\n}\r\nexport type forgotPassDataType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\nexport type newPassDataType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\nexport type SetProfileType = {\r\n    name: string\r\n    avatar: string\r\n}\r\n\r\nexport type ParamsGetCardsType = {\r\n    packName?: string,\r\n    min?: number\r\n    max?: number\r\n    sortPacks?: any\r\n    page?: number\r\n    pageCount?: number\r\n    user_id?: any\r\n}\r\nexport type ParamsAddNewCardsType = {\r\n    cardsPack: CardsPackType\r\n}\r\n\r\nexport type CardsPackType = {\r\n    name?: string,\r\n    deckCover?: string\r\n    privated?: boolean\r\n}\r\nexport type CardParamType = {\r\n    cardsPack_id: string\r\n    min?: number\r\n    max?: number\r\n    sortCards?: any\r\n    page?: number\r\n    pageCount?: number\r\n}\r\nexport type newCardDataType = {\r\n    cardsPack_id: string\r\n    question?: string\r\n    answer?: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    answerImg?: string\r\n    questionImg?: string\r\n    questionVideo?: string\r\n    answerVideo?: string\r\n    type?: string\r\n}\r\n\r\nexport type newUpdateCardDataType = {\r\n    _id: string\r\n    question?: string\r\n    answer?: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    answerImg?: string\r\n    questionImg?: string\r\n    questionVideo?: string\r\n    answerVideo?: string\r\n    type?: string\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    login(data: RequestDataType) {\r\n        return instance.post('/auth/login', data);\r\n    },\r\n    logOut() {\r\n        return instance.delete('/auth/me');\r\n    },\r\n    signUp(data: SignUpDataRequestType) {\r\n        return instance.post('/auth/register', data);\r\n    },\r\n    authMe() {\r\n        return instance.post('auth/me');\r\n    },\r\n    forgotPass(data: forgotPassDataType) {\r\n        return instanceHeroky.post('/auth/forgot', data);\r\n    },\r\n    setNewPass(data: newPassDataType) {\r\n        return instanceHeroky.post('/auth/set-new-password', data);\r\n    },\r\n}\r\n\r\nexport const profileAPI = {\r\n    setProfile(data: SetProfileType) {\r\n        return instance.put('/auth/me', data);\r\n    }\r\n}\r\n\r\n\r\nexport const CardsPackAPI = {\r\n    getCards(params: ParamsGetCardsType) {\r\n        const {min, max, sortPacks, page, pageCount, user_id} = params\r\n        return instance.get('/cards/pack', {params: {min, max, sortPacks, page, pageCount, user_id}})\r\n    },\r\n    addNewCards(cardsPack: CardsPackType) {\r\n        return instance.post('/cards/pack', {cardsPack: {...cardsPack}})\r\n    },\r\n    deleteCards(cardId: string) {\r\n        return instance.delete('/cards/pack', {params: {id: cardId}})\r\n    },\r\n    updateCards(cardId: string) {\r\n        return instance.put('/cards/pack', {cardsPack: {_id: cardId, name: 'new_cards_name'}})\r\n    }\r\n\r\n}\r\n\r\nexport const CardAPI = {\r\n    getCards(params: CardParamType) {\r\n        const {min, max, sortCards, page, pageCount, cardsPack_id} = params\r\n        return instance.get('/cards/card', {params: {sortCards, min, max, cardsPack_id, page, pageCount}})\r\n    },\r\n    addNewCards(newCardParams: newCardDataType) {\r\n        return instance.post('/cards/card', {card: {...newCardParams}})\r\n    },\r\n    deleteCard(cardId: string) {\r\n        return instance.delete('/cards/card', {params: {id: cardId}})\r\n    },\r\n    updateCard(newCardParams: newUpdateCardDataType) {\r\n        return instance.put('/cards/card', {card: {...newCardParams}})\r\n    }\r\n\r\n}\r\n","import {profileAPI, SetProfileType} from '../../dal/Api';\r\nimport {Dispatch} from 'redux';\r\nimport {logInTrue, setIsLoading, setLoginError} from './login-reducer';\r\n\r\nconst SET_PROFILE = 'ProfileReducer/SET_PROFILE';\r\n\r\nexport type ProfileResponseType = {\r\n    _id: string | null;\r\n    email: string | null;\r\n    name: string | null\r\n    avatar?: string | null\r\n    publicCardPacksCount: number | null// количество колод\r\n    created: Date | null\r\n    updated: Date | null\r\n    isAdmin: boolean | null\r\n    verified: boolean | null // подтвердил ли почту\r\n    rememberMe: boolean | null\r\n    error?: string | null\r\n}\r\n\r\n\r\nexport const setProfile = (profile: ProfileResponseType) => ({type: 'ProfileReducer/SET_PROFILE' as const, profile});\r\n\r\n\r\nlet InitialState = {\r\n    profile: {\r\n        _id: null as string | null,\r\n        email: null as string | null,\r\n        name: null as string | null,\r\n        avatar: null as string | null,\r\n        publicCardPacksCount: null as number | null, // количество колод\r\n        created: null as Date | null,\r\n        updated: null as Date | null,\r\n        isAdmin: null as boolean | null,\r\n        verified: null as boolean | null,// подтвердил ли почту\r\n        rememberMe: null as boolean | null,\r\n        error: null as string | null,\r\n    }\r\n}\r\n\r\nexport type InitialStateLoginType = typeof InitialState\r\n\r\nexport const EditProfileTC = (Data: SetProfileType) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setIsLoading(true))\r\n        profileAPI.setProfile(Data)\r\n            .then(res => {\r\n                    dispatch(setProfile(res.data.updatedUser))\r\n                    dispatch(logInTrue(true))\r\n                }\r\n            )\r\n            .catch(error => {\r\n                const errMsg = error.response ? error.response.data.error\r\n                    : (error.message + ', more details in the console');\r\n                dispatch(setLoginError(errMsg))\r\n            })\r\n            .finally(() => {\r\n                    dispatch(setIsLoading(false))\r\n                }\r\n            )\r\n    }\r\n}\r\n\r\n\r\nexport const ProfileReducer = (state: InitialStateLoginType = InitialState, action: ProfileReducerActionType): InitialStateLoginType => {\r\n    switch (action.type) {\r\n        case SET_PROFILE :\r\n            return {...state, profile: {...state.profile, ...action.profile}}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n//types\r\n\r\nexport type setProfileType = ReturnType<typeof setProfile>\r\n\r\nexport type ProfileReducerActionType = setProfileType\r\n\r\nexport default ProfileReducer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {Dispatch} from 'redux';\r\nimport {authAPI, RequestDataType} from '../../dal/Api';\r\nimport {setProfile} from './profile-reducer';\r\n\r\n\r\nconst LOGIN_USER_TRUE = 'LoginPageReducer/LOGIN_TRUE';\r\nconst SET_LOGIN_ERROR = 'LoginPageReducer/SET_LOGIN_ERROR';\r\nconst SET_LOADING = 'LoginPageReducer/SET_LOADING';\r\n\r\n\r\nexport const logInTrue = (newLoginStatus: boolean) => ({type: 'LoginPageReducer/LOGIN_TRUE' as const, newLoginStatus});\r\nexport const setLoginError = (ErrorMSG: string) => ({type: 'LoginPageReducer/SET_LOGIN_ERROR' as const, ErrorMSG});\r\nexport const setIsLoading = (newLoadingStatus: boolean) => ({\r\n    type: 'LoginPageReducer/SET_LOADING' as const,\r\n    newLoadingStatus\r\n});\r\n\r\n\r\nlet InitialState = {\r\n    logIn: false,\r\n    logInError: '',\r\n    isLoading: false\r\n}\r\n\r\ntype InitialStateLoginType = typeof InitialState\r\n\r\nexport const LoginReducer = (state: InitialStateLoginType = InitialState, action: LoginReducerActionType): InitialStateLoginType => {\r\n    switch (action.type) {\r\n        case LOGIN_USER_TRUE :\r\n            return {...state, logIn: action.newLoginStatus}\r\n        case SET_LOGIN_ERROR :\r\n            return {...state, logInError: action.ErrorMSG}\r\n        case SET_LOADING :\r\n            return {...state, isLoading: action.newLoadingStatus}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const logInTC = (requestData: RequestDataType) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setIsLoading(true))\r\n        authAPI.login(requestData)\r\n            .then(res => {\r\n                    dispatch(setProfile(res.data))\r\n                    dispatch(logInTrue(true))\r\n                }\r\n            )\r\n            .catch(error => {\r\n                const errMsg = error.response ? error.response.data.error\r\n                    : (error.message + ', more details in the console');\r\n                dispatch(setLoginError(errMsg))\r\n\r\n            })\r\n            .finally(() => {\r\n                    dispatch(setIsLoading(false))\r\n                }\r\n            )\r\n    }\r\n}\r\nexport const logOutTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setIsLoading(true))\r\n        authAPI.logOut()\r\n            .then(res => {\r\n\r\n                    dispatch(setProfile({\r\n                        _id: null,\r\n                        email: null,\r\n                        name: null,\r\n                        avatar: null,\r\n                        publicCardPacksCount: null,\r\n                        created: null,\r\n                        updated: null,\r\n                        isAdmin: null,\r\n                        verified: null,\r\n                        rememberMe: null,\r\n                        error: null\r\n                    }))\r\n                dispatch(logInTrue(false))\r\n                }\r\n            )\r\n            .catch(error => {\r\n                const errMsg = error.response ? error.response.data.error\r\n                    : (error.message + ', more details in the console');\r\n                dispatch(setLoginError(errMsg))\r\n            })\r\n            .finally(() => {\r\n                    dispatch(setIsLoading(false))\r\n                }\r\n            )\r\n    }\r\n}\r\n\r\n//types\r\n\r\nexport type LogInTrueType = ReturnType<typeof logInTrue>\r\nexport type SetLoginErrorType = ReturnType<typeof setLoginError>\r\nexport type SetLoadingType = ReturnType<typeof setIsLoading>\r\n\r\n\r\nexport type LoginReducerActionType = LogInTrueType | SetLoginErrorType | SetLoadingType\r\n\r\nexport default LoginReducer;\r\n","import {Dispatch} from 'redux';\r\nimport {authAPI, SignUpDataRequestType} from '../../dal/Api';\r\nimport {setIsLoading} from './login-reducer';\r\n\r\n\r\nconst REG_CORRECT = 'RegistrationReducer/REG_CORRECT';\r\nconst REG_ERROR = 'RegistrationReducer/REG_ERROR'\r\nconst SET_PROGRESS = 'RegistrationReducer/SET_PROGRESS'\r\n\r\n\r\nexport const setIsValidReg = (newStatus: boolean) => ({type: 'RegistrationReducer/REG_CORRECT' as const, newStatus});\r\nexport const setSignUpError = (ErrorMSG: string) => ({type: 'RegistrationReducer/REG_ERROR' as const, ErrorMSG});\r\nexport const setSignUpProgress = (NewProgress: NewProgressType) => ({\r\n    type: 'RegistrationReducer/SET_PROGRESS' as const,\r\n    NewProgress\r\n});\r\n\r\n\r\nlet InitialState = {\r\n    isValidReg: false,\r\n    signUpProgress: 'loading' as NewProgressType,\r\n    SignUpError: '',\r\n}\r\n\r\ntype InitialStateLoginType = typeof InitialState\r\n\r\nexport const RegistrationReducer = (state: InitialStateLoginType = InitialState, action: RegistrationReducerActionType): InitialStateLoginType => {\r\n    switch (action.type) {\r\n        case REG_CORRECT :\r\n            return {...state, isValidReg: action.newStatus}\r\n        case REG_ERROR :\r\n            return {...state, SignUpError: action.ErrorMSG}\r\n        case SET_PROGRESS :\r\n            return {...state, signUpProgress: action.NewProgress}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const SignUpTC = (requestData: SignUpDataRequestType) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setIsLoading(true))\r\n        authAPI.signUp(requestData)\r\n            .then(res => {\r\n                    dispatch(setIsValidReg(true))\r\n                    dispatch(setSignUpProgress('success'))\r\n                }\r\n            )\r\n            .catch(error => {\r\n                const errMsg = error.response ? error.response.data.error\r\n                    : (error.message + ', more details in the console');\r\n                dispatch(setSignUpProgress('error'))\r\n                dispatch(setSignUpError(errMsg))\r\n            })\r\n            .finally(() => {\r\n                    setTimeout(() => {\r\n                        dispatch(setIsLoading(false))\r\n                        dispatch(setSignUpProgress('loading'))\r\n                    }, 3000)\r\n                }\r\n            )\r\n    }\r\n\r\n}\r\n\r\n//types\r\n\r\nexport type setIsValidRegType = ReturnType<typeof setIsValidReg>\r\nexport type setSignUpErrorType = ReturnType<typeof setSignUpError>\r\nexport type setProgressType = ReturnType<typeof setSignUpProgress>\r\n\r\n\r\nexport type NewProgressType = 'loading' | 'success' | 'error'\r\n\r\n\r\nexport type RegistrationReducerActionType = setIsValidRegType | setSignUpErrorType | setProgressType\r\n\r\nexport default RegistrationReducer;\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\n\r\ntype ErrorWindowPropsType = {\r\n    isEmptyEmailMsg?:boolean\r\n    isEmptyPassMsg?:boolean\r\n    isEmptyPass1Msg?:boolean\r\n    minLengthEmailMsg?:boolean\r\n    minLengthPassMsg?:boolean\r\n    maxLengthPassMsg?:boolean\r\n    isValidEmailMsg?:boolean\r\n    isPasswordCorrectReEnter?:boolean\r\n    isEmptyNameError?:boolean\r\n    isEmptyUrlError?:boolean\r\n}\r\n\r\n\r\nexport const ErrorWindow=(props:ErrorWindowPropsType)=>{\r\n\r\n    return(\r\n        <div>\r\n            {props.isEmptyEmailMsg &&  <div style={{color: 'red'}}>Email field should be stuffed</div> }\r\n            {props.isEmptyPassMsg &&  <div style={{color: 'red'}}>Password field should be stuffed</div> }\r\n            {props.isEmptyPass1Msg &&  <div style={{color: 'red'}}>Password field should be stuffed</div> }\r\n            {props.isEmptyNameError &&  <div style={{color: 'red'}}>Name field should be stuffed</div> }\r\n            {props.isEmptyUrlError &&  <div style={{color: 'red'}}>URL field should be stuffed</div> }\r\n            {props.minLengthEmailMsg &&  <div style={{color: 'red'}}>Minimal length of email should be more than 3 symbols</div> }\r\n            {props.minLengthPassMsg &&  <div style={{color: 'red'}}>Minimal length of password should be more than 8 symbols</div> }\r\n            {props.maxLengthPassMsg &&  <div style={{color: 'red'}}>Maximal length of password should be low than 20 symbols</div> }\r\n            {props.isValidEmailMsg &&  <div style={{color: 'red'}}>Invalid email</div> }\r\n            {props.isPasswordCorrectReEnter &&  <div style={{color: 'red'}}>Entered passwords doesn't match</div> }\r\n        </div>\r\n    )\r\n}","import s from './Preloader.module.css';\r\nimport React from 'react';\r\n\r\nconst{loader}=s\r\n\r\nexport const Preloader =()=>{\r\n\r\n    return(\r\n        <div>\r\n            <div className={loader}>Loading...</div>\r\n        </div>\r\n    )\r\n\r\n\r\n}","import {Dispatch} from 'redux';\r\nimport {authAPI, forgotPassDataType, newPassDataType} from '../../dal/Api';\r\nimport {setIsLoading} from './login-reducer';\r\nimport {setSignUpProgress} from './registration-reducer';\r\n\r\n\r\nconst SET_IS_MESSAGE_SEND = 'AppReducer/SET_IS_MESSAGE_SEND';\r\nconst SET_ERROR_MESSAGE = 'AppReducer/SET_ERROR_MESSAGE';\r\n\r\n\r\nexport const SetIsMessageSend = (newStatus: isMessageSentStatusType) => ({\r\n    type: 'AppReducer/SET_IS_MESSAGE_SEND' as const,\r\n    newStatus\r\n});\r\nexport const SetErrorRecoveryPassMessage = (newMess: string) => ({\r\n    type: 'AppReducer/SET_ERROR_MESSAGE' as const,\r\n    newMess\r\n});\r\n\r\n\r\nlet InitialState = {\r\n    isMessageSend: 'error' as isMessageSentStatusType,\r\n    ErrorMessageRecoveryPassword: '' as string\r\n}\r\n\r\nexport type InitialStateLoginType = typeof InitialState\r\n\r\nexport const RecoverPassReducer = (state: InitialStateLoginType = InitialState, action: ProfileReducerActionType): InitialStateLoginType => {\r\n    switch (action.type) {\r\n        case SET_IS_MESSAGE_SEND :\r\n            return {...state, isMessageSend: action.newStatus}\r\n        case SET_ERROR_MESSAGE :\r\n            return {...state, ErrorMessageRecoveryPassword: action.newMess}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const SendMessage = (data: forgotPassDataType) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(SetIsMessageSend('loading'))\r\n        authAPI.forgotPass(data)\r\n            .then(res => {\r\n                    dispatch(SetIsMessageSend('sent'))\r\n                }\r\n            )\r\n            .catch(error => {\r\n                const errMsg = error.response ? error.response.data.error\r\n                    : (error.message + ', more details in the console');\r\n                dispatch(SetErrorRecoveryPassMessage(errMsg))\r\n                dispatch(SetIsMessageSend('error'))\r\n            })\r\n            .finally(() => {\r\n                    setTimeout(() => {\r\n                        dispatch(SetIsMessageSend('end'))\r\n                    }, 2000)\r\n                }\r\n            )\r\n    }\r\n}\r\nexport const CreateNewPassword = (data: newPassDataType) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(SetIsMessageSend('loading'))\r\n        authAPI.setNewPass(data)\r\n            .then(res => {\r\n                    dispatch(SetIsMessageSend('sent'))\r\n                }\r\n            )\r\n            .catch(error => {\r\n                const errMsg = error.response ? error.response.data.error\r\n                    : (error.message + ', more details in the console');\r\n                dispatch(SetErrorRecoveryPassMessage(errMsg))\r\n                dispatch(SetIsMessageSend('error'))\r\n            })\r\n            .finally(() => {\r\n                    setTimeout(() => {\r\n                        dispatch(SetIsMessageSend('end'))\r\n                    }, 2000)\r\n                }\r\n            )\r\n    }\r\n}\r\n\r\n\r\n//types\r\n\r\nexport type isMessageSentStatusType = 'sent' | 'loading' | 'error'|'end'\r\n\r\nexport type setIsMessageSendType = ReturnType<typeof SetIsMessageSend>\r\nexport type setErrorRecoveryPassMessageType = ReturnType<typeof SetErrorRecoveryPassMessage>\r\n\r\nexport type ProfileReducerActionType = setIsMessageSendType | setErrorRecoveryPassMessageType\r\n\r\nexport default RecoverPassReducer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport cn from './Login.module.css';\r\nimport SuperInputText from '../../common/c1-SuperInputText/SuperInputText';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport SuperButton from '../../common/c2-SuperButton/SuperButton';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {logInTC, setLoginError} from '../../../bll/redusers/login-reducer';\r\nimport {AppStoreType} from '../../../bll/store/store';\r\nimport {PATH} from '../../routes/Routes';\r\nimport {setIsValidReg} from '../../../bll/redusers/registration-reducer';\r\nimport {ErrorWindow} from '../../common/ErrorWindow/ErrorWindow';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {SetIsMessageSend} from '../../../bll/redusers/recoverPass-reducer';\r\n\r\n\r\ntype ValidatorType = {\r\n    isEmpty: boolean\r\n    minLength: number\r\n    maxLength: number,\r\n    isValidEmail?: boolean\r\n}\r\n\r\nconst useValidator = (value: any, validator: ValidatorType) => {\r\n\r\n    const [isEmpty, setIsEmpty] = useState(true);\r\n    const [minLengthError, setMinLengthError] = useState(false);\r\n    const [maxLengthError, setMaxLengthError] = useState(false);\r\n    const [isValidEmailError, setIsValidEmailError] = useState(false);\r\n    const [inputValid, setInputValid] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        for (const valid in validator) {\r\n            switch (valid) {\r\n                case 'minLength':\r\n                    value.length < validator[valid] ? setMinLengthError(true) : setMinLengthError(false)\r\n                    break;\r\n                case 'isEmpty':\r\n                    value ? setIsEmpty(false) : setIsEmpty(true)\r\n                    break;\r\n                case 'maxLength':\r\n                    value.length > validator[valid] ? setMaxLengthError(true) : setMaxLengthError(false)\r\n                    break;\r\n                case 'isValidEmail':\r\n                    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n                    re.test(String(value).toLowerCase()) ? setIsValidEmailError(false) : setIsValidEmailError(true)\r\n                    break;\r\n            }\r\n        }\r\n    }, [value])\r\n\r\n\r\n    useEffect(() => {\r\n        if (isEmpty || minLengthError || maxLengthError || isValidEmailError) {\r\n            setInputValid(false)\r\n        } else {\r\n            setInputValid(true)\r\n        }\r\n    }, [isEmpty, minLengthError, maxLengthError, isValidEmailError])\r\n\r\n\r\n    return {\r\n        isEmpty,\r\n        minLengthError,\r\n        maxLengthError,\r\n        isValidEmailError,\r\n        inputValid\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport const useInput = (initialValue: any, validator: ValidatorType) => {\r\n    const [value, setValue] = useState(initialValue);\r\n    const [touched, setTouched] = useState(false);\r\n\r\n    const valid = useValidator(value, validator)\r\n\r\n    const onChange = (e: ChangeEvent<HTMLInputElement> | any) => {\r\n        if (e.hasOwnProperty('target')) {\r\n            setValue(e.target.value)\r\n        } else {\r\n            setValue(e)\r\n        }\r\n    }\r\n\r\n    const onBlur = (t: boolean) => {\r\n        setTouched(t)\r\n    }\r\n\r\n    return {\r\n        value,\r\n        touched,\r\n        onChange,\r\n        onBlur,\r\n        ...valid\r\n    }\r\n\r\n}\r\n\r\nconst Login = () => {\r\n\r\n    const email = useInput('', {isEmpty: true, minLength: 3, maxLength: 50, isValidEmail: false});\r\n    const password = useInput('', {isEmpty: true, minLength: 7, maxLength: 20});\r\n    const rememberMe = useInput(false, {isEmpty: true, minLength: 7, maxLength: 20});\r\n\r\n    const isEmptyEmailMsg = email.touched && email.isEmpty;\r\n    const isEmptyPassMsg = password.touched && password.isEmpty\r\n    //проверка на пустоту\r\n\r\n    const minLengthEmailMsg = email.touched && email.minLengthError;\r\n    const minLengthPassMsg = password.touched && password.minLengthError;\r\n    // проверка на минимальную длинну\r\n\r\n    const isValidEmailMsg = email.touched && email.isValidEmailError;\r\n    const maxLengthPassMsg = password.touched && password.maxLengthError;\r\n    // проверка на валидность имейла и максимальную длинну пароля\r\n\r\n\r\n    const isLoginDisabled = !email.inputValid || !password.inputValid;\r\n    //отключаем кнопку если хоть одна ошибка есть\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const ErrorRequestMsg = useSelector<AppStoreType, string>(state => state.login.logInError);\r\n    const isLogin = useSelector<AppStoreType, boolean>(state => state.login.logIn);\r\n    const isLoading = useSelector<AppStoreType, boolean>(state => state.login.isLoading);\r\n\r\n\r\n    const onClickHandler = () => {\r\n        const requestData = {\r\n            email: email.value,\r\n            password: password.value,\r\n            rememberMe: rememberMe.value\r\n        }\r\n\r\n        dispatch(logInTC(requestData));\r\n        email.onChange('')\r\n        email.onBlur(false)\r\n        password.onChange('')\r\n        password.onBlur(false)\r\n        rememberMe.onChange(false)\r\n\r\n    }\r\n\r\n\r\n    const onClickForgotHandler=()=>{\r\n        dispatch(SetIsMessageSend('error')) //чтобы если вдруг после редиректа на логин из восстановления пароля пользователь решит снова зайти на забыл пароль\r\n    }\r\n\r\n    const signUpClickHandler = () => {\r\n        dispatch(setIsValidReg(false))\r\n    }\r\n\r\n\r\n    if (email.touched || email.value || password.touched || password.value) {\r\n        dispatch(setLoginError(''))\r\n    }\r\n\r\n\r\n    if (isLoading) {\r\n        return <Preloader/>\r\n    }\r\n\r\n\r\n    if (isLogin) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={cn.autorization}>\r\n            <div className={cn.form}>\r\n                <div className={cn.hTit}>\r\n                    It-incubator\r\n                </div>\r\n                <div className={cn.tit}>\r\n                    Login\r\n                </div>\r\n                <form action=\"\">\r\n\r\n\r\n                    {ErrorRequestMsg && <div style={{color:'red'}}>{ErrorRequestMsg}</div>}\r\n\r\n\r\n                    <ErrorWindow isEmptyEmailMsg={isEmptyEmailMsg} minLengthEmailMsg={minLengthEmailMsg}\r\n                                 isValidEmailMsg={isValidEmailMsg}/>\r\n\r\n\r\n                    <SuperInputText onChange={email.onChange} onBlur={() => {\r\n                        email.onBlur(true)\r\n                    }} value={email.value}\r\n                                    label={'Email'}/>\r\n\r\n                    <ErrorWindow isEmptyPassMsg={isEmptyPassMsg} minLengthPassMsg={minLengthPassMsg}\r\n                                 maxLengthPassMsg={maxLengthPassMsg}/>\r\n\r\n\r\n                    <SuperInputText onChange={password.onChange} onBlur={() => {\r\n                        password.onBlur(true)\r\n                    }} value={password.value}\r\n                                    label={'Password'} type={'password'}/>\r\n\r\n\r\n                    <input value={rememberMe.value} onChange={rememberMe.onChange} type={'checkbox'}/> remember me\r\n\r\n\r\n                    <NavLink onClick={onClickForgotHandler} className={cn.linkforgot} to={PATH.RECOVER_PASS}>Forgot password</NavLink>\r\n\r\n\r\n                    <div><NavLink onClick={signUpClickHandler} className={cn.linkforgot} to={PATH.REGISTRATION}>Sign\r\n                        up</NavLink></div>\r\n                    {/*Если пользователь который только что зарегался решит еще раз зарегаться нам нужно откатить IsValidRec в registration reducer*/}\r\n\r\n\r\n                    <SuperButton onClick={onClickHandler} disabled={isLoginDisabled}\r\n                                 style={{width: 280, marginTop: 80, marginBottom: 40}}>Login</SuperButton>\r\n\r\n\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n\r\n","export default __webpack_public_path__ + \"static/media/EmptyAva.832c8a5e.png\";","import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport cn from './EditProfile.module.css'\r\nimport EmptyAva from '../EmptyAva.png'\r\nimport {AppStoreType} from '../../../../bll/store/store';\r\nimport {EditProfileTC, InitialStateLoginType} from '../../../../bll/redusers/profile-reducer';\r\nimport {Preloader} from '../../../common/Preloader/Preloader';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {PATH} from '../../../routes/Routes';\r\nimport {useInput} from '../../login/login';\r\nimport SuperInputText from '../../../common/c1-SuperInputText/SuperInputText';\r\nimport {ErrorWindow} from '../../../common/ErrorWindow/ErrorWindow';\r\n\r\ntype EditModePropsType = {\r\n    onClickHandler: (newStatus: boolean) => void\r\n    isEditMode: boolean\r\n}\r\n\r\nconst EditProfile = (props: EditModePropsType) => {\r\n\r\n\r\n    const isLogin = useSelector<AppStoreType, boolean>(state => state.login.logIn);\r\n    const isLoading = useSelector<AppStoreType, boolean>(state => state.login.isLoading);\r\n    const profile = useSelector<AppStoreType, InitialStateLoginType>(state => state.profile)\r\n    const dispatch = useDispatch();\r\n\r\n    const {onClickHandler} = props\r\n\r\n    const {\r\n        _id,\r\n        email,\r\n        name,\r\n        avatar\r\n    } = profile.profile\r\n\r\n\r\n    const nameInput = useInput(name, {isEmpty: true, minLength: 3, maxLength: 50})\r\n    const avatarInput = useInput(avatar ? avatar : '', {isEmpty: true, minLength: 3, maxLength: 50})\r\n\r\n\r\n    const saveClickHandler = (newName: string, newAva: string) => {\r\n        const data = {\r\n            name: newName ? newName : '',\r\n            avatar: newAva ? newAva : ''\r\n        }\r\n        dispatch(EditProfileTC(data))\r\n        onClickHandler(false)\r\n    }\r\n\r\n\r\n    if (isLoading) {\r\n        return <Preloader/>\r\n    }\r\n\r\n\r\n    if (!isLogin) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    const isEmptyNameError = nameInput.isEmpty && nameInput.touched;\r\n    const isEmptyUrlError = avatarInput.isEmpty && avatarInput.touched;\r\n\r\n    return (\r\n        <div className={cn.form}>\r\n            <div className={cn.hTit}>\r\n                It-incubator\r\n            </div>\r\n            <ErrorWindow isEmptyNameError={isEmptyNameError}/>\r\n\r\n            <div>Name: <SuperInputText placeholder={nameInput.value ? '' : 'Enter your new nick name'} onChange={nameInput.onChange} onBlur={() => {\r\n                nameInput.onBlur(true)\r\n            }} value={nameInput.value} label={''}/></div>\r\n\r\n            <div className={cn.ava_img}><img src={avatar ? avatar : EmptyAva} alt=\"avatar\"/></div>\r\n            <ErrorWindow isEmptyUrlError={isEmptyUrlError}/>\r\n            <div>Avatar: <SuperInputText placeholder={avatarInput.value ? '' : 'Enter new image url'}\r\n                                         onChange={avatarInput.onChange} onBlur={() => {\r\n                avatarInput.onBlur(true)\r\n            }} value={avatarInput.value} label={''}/></div>\r\n            <div className={cn.tit}>\r\n                <div>Email:{email}</div>\r\n                <div>ID:{_id}</div>\r\n            </div>\r\n            <button disabled={!(nameInput.value && avatarInput.value)} onClick={() => {\r\n                saveClickHandler(nameInput.value, avatarInput.value)\r\n            }}>Save\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EditProfile;\r\n","import React, {useState} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppStoreType} from '../../../bll/store/store';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport {PATH} from '../../routes/Routes';\r\nimport {InitialStateLoginType} from '../../../bll/redusers/profile-reducer';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport cn from './profile.module.css';\r\nimport EmptyAva from './EmptyAva.png'\r\nimport EditProfile from './EditProfile/EditProfile';\r\nimport SuperButton from '../../common/c2-SuperButton/SuperButton';\r\n\r\n\r\nconst Profile = () => {\r\n\r\n    const isLogin = useSelector<AppStoreType, boolean>(state => state.login.logIn);\r\n    const ErrorRequestMsg = useSelector<AppStoreType, string>(state => state.login.logInError);\r\n    const isLoading = useSelector<AppStoreType, boolean>(state => state.login.isLoading);\r\n    const profile = useSelector<AppStoreType, InitialStateLoginType>(state => state.profile)\r\n\r\n\r\n    const[isEditMode, setIsEditMode]=useState(false)\r\n\r\n    const onClickHandler=(newStatus:boolean)=>{\r\n        setIsEditMode(newStatus)\r\n    }\r\n\r\n    const {\r\n        _id,\r\n        email,\r\n        name,\r\n        avatar,\r\n        publicCardPacksCount,\r\n        created,\r\n        updated,\r\n        isAdmin,\r\n        verified,\r\n        rememberMe,\r\n        error\r\n    } = profile.profile\r\n\r\n\r\n    if (isLoading) {\r\n        return <Preloader/>\r\n    }\r\n\r\n\r\n    if (!isLogin) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n\r\n    return (\r\n         <div className={cn.autorization}>\r\n             {!isEditMode &&<div className={cn.form}>\r\n                <div className={cn.hTit}>\r\n                    It-incubator\r\n                </div>\r\n                 <div className={cn.nameProfile}>{name}</div>\r\n                <div className={cn.ava_img}><img src={avatar? avatar : EmptyAva} alt=\"avator\"/></div>\r\n                <div className={cn.tit}>\r\n                    <div >Email:{email}</div>\r\n                    <div>ID:{_id}</div>\r\n                </div>\r\n                <button onClick={()=>{onClickHandler(true)}}>Edit profile</button>\r\n                <SuperButton><NavLink to={PATH.CARDS_TABLET} style={{color:'white',textDecoration:'none'}}>going to cards tablet</NavLink></SuperButton>\r\n            </div>}\r\n             {isEditMode && <EditProfile onClickHandler={onClickHandler} isEditMode={isEditMode} />}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","export default __webpack_public_path__ + \"static/media/mail.4e31cb8b.png\";","export default __webpack_public_path__ + \"static/media/error.3b8bd8e7.png\";","export default __webpack_public_path__ + \"static/media/success.6ee71b34.png\";","import s from './ResponsePage.module.css';\r\nimport React from 'react';\r\nimport mail from './mail.png';\r\nimport error from './error.png';\r\nimport success from './success.png';\r\n\r\nimport {PATH} from '../../routes/Routes';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst{autorization,form,hTit,tit,imgMailSent,infText,linkforgot}=s;\r\n\r\n\r\n\r\ntype ResponsePagePropsType ={\r\n    email?:string\r\n    typeOfPage:'sent'|'error'|'success'|'cardsError'\r\n    errorText?:string\r\n}\r\n\r\n\r\n\r\nexport const ResponsePage =(props:ResponsePagePropsType)=>{\r\n    const{email,typeOfPage,errorText}=props;\r\n    return (\r\n         <div className={autorization}>\r\n             {typeOfPage==='sent'&& <div className={form}>\r\n                <div className={hTit}>\r\n                    It-incubator\r\n                </div>\r\n                <div className={tit}>\r\n                    Check Email\r\n                </div>\r\n                <div className={imgMailSent}>\r\n                <img src={mail} alt=\"mailSent\"/>\r\n            </div>\r\n                <div className={infText}>\r\n                    We've sent an Email with instruction to {email}\r\n                </div>\r\n                 <NavLink className={linkforgot} to={PATH.LOGIN}>Sign in</NavLink>\r\n            </div>}\r\n             {typeOfPage==='error'&& <div className={form}>\r\n                 <div className={hTit}>\r\n                     It-incubator\r\n                 </div>\r\n                 <div className={tit}>\r\n                     Some Error\r\n                 </div>\r\n                 <div className={imgMailSent}>\r\n                     <img src={error} alt=\"error\"/>\r\n                 </div>\r\n                 <div className={infText}>\r\n                     Happen some error, await a few seconds...\r\n                 </div>\r\n             </div>}\r\n             {typeOfPage==='success'&& <div className={form}>\r\n                 <div className={hTit}>\r\n                     It-incubator\r\n                 </div>\r\n                 <div className={tit}>\r\n                     Success!\r\n                 </div>\r\n                 <div className={imgMailSent}>\r\n                     <img src={success} alt=\"success\"/>\r\n                 </div>\r\n             </div>}\r\n             {typeOfPage==='cardsError'&& <div className={form}>\r\n                 <div className={hTit}>\r\n                     It-incubator\r\n                 </div>\r\n                 <div className={tit} style={{color:'red'}}>\r\n                     Some Error\r\n                 </div>\r\n                 <div className={infText}>\r\n                     Happen some error, await a few seconds...\r\n                 </div>\r\n             </div>}\r\n        </div>)\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport cn from './recoverPass.module.css';\r\nimport SuperInputText from '../../common/c1-SuperInputText/SuperInputText';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport SuperButton from '../../common/c2-SuperButton/SuperButton';\r\nimport {PATH} from '../../routes/Routes';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStoreType} from '../../../bll/store/store';\r\nimport {useInput} from '../login/login';\r\nimport {isMessageSentStatusType, SendMessage} from '../../../bll/redusers/recoverPass-reducer';\r\nimport {setLoginError} from '../../../bll/redusers/login-reducer';\r\nimport {ErrorWindow} from '../../common/ErrorWindow/ErrorWindow';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {ResponsePage} from '../../common/ResponsePage/ResponsePage';\r\n\r\n\r\nconst RecoverPass = () => {\r\n    const email = useInput('', {isEmpty: true, minLength: 3, maxLength: 50, isValidEmail: false});\r\n    const dispatch = useDispatch();\r\n    const isMessageSentStatus = useSelector<AppStoreType, isMessageSentStatusType>(state => state.recoverPass.isMessageSend)\r\n    const ErrorRequestMsg = useSelector<AppStoreType, string>(state => state.recoverPass.ErrorMessageRecoveryPassword);\r\n    const isLogin = useSelector<AppStoreType, boolean>(state => state.login.logIn);\r\n\r\n\r\n    const onClickHandler = () => {\r\n        const message = {\r\n            email: email.value,\r\n            from: 'tablet-cards-front-admin <skillforce@mail.ru>',\r\n            message: `<div style=\"background-color: lime; padding: 15px\">\t\r\n\t        password recovery link: \r\n\t        <a href='https://skillforce.github.io/fridayProject/#/set-new-password/$token$'>\r\n\t        link</a></div>`\r\n        }\r\n        dispatch(SendMessage(message))\r\n    }\r\n\r\n    if (email.touched || email.value) {\r\n        dispatch(setLoginError(''))\r\n    }\r\n\r\n    const minLengthEmailMsg = email.touched && email.minLengthError;\r\n    const isValidEmailMsg = email.touched && email.isValidEmailError;\r\n    const isEmptyEmailMsg = email.touched && email.isEmpty;\r\n    const isLoginDisabled = !email.inputValid && !minLengthEmailMsg;\r\n\r\n\r\n    if (isLogin) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    if (isMessageSentStatus === 'loading') {\r\n        return <Preloader/>\r\n    }\r\n\r\n\r\n    if (isMessageSentStatus === 'sent') {\r\n        return <ResponsePage typeOfPage={'sent'} email={email.value}/>\r\n    }\r\n\r\n\r\n\r\n    if (isMessageSentStatus === 'end') {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={cn.autorization}>\r\n            <div className={cn.form}>\r\n                <div className={cn.hTit}>\r\n                    It-incubator\r\n                </div>\r\n                <div className={cn.tit}>\r\n                    Forgot your password?\r\n                </div>\r\n\r\n\r\n                <ErrorWindow minLengthEmailMsg={minLengthEmailMsg} isValidEmailMsg={isValidEmailMsg}\r\n                             isEmptyEmailMsg={isEmptyEmailMsg}/>\r\n\r\n\r\n                <form action=\"\">\r\n                    {ErrorRequestMsg && <div>{ErrorRequestMsg}</div>}\r\n\r\n                    <SuperInputText onChange={email.onChange} onBlur={() => {\r\n                        email.onBlur(true)\r\n                    }} value={email.value}\r\n                                    label={'Email'}/>\r\n\r\n\r\n                    <NavLink className={cn.linkforgot} to={PATH.LOGIN}>Try Log In</NavLink>\r\n\r\n\r\n                    <SuperButton disabled={isLoginDisabled} onClick={onClickHandler}\r\n                                 style={{width: 280, marginTop: 80, marginBottom: 40}}>SEND\r\n                        MESSAGE</SuperButton>\r\n\r\n\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RecoverPass;\r\n","import React from 'react';\r\nimport cn from './registation.module.css';\r\nimport SuperInputText from '../../common/c1-SuperInputText/SuperInputText';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport SuperButton from '../../common/c2-SuperButton/SuperButton';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStoreType} from '../../../bll/store/store';\r\nimport {PATH} from '../../routes/Routes';\r\nimport {setSignUpError, SignUpTC} from '../../../bll/redusers/registration-reducer';\r\nimport {useInput} from '../login/login';\r\nimport {ErrorWindow} from '../../common/ErrorWindow/ErrorWindow';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {ResponsePage} from '../../common/ResponsePage/ResponsePage';\r\n\r\n\r\nconst Registration = () => {\r\n\r\n    const email = useInput('', {isEmpty: true, minLength: 3, maxLength: 50, isValidEmail: false});\r\n    const password = useInput('', {isEmpty: true, minLength: 7, maxLength: 20});\r\n    const password1 = useInput('', {isEmpty: true, minLength: 7, maxLength: 20});\r\n\r\n\r\n    const isEmptyEmailMsg = email.touched && email.isEmpty;\r\n    const isEmptyPassMsg = password.touched && password.isEmpty;\r\n    //проверка на пустоту\r\n\r\n    const minLengthEmailMsg = email.touched && email.minLengthError;\r\n    const minLengthPassMsg = password.touched && password.minLengthError;\r\n    // проверка на минимальную длинну\r\n\r\n    const isValidEmailMsg = email.touched && email.isValidEmailError;\r\n    const maxLengthPassMsg = password.touched && password.maxLengthError;\r\n    // проверка на валидность имейла и максимальную длинну пароля\r\n\r\n    const isLoginDisabled = email.inputValid && password.inputValid;\r\n    //отключаем кнопку если хоть одна ошибка есть\r\n\r\n\r\n    const isPasswordCorrectReEnter = password.value !== password1.value && password.touched;\r\n    const isPasswordDublicate = password.value === password1.value;\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const isLogin = useSelector<AppStoreType, boolean>(state => state.login.logIn);\r\n    const isLoading = useSelector<AppStoreType, boolean>(state => state.login.isLoading);\r\n    const isCorrectReg = useSelector<AppStoreType, boolean>(state => state.registration.isValidReg);\r\n    const SignUpErrorMsg = useSelector<AppStoreType, string>(state => state.registration.SignUpError);\r\n    const signUpProgress = useSelector<AppStoreType, string>(state => state.registration.signUpProgress);\r\n\r\n\r\n    const onClickHandler = () => {\r\n\r\n        const requestData = {\r\n            email: email.value,\r\n            password: password.value,\r\n        }\r\n\r\n        dispatch(SignUpTC(requestData));\r\n\r\n        email.onChange('')\r\n        email.onBlur(false)\r\n        password.onChange('')\r\n        password.onBlur(false)\r\n        password1.onBlur(false)\r\n        password1.onChange('')\r\n\r\n    } //обработка клика на кнопку SignUp\r\n\r\n\r\n    if (email.touched || email.value || password.touched || password.value || password1.touched || password1.value) {\r\n        dispatch(setSignUpError(''))\r\n    } //зачищаем ошибки работы с сервером при попытки нового введения символов пользователем\r\n\r\n\r\n    if (isLoading && signUpProgress === 'loading') {\r\n        return <Preloader/>\r\n    }\r\n    if (isLoading && signUpProgress === 'success') {\r\n        return <ResponsePage typeOfPage={'success'}/>\r\n    }\r\n    if (isLoading && signUpProgress === 'error') {\r\n        return <ResponsePage typeOfPage={'error'}/>\r\n    }\r\n\r\n    if (isCorrectReg) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    if (isLogin) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={cn.autorization}>\r\n            <div className={cn.form}>\r\n                <div className={cn.hTit}>\r\n                    It-incubator\r\n                </div>\r\n                <div className={cn.tit}>\r\n                    Sign Up\r\n                </div>\r\n                <form>\r\n                    {SignUpErrorMsg && <div style={{color: 'red'}}>{SignUpErrorMsg}</div>}\r\n\r\n                    <ErrorWindow isEmptyEmailMsg={isEmptyEmailMsg} minLengthEmailMsg={minLengthEmailMsg}\r\n                                 isValidEmailMsg={isValidEmailMsg}/>\r\n\r\n                    <SuperInputText onChange={email.onChange} onBlur={() => {\r\n                        email.onBlur(true)\r\n                    }} value={email.value}\r\n                                    label={'Enter your email'}/>\r\n\r\n                    <ErrorWindow isEmptyPassMsg={isEmptyPassMsg} minLengthPassMsg={minLengthPassMsg}\r\n                                 maxLengthPassMsg={maxLengthPassMsg}/>\r\n\r\n\r\n                    <SuperInputText onChange={password.onChange} onBlur={() => {\r\n                        password.onBlur(true)\r\n                    }} value={password.value}\r\n                                    label={'Enter your unique password'} type={'password'}/>\r\n\r\n                    <ErrorWindow isPasswordCorrectReEnter={isPasswordCorrectReEnter}/>\r\n\r\n                    <SuperInputText onChange={password1.onChange} onBlur={() => {\r\n                        password1.onBlur(true)\r\n                    }} value={password1.value}\r\n                                    label={'Repeat your password'} type={'password'}/>\r\n\r\n\r\n                    <NavLink className={cn.linkforgot} to={PATH.LOGIN}>Sign in</NavLink>\r\n                    <SuperButton onClick={onClickHandler} disabled={!isPasswordDublicate || !isLoginDisabled}\r\n                                 style={{width: 280, marginTop: 80, marginBottom: 40}}>Sign up</SuperButton>\r\n\r\n\r\n                </form>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Registration;\r\n","export default __webpack_public_path__ + \"static/media/user.889f8d44.png\";","import {Dispatch} from 'redux';\r\nimport {CardsPackAPI, CardsPackType} from '../../dal/Api';\r\nimport {AppStoreType} from '../store/store';\r\n\r\n\r\nconst SET_TABLET_INFO = 'TabletReducer/SET_TABLET_INFO';\r\nconst SET_CURRENT_PAGE = 'TabletReducer/SET_CURRENT_PAGE';\r\nconst SET_MIN_MAX_CARDS_COUNT = 'TabletReducer/SET_MIN_MAX_CARDS_COUNT';\r\nconst SET_SORT_STATUS = 'TabletReducer/SET_SORT_STATUS';\r\nconst SET_SEARCH_TEXT = 'TabletReducer/SET_SEARCH_TEXT';\r\nconst SET_SEARCHED_BY = 'TabletReducer/SET_SEARCHED_BY';\r\nconst SET_SEARCH_CARDS_ARR = 'TabletReducer/SET_SEARCH_CARDS_ARR';\r\nconst SET_SEARCH_MODE = 'TabletReducer/SET_SEARCH_MODE';\r\nconst SET_PAGE_FOR_SEARCH_MODE = 'TabletReducer/SET_PAGE_FOR_SEARCH_MODE';\r\nconst SET_SEARCH_EMPTY = 'TabletReducer/SET_SEARCH_EMPTY';\r\nconst SET_LOADING_STATUS = 'TabletReducer/SET_LOADING_STATUS';\r\nconst SET_ERROR_TEXT = 'TabletReducer/SET_ERROR_TEXT';\r\nconst SET_CHECK_BOX_VALUE = 'TabletReducer/SET_CHECK_BOX_VALUE';\r\n\r\n\r\nexport const SetTabletInfo = (newTabletInfo: InitialStateTabletType) => ({\r\n    type: 'TabletReducer/SET_TABLET_INFO' as const,\r\n    newTabletInfo\r\n});\r\n\r\nexport const SetCurrentPage = (newPage: number) => ({\r\n    type: 'TabletReducer/SET_CURRENT_PAGE' as const,\r\n    newPage\r\n});\r\n\r\nexport const SetMinMaxCardsCurrent = (newMinMaxCurrent: number[]) => ({\r\n    type: 'TabletReducer/SET_MIN_MAX_CARDS_COUNT' as const,\r\n    newMinMaxCurrent\r\n});\r\n\r\nexport const SetSortStatus = (newSortStatus: SortPackType) => ({\r\n    type: 'TabletReducer/SET_SORT_STATUS' as const,\r\n    newSortStatus\r\n});\r\n\r\nexport const SetSearchText = (newText: string) => ({\r\n    type: 'TabletReducer/SET_SEARCH_TEXT' as const,\r\n    newText\r\n});\r\nexport const SetSearchedBy = (newStatus: SearchTextType) => ({\r\n    type: 'TabletReducer/SET_SEARCHED_BY' as const,\r\n    newStatus\r\n});\r\nexport const SetSearchCardsArr = (newCards: cardType[] | null) => ({\r\n    type: 'TabletReducer/SET_SEARCH_CARDS_ARR' as const,\r\n    newCards\r\n});\r\nexport const SetSearchMode = (newMode: boolean) => ({\r\n    type: 'TabletReducer/SET_SEARCH_MODE' as const,\r\n    newMode\r\n});\r\nexport const SetPageForSearchMode = (newPage: number) => ({\r\n    type: 'TabletReducer/SET_PAGE_FOR_SEARCH_MODE' as const,\r\n    newPage\r\n});\r\nexport const SetSearchEmpty = (msg: string) => ({\r\n    type: 'TabletReducer/SET_SEARCH_EMPTY' as const,\r\n    msg\r\n});\r\nexport const SetLoadingStatus = (newStatus: loadingStatusType) => ({\r\n    type: 'TabletReducer/SET_LOADING_STATUS' as const,\r\n    newStatus\r\n});\r\nexport const SetErrorText = (newText: string) => ({\r\n    type: 'TabletReducer/SET_ERROR_TEXT' as const,\r\n    newText\r\n});\r\nexport const SetCheckBoxValue = (newStatus: boolean) => ({\r\n    type: 'TabletReducer/SET_CHECK_BOX_VALUE' as const,\r\n    newStatus\r\n});\r\n\r\n\r\nlet InitialState = {\r\n    cardPacks: [] as cardType[],\r\n    searchCardsArr: null as Array<cardType[]> | null,\r\n    cardPacksTotalCount: 0,\r\n    maxCardsCount: 40,\r\n    minCardsCount: 0,\r\n    page: 1,\r\n    pageCount: 10,\r\n    currentPage: 1,\r\n    sortStatus: '0updated' as SortPackType,\r\n    searchText: '',\r\n    checkBoxValue: false,\r\n    searchedBy: '' as SearchTextType,\r\n    searchMode: false as boolean,\r\n    pageForSearchMode: 0 as number,\r\n    searchEmpty: '' as string,\r\n    loadingStatus: 'success' as loadingStatusType,\r\n    errorText: '' as string\r\n}\r\n\r\nexport type InitialStateTabletType = typeof InitialState\r\n\r\nexport const TabletReducer = (state: InitialStateTabletType = InitialState, action: AllTabletActionType): any => {\r\n    switch (action.type) {\r\n        case SET_TABLET_INFO :\r\n            return {\r\n                ...state,\r\n                cardPacks: [...action.newTabletInfo.cardPacks],\r\n                cardPacksTotalCount: action.newTabletInfo.cardPacksTotalCount\r\n            }\r\n        case SET_CURRENT_PAGE :\r\n            return {...state, currentPage: action.newPage}\r\n        case SET_MIN_MAX_CARDS_COUNT :\r\n            return {...state, minCardsCount: action.newMinMaxCurrent[0], maxCardsCount: action.newMinMaxCurrent[1]}\r\n        case SET_SORT_STATUS :\r\n            return {...state, sortStatus: action.newSortStatus}\r\n        case SET_SEARCH_TEXT :\r\n            return {...state, searchText: action.newText}\r\n        case SET_SEARCHED_BY :\r\n            return {...state, searchedBy: action.newStatus}\r\n        case SET_SEARCH_CARDS_ARR :\r\n            return {...state, searchCardsArr: action.newCards}\r\n        case SET_SEARCH_MODE :\r\n            return {...state, searchMode: action.newMode}\r\n        case SET_PAGE_FOR_SEARCH_MODE :\r\n            return {...state, pageForSearchMode: action.newPage}\r\n        case SET_SEARCH_EMPTY :\r\n            return {...state, searchEmpty: action.msg}\r\n        case SET_LOADING_STATUS :\r\n            return {...state, loadingStatus: action.newStatus}\r\n        case SET_ERROR_TEXT :\r\n            return {...state, errorText: action.newText}\r\n        case SET_CHECK_BOX_VALUE :\r\n            return {...state, checkBoxValue: action.newStatus}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const getCarsPack = () => {\r\n    return (dispatch: Dispatch, getState: () => AppStoreType) => {\r\n        const state = getState()\r\n        const page = state.tablet.currentPage\r\n        const pageCount = state.tablet.pageCount\r\n        const min = state.tablet.minCardsCount\r\n        const max = state.tablet.maxCardsCount\r\n        const sortPacks = state.tablet.sortStatus\r\n        const checkBoxValue = state.tablet.checkBoxValue\r\n        const user_id = checkBoxValue ? state.profile.profile._id : '';\r\n\r\n        dispatch(SetLoadingStatus('loading'));\r\n        const promise = CardsPackAPI.getCards({page, pageCount, min, max, sortPacks, user_id})\r\n            .then(res => {\r\n                    dispatch(SetTabletInfo(res.data))\r\n                }\r\n            )\r\n            .catch(error => {\r\n                dispatch(SetErrorText(error.toString()))\r\n                dispatch(SetLoadingStatus('error'));\r\n                setTimeout(() => {\r\n                    dispatch(SetLoadingStatus('redirect'))\r\n                }, 3000)\r\n\r\n            })\r\n        Promise.all([promise]).then(res => setTimeout(() => {\r\n                dispatch(SetLoadingStatus('success'))\r\n            }, 2000)\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const SearchCorrectCards = () => {\r\n    return (dispatch: Dispatch, getState: () => AppStoreType) => {\r\n        const state = getState()\r\n        const searchText = state.tablet.searchText\r\n        const searchBy = state.tablet.searchedBy\r\n        const min = state.tablet.minCardsCount\r\n        const max = state.tablet.maxCardsCount\r\n        const sortPacks = state.tablet.sortStatus\r\n        const checkBoxValue = state.tablet.checkBoxValue\r\n        const user_id = checkBoxValue ? state.profile.profile._id : '';\r\n\r\n        dispatch(SetLoadingStatus('loading'));\r\n        const promise = CardsPackAPI.getCards({page: 1, pageCount: 4000, min, max, sortPacks, user_id})\r\n            .then(res => {\r\n                    if (searchBy === 'By name') {\r\n                        const newCardsPacks = res.data.cardPacks.filter((t: cardType) => t.name.toLowerCase().indexOf(searchText.toLowerCase()) !== -1)\r\n                        const newTotalCount = newCardsPacks.length\r\n                        const temp = []\r\n                        if (newCardsPacks.length !== 0) {\r\n                            while (newCardsPacks.length > 0) {\r\n                                temp.push(newCardsPacks.splice(0, 10))\r\n                            }\r\n                            dispatch(SetSearchEmpty(''))\r\n                            dispatch(SetSearchMode(true))\r\n                            dispatch(SetSearchCardsArr(temp))\r\n                            dispatch(SetTabletInfo({...res.data, cardPacksTotalCount: newTotalCount, cardPacks: []}))\r\n                            dispatch(SetLoadingStatus('success'));\r\n                        } else {\r\n                            dispatch(SetSearchMode(true))\r\n                            dispatch(SetSearchCardsArr(null))\r\n                            debugger\r\n                            dispatch(SetTabletInfo({...res.data, cardPacksTotalCount: 1, cardPacks: []}))\r\n                            dispatch(SetSearchEmpty('not found by this name'))\r\n                            dispatch(SetLoadingStatus('success'));\r\n                        }\r\n                    }\r\n                    if (searchBy === 'By creator') {\r\n                        const newCardsPacks = res.data.cardPacks.filter((t: cardType) => t.user_name.toLowerCase().indexOf(searchText.toLowerCase()) !== -1)\r\n                        const newTotalCount = newCardsPacks.length\r\n                        const temp = []\r\n                        if (newCardsPacks.length !== 0) {\r\n                            while (newCardsPacks.length > 0) {\r\n                                temp.push(newCardsPacks.splice(0, 10))\r\n                            }\r\n                            dispatch(SetSearchEmpty(''))\r\n                            dispatch(SetSearchMode(true))\r\n                            dispatch(SetSearchCardsArr(temp))\r\n                            dispatch(SetTabletInfo({...res.data, cardPacksTotalCount: newTotalCount, cardPacks: []}))\r\n                            dispatch(SetLoadingStatus('success'));\r\n                        } else {\r\n                            dispatch(SetSearchMode(true))\r\n                            dispatch(SetSearchCardsArr(null))\r\n                            dispatch(SetTabletInfo({...res.data, cardPacksTotalCount: 1, cardPacks: []}))\r\n                            dispatch(SetSearchEmpty('not found by this creator'))\r\n                            dispatch(SetLoadingStatus('success'));\r\n                        }\r\n                    }\r\n\r\n                }\r\n            )\r\n            .catch(error => {\r\n                dispatch(SetErrorText(error.toString()))\r\n                dispatch(SetLoadingStatus('error'));\r\n                setTimeout(() => {\r\n                    dispatch(SetLoadingStatus('redirect'))\r\n                }, 3000)\r\n\r\n            })\r\n        Promise.all([promise]).then(res => setTimeout(() => {\r\n                dispatch(SetLoadingStatus('success'))\r\n            }, 2000)\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const PostCards = (params: CardsPackType = {name: 'aaaaa'}) => {\r\n    return (dispatch: Dispatch<any>, getState: () => AppStoreType) => {\r\n        const searchMode = getState().tablet.searchMode\r\n        dispatch(SetLoadingStatus('loading'));\r\n        const promise = CardsPackAPI.addNewCards(params)\r\n            .then(res => {\r\n                {\r\n                    !searchMode && dispatch(getCarsPack())\r\n                }\r\n                {\r\n                    searchMode && dispatch(SearchCorrectCards())\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch(SetErrorText(error.toString()))\r\n                dispatch(SetLoadingStatus('error'));\r\n                setTimeout(() => {\r\n                    dispatch(SetLoadingStatus('redirect'))\r\n                }, 3000)\r\n            })\r\n            .finally(() => {\r\n                setTimeout(() => {\r\n                    dispatch(SetLoadingStatus('success'))\r\n                }, 5000)\r\n            })\r\n    }\r\n}\r\nexport const DeleteCards = (cardId: string) => {\r\n    return (dispatch: Dispatch<any>, getState: () => AppStoreType) => {\r\n        dispatch(SetLoadingStatus('loading'));\r\n        const searchMode = getState().tablet.searchMode\r\n        const promise = CardsPackAPI.deleteCards(cardId)\r\n            .then(res => {\r\n                {\r\n                    !searchMode && dispatch(getCarsPack())\r\n                }\r\n                {\r\n                    searchMode && dispatch(SearchCorrectCards())\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch(SetErrorText(error.toString()))\r\n                dispatch(SetLoadingStatus('error'));\r\n                setTimeout(() => {\r\n                    dispatch(SetLoadingStatus('redirect'))\r\n                }, 3000)\r\n\r\n            })\r\n            .finally(() => {\r\n                setTimeout(() => {\r\n                    dispatch(SetLoadingStatus('success'))\r\n                }, 5000)\r\n            })\r\n    }\r\n}\r\nexport const updateCards = (cardId: string) => {\r\n    return (dispatch: Dispatch<any>, getState: () => AppStoreType) => {\r\n        const searchMode = getState().tablet.searchMode\r\n        CardsPackAPI.updateCards(cardId)\r\n            .then(res => {\r\n                {\r\n                    !searchMode && dispatch(getCarsPack())\r\n                }\r\n                {\r\n                    searchMode && dispatch(SearchCorrectCards())\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch(SetErrorText(error.toString()))\r\n                dispatch(SetLoadingStatus('error'));\r\n                setTimeout(() => {\r\n                    dispatch(SetLoadingStatus('redirect'))\r\n                }, 3000)\r\n\r\n            })\r\n            .finally(() => {\r\n                setTimeout(() => {\r\n                    dispatch(SetLoadingStatus('success'))\r\n                }, 5000)\r\n            })\r\n    }\r\n}\r\n\r\n\r\n//types\r\n\r\n\r\nexport type SetTabletInfoType = ReturnType<typeof SetTabletInfo>\r\nexport type SetCurrentPageType = ReturnType<typeof SetCurrentPage>\r\nexport type SetMinMaxCardsCurrentType = ReturnType<typeof SetMinMaxCardsCurrent>\r\nexport type SetSortStatusType = ReturnType<typeof SetSortStatus>\r\nexport type SetSearchTextType = ReturnType<typeof SetSearchText>\r\nexport type SetSearchedByType = ReturnType<typeof SetSearchedBy>\r\nexport type SetSearchCardsArrType = ReturnType<typeof SetSearchCardsArr>\r\nexport type SetSearchModeType = ReturnType<typeof SetSearchMode>\r\nexport type SetPageForSearchModeType = ReturnType<typeof SetPageForSearchMode>\r\nexport type SetSearchEmptyType = ReturnType<typeof SetSearchEmpty>\r\nexport type SetLoadingStatusType = ReturnType<typeof SetLoadingStatus>\r\nexport type SetErrorTextType = ReturnType<typeof SetErrorText>\r\nexport type SetCheckBoxValueType = ReturnType<typeof SetCheckBoxValue>\r\n\r\nexport type AllTabletActionType =\r\n    SetTabletInfoType\r\n    | SetCurrentPageType\r\n    | SetMinMaxCardsCurrentType\r\n    | SetSortStatusType\r\n    | SetSearchTextType\r\n    | SetSearchedByType\r\n    | SetSearchCardsArrType\r\n    | SetSearchModeType\r\n    | SetPageForSearchModeType\r\n    | SetSearchEmptyType\r\n    | SetLoadingStatusType\r\n    | SetErrorTextType\r\n    | SetCheckBoxValueType\r\n\r\nexport type cardType = {\r\n    _id: string\r\n    user_id: string\r\n    name: string\r\n    path: string\r\n    cardsCount: number\r\n    grade: number\r\n    shots: number\r\n    rating: number\r\n    type: string\r\n    created: Date\r\n    updated: Date\r\n    __v: number\r\n    user_name: string\r\n}\r\nexport type SortPackType = '0cardsCount' | '1cardsCount' | '0name' | '1name' | '0updated' | '1updated'\r\nexport type SearchTextType = 'By name' | 'By creator' | ''\r\nexport type loadingStatusType = 'success' | 'error' | 'loading' | 'redirect'\r\n\r\n\r\nexport default TabletReducer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {Dispatch} from 'redux';\r\nimport {CardAPI, newCardDataType, newUpdateCardDataType} from '../../dal/Api';\r\nimport {AppStoreType} from '../store/store';\r\nimport {loadingStatusType} from './tablet-reducer';\r\n\r\n\r\nconst SET_CARD_INFO = 'CardReducer/SET_CARD_INFO';\r\nconst SET_LOADING_CARD_STATUS = 'CardReducer/SET_LOADING_CARD_STATUS';\r\nconst SET_PAGE = 'CardReducer/SET_PAGE';\r\nconst SET_GRADE_VALUE = 'CardReducer/SET_GRADE_VALUE';\r\nconst SET_SORT_CARD_STATUS = 'CardReducer/SET_SORT_CARD_STATUS';\r\nconst SET_SEARCH_CARD_TEXT = 'CardReducer/SET_SEARCH_CARD_TEXT';\r\nconst SET_SEARCHED_CARD_BY = 'CardReducer/SET_SEARCHED_CARD_BY';\r\nconst SET_SEARCH_CARD_MODE = 'CardReducer/SET_SEARCH_CARD_MODE';\r\nconst SET_SEARCH_EMPTY = 'CardReducer/SET_SEARCH_EMPTY';\r\nconst SET_SEARCH_CARD_ARR = 'CardReducer/SET_SEARCH_CARD_ARR';\r\nconst SET_PAGE_FOR_SEARCH_CARD_MODE = 'CardReducer/SET_PAGE_FOR_SEARCH_CARD_MODE';\r\nconst SET_PAGE_COUNT = 'CardReducer/SET_PAGE_COUNT';\r\nconst SET_ERROR_CARD_TEXT = 'CardReducer/SET_ERROR_CARD_TEXT';\r\n\r\n\r\nexport const SetCardInfo = (newCardInfo: InitialStateCardType) => ({\r\n    type: 'CardReducer/SET_CARD_INFO' as const,\r\n    newCardInfo\r\n});\r\n\r\nexport const SetPage = (newPage: number) => ({\r\n    type: 'CardReducer/SET_PAGE' as const,\r\n    newPage\r\n});\r\nexport const SetLoadingCardStatus = (newStatus: loadingStatusType) => ({\r\n    type: 'CardReducer/SET_LOADING_CARD_STATUS' as const,\r\n    newStatus\r\n});\r\nexport const SetGradeValue = (newRangeValue: number[]) => ({\r\n    type: 'CardReducer/SET_GRADE_VALUE' as const,\r\n    newRangeValue\r\n});\r\nexport const SetSortCardStatus = (newSortStatus: sortCardsStatusType) => ({\r\n    type: 'CardReducer/SET_SORT_CARD_STATUS' as const,\r\n    newSortStatus\r\n});\r\nexport const SetSearchCardText = (newText: string) => ({\r\n    type: 'CardReducer/SET_SEARCH_CARD_TEXT' as const,\r\n    newText\r\n});\r\nexport const SetSearchedCardBy = (newStatus: SearchCardTextType) => ({\r\n    type: 'CardReducer/SET_SEARCHED_CARD_BY' as const,\r\n    newStatus\r\n});\r\nexport const SetSearchCardMode = (newStatus: boolean) => ({\r\n    type: 'CardReducer/SET_SEARCH_CARD_MODE' as const,\r\n    newStatus\r\n});\r\nexport const SetSearchCardEmpty = (newText: string) => ({\r\n    type: 'CardReducer/SET_SEARCH_EMPTY' as const,\r\n    newText\r\n});\r\nexport const SetSearchCardArr = (newArr: Array<OneCardsType[]> | null) => ({\r\n    type: 'CardReducer/SET_SEARCH_CARD_ARR' as const,\r\n    newArr\r\n});\r\nexport const SetPageForSearchCardMode = (newPage: number) => ({\r\n    type: 'CardReducer/SET_PAGE_FOR_SEARCH_CARD_MODE' as const,\r\n    newPage\r\n});\r\nexport const SetPageCount = (newPage: number) => ({\r\n    type: 'CardReducer/SET_PAGE_COUNT' as const,\r\n    newPage\r\n});\r\nexport const SetErrorCardText = (newText: string) => ({\r\n    type: 'CardReducer/SET_ERROR_CARD_TEXT' as const,\r\n    newText\r\n});\r\n\r\n\r\nlet InitialState = {\r\n    cards: [] as OneCardsType[],\r\n    searchCardArr: null as Array<OneCardsType[]> | null,\r\n    cardsTotalCount: 0,\r\n    maxGrade: 0,\r\n    minGrade: 5,\r\n    page: 1,\r\n    pageCount: 4,\r\n    packUserId: '' as string,\r\n    gradeValue: [0, 5],\r\n    loadingStatusCard: 'success' as loadingStatusCardType,\r\n    sortCards: '0update' as sortCardsStatusType,\r\n    searchCardText: '',\r\n    searchedCardBy: '' as SearchCardTextType,\r\n    searchCardMode: false as boolean,\r\n    searchCardEmpty: '' as string,\r\n    pageForSearchCardMode: 0 as number,\r\n    errorCardText: '' as string\r\n}\r\n\r\nexport type InitialStateCardType = typeof InitialState\r\n\r\nexport const CardReducer = (state: InitialStateCardType = InitialState, action: AllTabletActionType): any => {\r\n    switch (action.type) {\r\n        case SET_CARD_INFO :\r\n            return {...state, ...action.newCardInfo}\r\n        case SET_LOADING_CARD_STATUS :\r\n            return {...state, loadingStatusCard: action.newStatus}\r\n        case SET_PAGE :\r\n            return {...state, page: action.newPage}\r\n        case SET_GRADE_VALUE :\r\n            return {...state, gradeValue: action.newRangeValue}\r\n        case SET_SORT_CARD_STATUS :\r\n            return {...state, sortCards: action.newSortStatus}\r\n        case SET_SEARCH_CARD_TEXT :\r\n            return {...state, searchCardText: action.newText}\r\n        case SET_SEARCHED_CARD_BY :\r\n            return {...state, searchedCardBy: action.newStatus}\r\n        case SET_SEARCH_CARD_MODE :\r\n            return {...state, searchCardMode: action.newStatus}\r\n        case SET_SEARCH_EMPTY :\r\n            return {...state, searchCardEmpty: action.newText}\r\n        case SET_SEARCH_CARD_ARR :\r\n            return {...state, searchCardArr: action.newArr}\r\n        case SET_PAGE_FOR_SEARCH_CARD_MODE :\r\n            return {...state, pageForSearchCardMode: action.newPage}\r\n        case SET_PAGE_COUNT :\r\n            return {...state, pageCount: action.newPage}\r\n        case SET_ERROR_CARD_TEXT :\r\n            return {...state, errorCardText: action.newText}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const getCard = (id: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppStoreType) => {\r\n        const state = getState()\r\n        const page = state.card.page\r\n        const pageCount = state.card.pageCount\r\n        const gradeValue = state.card.gradeValue\r\n        const sortCards = state.card.sortCards\r\n        dispatch(SetLoadingCardStatus('loading'));\r\n        CardAPI.getCards({cardsPack_id: id, page, pageCount, min: gradeValue[0], max: gradeValue[1], sortCards})\r\n            .then(res => {\r\n                    if (res.data.cards.length !== 0) {\r\n                        dispatch(SetSearchCardEmpty(''))\r\n                        dispatch(SetCardInfo(res.data))\r\n                        dispatch(SetLoadingCardStatus('success'));\r\n                    } else {\r\n                        dispatch(SetCardInfo({...res.data, cardsTotalCount: 1, cards: []}))\r\n                        dispatch(SetSearchCardEmpty('not found any cards'))\r\n                        dispatch(SetLoadingCardStatus('success'));\r\n                    }\r\n                }\r\n            )\r\n            .catch(error => {\r\n                dispatch(SetErrorCardText(error.toString()))\r\n                dispatch(SetLoadingCardStatus('error'));\r\n                setTimeout(() => {\r\n                    dispatch(SetLoadingCardStatus('redirect'))\r\n                }, 3000)\r\n\r\n            })\r\n            .finally(() => {\r\n                setTimeout(() => {\r\n                    dispatch(SetLoadingCardStatus('success'))\r\n                }, 5000)\r\n            })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const searchCard = (id: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppStoreType) => {\r\n        const state = getState()\r\n        const gradeValue = state.card.gradeValue\r\n        const sortCards = state.card.sortCards\r\n        const searchedCardBy = state.card.searchedCardBy\r\n        const searchCardText = state.card.searchCardText\r\n        const pageCount = state.card.pageCount\r\n        dispatch(SetLoadingCardStatus('loading'));\r\n        CardAPI.getCards({cardsPack_id: id, page: 1, pageCount: 100, min: gradeValue[0], max: gradeValue[1], sortCards})\r\n            .then(res => {\r\n                    if (searchedCardBy === 'By question') {\r\n                        const newCardsPacks = res.data.cards.filter((t: OneCardsType) => t.question.toLowerCase().indexOf(searchCardText.toLowerCase()) !== -1)\r\n                        const newTotalCount = newCardsPacks.length\r\n                        const temp = []\r\n                        if (newCardsPacks.length !== 0) {\r\n                            while (newCardsPacks.length > 0) {\r\n                                temp.push(newCardsPacks.splice(0, 4))\r\n                            }\r\n                            dispatch(SetSearchCardEmpty(''))\r\n                            dispatch(SetSearchCardMode(true))\r\n                            dispatch(SetSearchCardArr(temp))\r\n                            dispatch(SetCardInfo({...res.data, cardsTotalCount: newTotalCount, cards: []}))\r\n                            dispatch(SetLoadingCardStatus('success'));\r\n                        } else {\r\n                            dispatch(SetSearchCardMode(true))\r\n                            dispatch(SetSearchCardArr(null))\r\n                            dispatch(SetCardInfo({...res.data, cardsTotalCount: 1, cards: []}))\r\n                            dispatch(SetSearchCardEmpty('not found by this question'))\r\n                            dispatch(SetLoadingCardStatus('success'));\r\n\r\n                        }\r\n                    }\r\n                    if (searchedCardBy === 'By answer') {\r\n                        const newCardsPacks = res.data.cards.filter((t: OneCardsType) => t.answer.toLowerCase().indexOf(searchCardText.toLowerCase()) !== -1)\r\n                        const newTotalCount = newCardsPacks.length\r\n                        const temp = []\r\n                        if (newCardsPacks.length !== 0) {\r\n                            while (newCardsPacks.length > 0) {\r\n                                temp.push(newCardsPacks.splice(0, 4))\r\n                            }\r\n                            dispatch(SetSearchCardEmpty(''))\r\n                            dispatch(SetSearchCardMode(true))\r\n                            dispatch(SetSearchCardArr(temp))\r\n                            dispatch(SetCardInfo({...res.data, cardsTotalCount: newTotalCount, cards: []}))\r\n                            dispatch(SetLoadingCardStatus('success'));\r\n                        } else {\r\n                            dispatch(SetSearchCardMode(true))\r\n                            dispatch(SetSearchCardArr(null))\r\n                            dispatch(SetCardInfo({...res.data, cardsTotalCount: 1, cards: []}))\r\n                            dispatch(SetSearchCardEmpty('not found by this answer'))\r\n                            dispatch(SetLoadingCardStatus('success'));\r\n                        }\r\n                    }\r\n\r\n                }\r\n            )\r\n            .catch(error => {\r\n                dispatch(SetErrorCardText(error.toString()))\r\n                dispatch(SetLoadingCardStatus('error'));\r\n                setTimeout(() => {\r\n                    dispatch(SetLoadingCardStatus('redirect'))\r\n                }, 3000)\r\n\r\n            })\r\n            .finally(() => {\r\n                setTimeout(() => {\r\n                    dispatch(SetLoadingCardStatus('success'))\r\n                }, 5000)\r\n            })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const AddCard = (newCardParams: newCardDataType) => {\r\n    return (dispatch: Dispatch<any>, getState: () => AppStoreType) => {\r\n        dispatch(SetLoadingCardStatus('loading'));\r\n        const searchMode = getState().tablet.searchMode\r\n        CardAPI.addNewCards(newCardParams)\r\n            .then(res => {\r\n                {\r\n                    !searchMode && dispatch(getCard(newCardParams.cardsPack_id))\r\n                }\r\n                {\r\n                    searchMode && dispatch(searchCard(newCardParams.cardsPack_id))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch(SetErrorCardText(error.toString()))\r\n                dispatch(SetLoadingCardStatus('error'));\r\n                setTimeout(() => {\r\n                    dispatch(SetLoadingCardStatus('redirect'))\r\n                }, 3000)\r\n\r\n            })\r\n            .finally(() => {\r\n                setTimeout(() => {\r\n                    dispatch(SetLoadingCardStatus('success'))\r\n                }, 5000)\r\n            })\r\n    }\r\n}\r\nexport const UpdateCard = (newCardParams: newUpdateCardDataType, cardsPack_id: string) => {\r\n    return (dispatch: Dispatch<any>, getState: () => AppStoreType) => {\r\n        dispatch(SetLoadingCardStatus('loading'));\r\n        const searchMode = getState().tablet.searchMode\r\n        CardAPI.updateCard(newCardParams)\r\n            .then(res => {\r\n                {\r\n                    !searchMode && dispatch(getCard(cardsPack_id))\r\n                }\r\n                {\r\n                    searchMode && dispatch(searchCard(cardsPack_id))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch(SetErrorCardText(error.toString()))\r\n                dispatch(SetLoadingCardStatus('error'));\r\n                setTimeout(() => {\r\n                    dispatch(SetLoadingCardStatus('redirect'))\r\n                }, 3000)\r\n\r\n            })\r\n            .finally(() => {\r\n                setTimeout(() => {\r\n                    dispatch(SetLoadingCardStatus('success'))\r\n                }, 5000)\r\n            })\r\n    }\r\n}\r\n\r\nexport const DeleteCard = (cardId: string, cardsPack_id: string) => {\r\n    return (dispatch: Dispatch<any>, getState: () => AppStoreType) => {\r\n        dispatch(SetLoadingCardStatus('loading'));\r\n        const searchMode = getState().tablet.searchMode\r\n        CardAPI.deleteCard(cardId)\r\n            .then(res => {\r\n                {\r\n                    !searchMode && dispatch(getCard(cardsPack_id))\r\n                }\r\n                {\r\n                    searchMode && dispatch(searchCard(cardsPack_id))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch(SetErrorCardText(error.toString()))\r\n                dispatch(SetLoadingCardStatus('error'));\r\n                setTimeout(() => {\r\n                    dispatch(SetLoadingCardStatus('redirect'))\r\n                }, 3000)\r\n\r\n            })\r\n            .finally(() => {\r\n                setTimeout(() => {\r\n                    dispatch(SetLoadingCardStatus('success'))\r\n                }, 5000)\r\n            })\r\n    }\r\n}\r\n\r\n\r\n//types\r\n\r\n\r\nexport type SetCardInfoType = ReturnType<typeof SetCardInfo>\r\nexport type SetLoadingCardStatusType = ReturnType<typeof SetLoadingCardStatus>\r\nexport type SetPageType = ReturnType<typeof SetPage>\r\nexport type SetGradeValueType = ReturnType<typeof SetGradeValue>\r\nexport type SetSortCardStatusType = ReturnType<typeof SetSortCardStatus>\r\nexport type SetSearchCardTextType = ReturnType<typeof SetSearchCardText>\r\nexport type SetSearchedCardByType = ReturnType<typeof SetSearchedCardBy>\r\nexport type SetSearchCardModeType = ReturnType<typeof SetSearchCardMode>\r\nexport type SetSearchCardEmptyType = ReturnType<typeof SetSearchCardEmpty>\r\nexport type SetSearchCardArrType = ReturnType<typeof SetSearchCardArr>\r\nexport type SetPageForSearchCardModeType = ReturnType<typeof SetPageForSearchCardMode>\r\nexport type SetPageCountType = ReturnType<typeof SetPageCount>\r\nexport type SetErrorCardTextType = ReturnType<typeof SetErrorCardText>\r\n\r\nexport type AllTabletActionType =\r\n    SetCardInfoType\r\n    | SetLoadingCardStatusType\r\n    | SetPageType\r\n    | SetGradeValueType\r\n    | SetSortCardStatusType\r\n    | SetSearchCardTextType\r\n    | SetSearchedCardByType\r\n    | SetSearchCardModeType\r\n    | SetSearchCardEmptyType\r\n    | SetSearchCardArrType\r\n    | SetPageForSearchCardModeType\r\n    | SetPageCountType\r\n    | SetErrorCardTextType\r\n\r\n\r\nexport type OneCardsType = {\r\n    answer: string\r\n    question: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    created: Date\r\n    updated: Date\r\n    __v: number\r\n    _id: string\r\n}\r\n\r\n\r\n//\r\nexport type sortCardsStatusType =\r\n    '0grade'\r\n    | '1grade'\r\n    | '0updated'\r\n    | '1updated'\r\n    | '1question'\r\n    | '0question'\r\n    | '0answer'\r\n    | '1answer'\r\nexport type SearchCardTextType = 'By question' | 'By answer' | ''\r\nexport type loadingStatusCardType = 'success' | 'error' | 'loading' | 'redirect'\r\n\r\n\r\nexport default CardReducer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport s from './Paginator.module.css';\r\nimport {useDispatch} from 'react-redux';\r\nimport {SetCurrentPage, SetPageForSearchMode} from '../../../../bll/redusers/tablet-reducer';\r\nimport {SetPage, SetPageForSearchCardMode} from '../../../../bll/redusers/card-reducer';\r\n\r\n\r\nconst {page, pageSelect, btnGroup} = s;\r\n\r\n\r\ntype PaginatorPropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage?: number\r\n    searchMode: boolean\r\n    pageForSearchMode: number\r\n    cardType?: boolean\r\n}\r\n\r\n\r\nconst Paginator = (props: PaginatorPropsType) => {\r\n    const {totalItemsCount, pageSize, currentPage, searchMode, pageForSearchMode, cardType} = props;\r\n\r\n    const dispatch = useDispatch();\r\n    const portionSize = 10;\r\n\r\n\r\n    const onPageChanged = (p: number) => {\r\n        if (!cardType) {\r\n            {\r\n                !searchMode && dispatch(SetCurrentPage(p))\r\n            }\r\n            {\r\n                searchMode && dispatch(SetPageForSearchMode(p - 1))\r\n            }\r\n        } else {\r\n            {\r\n                !searchMode && dispatch(SetPage(p))\r\n            }\r\n            {\r\n                searchMode && dispatch(SetPageForSearchCardMode(p - 1))\r\n            }\r\n        }\r\n    }\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n    let allPages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        allPages.push(i)\r\n    }\r\n\r\n    const portionCount = Math.ceil(pagesCount / portionSize);\r\n\r\n    const [portionNumber, setPortionNumber] = useState(1);\r\n\r\n\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    const rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n    return (\r\n\r\n        <div className={btnGroup}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>Prev</button>}\r\n\r\n            {allPages.filter(t => t >= leftPortionPageNumber && t <= rightPortionPageNumber)\r\n                .map((p) => {\r\n                    return <span\r\n                        className={searchMode ? pageForSearchMode === p - 1 ? pageSelect : page : currentPage === p ? pageSelect : page}\r\n                        key={p}\r\n                        onClick={() => {\r\n                            onPageChanged(p)\r\n                        }}>{p}</span>\r\n                })}\r\n\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>Next</button>}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Paginator;\r\n\r\n\r\n","import React, {SelectHTMLAttributes, DetailedHTMLProps, ChangeEvent} from 'react'\r\nimport s from './SuperSelect.module.css';\r\n\r\nconst{select}=s;\r\ntype DefaultSelectPropsType = DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>\r\n\r\ntype SuperSelectPropsType = DefaultSelectPropsType & {\r\n    options?: any[]\r\n    onChangeOption?: (option: any) => void\r\n\r\n}\r\n\r\nconst SuperSelect: React.FC<SuperSelectPropsType> = (\r\n    {\r\n        options,\r\n        onChange, onChangeOption,\r\n        ...restProps\r\n    }\r\n) => {\r\n    const mappedOptions: any[] = options ? options.map((t, i) => (<option key={i}>{t}</option>)) : [];\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        if(e.currentTarget.value && onChangeOption){\r\n            onChangeOption(e.currentTarget.value)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <select className={select} onChange={onChangeCallback} {...restProps}>\r\n            {mappedOptions}\r\n        </select>\r\n    )\r\n}\r\n\r\nexport default SuperSelect\r\n","import React, {SyntheticEvent, useEffect, useState} from 'react';\r\nimport SuperInputText from '../../common/c1-SuperInputText/SuperInputText';\r\nimport SuperButton from '../../common/c2-SuperButton/SuperButton';\r\nimport s from './tablet-cards.module.css';\r\nimport user from '../../../../assets/img/user.png'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {\r\n    DeleteCards,\r\n    getCarsPack,\r\n    InitialStateTabletType,\r\n    PostCards,\r\n    SearchCorrectCards,\r\n    SearchTextType, SetCheckBoxValue,\r\n    SetMinMaxCardsCurrent,\r\n    SetSearchCardsArr,\r\n    SetSearchedBy,\r\n    SetSearchEmpty,\r\n    SetSearchMode,\r\n    SetSearchText,\r\n    SetSortStatus,\r\n    SortPackType, updateCards\r\n} from '../../../bll/redusers/tablet-reducer';\r\nimport {AppStoreType} from '../../../bll/store/store';\r\nimport {InitialStateLoginType} from '../../../bll/redusers/profile-reducer';\r\nimport Paginator from './Paginator/Paginator';\r\nimport {Range} from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\nimport SuperSelect from '../../common/c5-SuperSelect/SuperSelect';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {ResponsePage} from '../../common/ResponsePage/ResponsePage';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport {PATH} from '../../routes/Routes';\r\nimport Login from '../login/login';\r\n\r\n\r\nexport const TabletCards = () => {\r\n\r\n    const isLogin = useSelector<AppStoreType, boolean>(state => state.login.logIn);\r\n    const profile = useSelector<AppStoreType, InitialStateLoginType>(state => state.profile)\r\n    const {\r\n        _id,\r\n        name,\r\n        avatar\r\n    } = profile.profile\r\n\r\n    const tablet = useSelector<AppStoreType, InitialStateTabletType>(state => state.tablet)\r\n    const [rangeValue, setRangeValue] = useState<number[]>([tablet.minCardsCount, tablet.maxCardsCount])\r\n    const [search, setSearch] = useState<string>('');\r\n\r\n\r\n    const selectParamsOptions: SearchTextType[] = ['By name', 'By creator']\r\n    const [selectedParams, setOptionParams] = useState<SearchTextType>(selectParamsOptions[0]);\r\n\r\n\r\n    const {\r\n        cardPacks,\r\n        currentPage,\r\n        cardPacksTotalCount,\r\n        pageCount,\r\n        minCardsCount,\r\n        maxCardsCount,\r\n        sortStatus,\r\n        searchCardsArr,\r\n        searchMode,\r\n        pageForSearchMode,\r\n        searchEmpty,\r\n        checkBoxValue,\r\n        loadingStatus,\r\n        errorText\r\n    } = tablet\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        {\r\n            !searchMode && dispatch(getCarsPack())\r\n        }\r\n        {\r\n            searchMode && dispatch(SearchCorrectCards())\r\n        }\r\n    }, [currentPage, minCardsCount, maxCardsCount, sortStatus, checkBoxValue, isLogin])\r\n\r\n\r\n    const onChangeRangeHandler = (newRangeValue: number[]) => {\r\n        setRangeValue(newRangeValue)\r\n    }\r\n    const onClickSearchBtnHandler = (newMinMaxCurrent?: number[], sortBy?: SearchTextType) => {\r\n        if (newMinMaxCurrent) {\r\n            dispatch(SetMinMaxCardsCurrent(newMinMaxCurrent))\r\n        } else if (sortBy) {\r\n            dispatch(SetSearchedBy(sortBy))\r\n            dispatch(SetSearchText(search))\r\n            dispatch(SearchCorrectCards())\r\n        }\r\n    }\r\n\r\n    const onSortBtnHandler = (newStatus: SortPackType) => {\r\n        dispatch(SetSortStatus(newStatus))\r\n    }\r\n    const onClickUpdateHandler = (cardId: string) => {\r\n        dispatch(updateCards(cardId))\r\n    }\r\n\r\n    const onDeleteCardsHandler = (cardId: string) => {\r\n        dispatch(DeleteCards(cardId))\r\n    }\r\n\r\n    const onChangeCheckBoxStatus = () => {\r\n        dispatch(SetCheckBoxValue(!checkBoxValue))\r\n    }\r\n    const onHandlerSearch = (e: SyntheticEvent<HTMLInputElement>) => {\r\n        setSearch(e.currentTarget.value);\r\n    };\r\n\r\n    const onAddNewCardsClickHandler = () => {\r\n        dispatch(PostCards())\r\n    };\r\n\r\n    const onAllPagesHandler = () => {\r\n        dispatch(SetSearchEmpty(''))\r\n        dispatch(SetSearchMode(false))\r\n        dispatch(SetSearchCardsArr(null))\r\n        dispatch(SetSortStatus('0updated'))\r\n        dispatch(getCarsPack())\r\n        setSearch('');\r\n    };\r\n\r\n\r\n    if (!isLogin) {\r\n        return <Login/>\r\n    }\r\n\r\n    if (loadingStatus === 'loading') {\r\n        return <Preloader/>\r\n    }\r\n\r\n    if (loadingStatus === 'error') {\r\n        return <ResponsePage typeOfPage={'cardsError'} errorText={errorText}/>\r\n\r\n    }\r\n\r\n\r\n    if (loadingStatus === 'redirect') {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={s.profile}>\r\n                <div className={s.user}>\r\n                    <div className={s.user_card}>\r\n                        <div className={s.logo}>\r\n                            <NavLink to={PATH.PROFILE}><img src={avatar ? avatar : user} alt=\"\"/></NavLink>\r\n                        </div>\r\n                        <div className={s.name}>\r\n                            {name}\r\n                        </div>\r\n                        <div className={s.about}>\r\n                            {_id}\r\n                        </div>\r\n                        <br/>\r\n                        <br/>\r\n                        <SuperButton onClick={onAddNewCardsClickHandler}>ADD NEW DECK</SuperButton>\r\n                    </div>\r\n\r\n                    <div className={s.polz}>\r\n                        <div className={s.polztit}>Number of cards</div>\r\n                        <br/>\r\n                        <br/>\r\n                        Current of cards\r\n                        <br/>\r\n                        <br/>\r\n                        <div className={s.rangeValues}>\r\n                            <div>min:{rangeValue[0]}</div>\r\n                            <div>max:{rangeValue[1]}</div>\r\n                        </div>\r\n                        <Range min={0} max={200} defaultValue={rangeValue} value={rangeValue}\r\n                               onChange={onChangeRangeHandler}/>\r\n                        <br/>\r\n                        <br/>\r\n                        <SuperButton onClick={() => onClickSearchBtnHandler(rangeValue)}>search</SuperButton>\r\n                    </div>\r\n                </div>\r\n                <div className={s.table}>\r\n                    <div className={s.tit}>\r\n                        Pack list for {name}\r\n                    </div>\r\n                    <div style={{display: 'inline-block'}}>\r\n                        <input onChange={onChangeCheckBoxStatus} checked={checkBoxValue} type={'checkbox'}/>My cards\r\n                    </div>\r\n                    <div className={s.inp}>\r\n                        <div style={{display: 'flex'}}>\r\n                            {selectedParams === 'By name' &&\r\n                            <SuperInputText onChange={onHandlerSearch} value={search} label=\"Search by name\"/>}\r\n                            {selectedParams === 'By creator' &&\r\n                            <SuperInputText onChange={onHandlerSearch} value={search} label=\"Search by creator\"/>}\r\n                            <SuperButton disabled={search === ''}\r\n                                         onClick={() => onClickSearchBtnHandler(undefined, selectedParams)}>search</SuperButton>\r\n                            {searchMode && <SuperButton onClick={onAllPagesHandler}>go to all</SuperButton>}\r\n                        </div>\r\n                        <SuperSelect onChangeOption={setOptionParams} options={selectParamsOptions}/>\r\n\r\n                    </div>\r\n                    <table className={s.mainTab}>\r\n                        <thead>\r\n                        <tr>\r\n                            <th>Name\r\n                                <div>\r\n                                    <button className={tablet.sortStatus === '1name' ? s.activeBtn : ''}\r\n                                            onClick={() => onSortBtnHandler('1name')}>/\\\r\n                                    </button>\r\n                                    <button className={tablet.sortStatus === '0name' ? s.activeBtn : ''}\r\n                                            onClick={() => onSortBtnHandler('0name')}>\\/\r\n                                    </button>\r\n                                </div>\r\n                            </th>\r\n\r\n                            <th>Cards\r\n                                <div>\r\n                                    <button className={tablet.sortStatus === '1cardsCount' ? s.activeBtn : ''}\r\n                                            onClick={() => onSortBtnHandler('1cardsCount')}>/\\\r\n                                    </button>\r\n                                    <button className={tablet.sortStatus === '0cardsCount' ? s.activeBtn : ''}\r\n                                            onClick={() => onSortBtnHandler('0cardsCount')}>\\/\r\n                                    </button>\r\n                                </div>\r\n                            </th>\r\n                            <th>Last Updated\r\n                                <div>\r\n                                    <button className={tablet.sortStatus === '1updated' ? s.activeBtn : ''}\r\n                                            onClick={() => onSortBtnHandler('1updated')}>/\\\r\n                                    </button>\r\n                                    <button className={tablet.sortStatus === '0updated' ? s.activeBtn : ''}\r\n                                            onClick={() => onSortBtnHandler('0updated')}>\\/\r\n                                    </button>\r\n                                </div></th>\r\n                            <th>Created by</th>\r\n                            <th>Actions</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>{searchEmpty &&\r\n                        <div style={{margin: '60px', fontSize: '50px', color: 'red'}}>{searchEmpty}</div>}\r\n                        {cardPacks && cardPacks.map(t =>\r\n                            <tr key={t._id}>\r\n                                <td>{t.name}</td>\r\n                                <td>{t.cardsCount}</td>\r\n                                <td>{t.updated ? new Date(t.updated).toLocaleDateString() : ''}</td>\r\n                                <td>{t.user_name}</td>\r\n                                <td style={{display: 'flex'}}><NavLink\r\n                                    to={'/card/' + t._id}><SuperButton>Learn</SuperButton></NavLink>\r\n                                    {t.user_id === profile.profile._id &&\r\n                                    <SuperButton onClick={() => onDeleteCardsHandler(t._id)}>del</SuperButton>}\r\n                                    {t.user_id === profile.profile._id &&\r\n                                    <SuperButton onClick={() => onClickUpdateHandler(t._id)}>update</SuperButton>}\r\n                                </td>\r\n                            </tr>)}\r\n                        {searchCardsArr && searchCardsArr[pageForSearchMode].map(t =>\r\n                            <tr key={t._id}>\r\n                                <td>{t.name}</td>\r\n                                <td>{t.cardsCount}</td>\r\n                                <td>{t.updated ? new Date(t.updated).toLocaleDateString() : ''}</td>\r\n                                <td>{t.user_name}</td>\r\n                                <td style={{display: 'flex'}}><SuperButton>Learn</SuperButton>\r\n                                    {t.user_id === profile.profile._id &&\r\n                                    <SuperButton onClick={() => onDeleteCardsHandler(t._id)}>del</SuperButton>}\r\n                                    {t.user_id === profile.profile._id &&\r\n                                    <SuperButton onClick={() => onClickUpdateHandler(t._id)}>update</SuperButton>}\r\n                                </td>\r\n                            </tr>)}</tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            <Paginator pageForSearchMode={pageForSearchMode} searchMode={searchMode}\r\n                       totalItemsCount={cardPacksTotalCount} currentPage={currentPage} pageSize={pageCount}/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TabletCards;\r\n","import React from 'react';\r\nimport cn from './setNewPassword.module.css';\r\nimport SuperInputText from '../../common/c1-SuperInputText/SuperInputText';\r\nimport {NavLink, Redirect, useParams} from 'react-router-dom';\r\nimport SuperButton from '../../common/c2-SuperButton/SuperButton';\r\nimport {PATH} from '../../routes/Routes';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStoreType} from '../../../bll/store/store';\r\nimport {useInput} from '../login/login';\r\nimport {CreateNewPassword, isMessageSentStatusType} from '../../../bll/redusers/recoverPass-reducer';\r\nimport {setLoginError} from '../../../bll/redusers/login-reducer';\r\nimport {ErrorWindow} from '../../common/ErrorWindow/ErrorWindow';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {ResponsePage} from '../../common/ResponsePage/ResponsePage';\r\n\r\n\r\nexport const SetNewPassword = () => {\r\n    const password = useInput('', {isEmpty: true, minLength: 7, maxLength: 20});\r\n    const password1 = useInput('', {isEmpty: true, minLength: 7, maxLength: 20});\r\n    const dispatch = useDispatch();\r\n    const isMessageSentStatus = useSelector<AppStoreType, isMessageSentStatusType>(state => state.recoverPass.isMessageSend)\r\n    const ErrorRequestMsg = useSelector<AppStoreType, string>(state => state.recoverPass.ErrorMessageRecoveryPassword);\r\n    const isLogin = useSelector<AppStoreType, boolean>(state => state.login.logIn);\r\n    const {token} = useParams<{ token: string }>();\r\n\r\n    const onClickHandler = () => {\r\n        const message = {\r\n            password: password.value,\r\n            resetPasswordToken: token\r\n        }\r\n        dispatch(CreateNewPassword(message))\r\n    }\r\n\r\n    if (password.touched || password.value) {\r\n        dispatch(setLoginError(''))\r\n    }\r\n\r\n\r\n    const isEmptyPassMsg = password.touched && password.isEmpty;\r\n\r\n\r\n    const minLengthPassMsg = password.touched && password.minLengthError;\r\n\r\n    const maxLengthPassMsg = password.touched && password.maxLengthError;\r\n\r\n\r\n    const isPasswordCorrectReEnter = password.value === password1.value && password1.value !== '';\r\n\r\n    const isButtonDisabled = !password.inputValid && !password.inputValid && !isPasswordCorrectReEnter;\r\n\r\n    if (isLogin) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    if (isMessageSentStatus === 'loading') {\r\n        return <Preloader/>\r\n    }\r\n\r\n\r\n    if (isMessageSentStatus === 'sent') {\r\n        return (<div>\r\n                <ResponsePage typeOfPage={'success'}/>\r\n                </div>\r\n        )\r\n    }\r\n    if (isMessageSentStatus === 'end') {\r\n        return (<Redirect to={PATH.LOGIN}/>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={cn.autorization}>\r\n            <div className={cn.form}>\r\n                <div className={cn.hTit}>\r\n                    It-incubator\r\n                </div>\r\n                <div className={cn.tit}>\r\n                    Create new password\r\n                </div>\r\n                <form>\r\n                    {ErrorRequestMsg && <div>{ErrorRequestMsg}</div>}\r\n\r\n                    <ErrorWindow isEmptyPassMsg={isEmptyPassMsg} minLengthPassMsg={minLengthPassMsg}\r\n                                 maxLengthPassMsg={maxLengthPassMsg}/>\r\n\r\n\r\n                    <SuperInputText onChange={password.onChange} onBlur={() => {\r\n                        password.onBlur(true)\r\n                    }} value={password.value}\r\n                                    label={'Enter new unique password'} type={'password'}/>\r\n\r\n                    <ErrorWindow isPasswordCorrectReEnter={!isPasswordCorrectReEnter && password1.value!==''}/>\r\n\r\n\r\n                    <SuperInputText onChange={password1.onChange} onBlur={() => {\r\n                        password1.onBlur(true)\r\n                    }} value={password1.value}\r\n                                    label={'Repeat your password'} type={'password'}/>\r\n\r\n\r\n                    <SuperButton disabled={!isPasswordCorrectReEnter} onClick={onClickHandler}\r\n                                 style={{width: 280, marginTop: 80, marginBottom: 40}}>Create\r\n                        new password</SuperButton>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SetNewPassword;\r\n","import React, {SyntheticEvent, useEffect, useState} from 'react';\r\nimport SuperInputText from '../../common/c1-SuperInputText/SuperInputText';\r\nimport SuperButton from '../../common/c2-SuperButton/SuperButton';\r\nimport s from './card.module.css';\r\nimport user from '../../../../assets/img/user.png'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStoreType} from '../../../bll/store/store';\r\nimport {InitialStateLoginType} from '../../../bll/redusers/profile-reducer';\r\nimport 'rc-slider/assets/index.css';\r\nimport {NavLink, Redirect, useParams} from 'react-router-dom';\r\nimport {PATH} from '../../routes/Routes';\r\nimport Paginator from '../tablet-cards/Paginator/Paginator';\r\nimport {\r\n    AddCard, DeleteCard,\r\n    getCard,\r\n    InitialStateCardType,\r\n    OneCardsType,\r\n    searchCard,\r\n    SearchCardTextType,\r\n    SetGradeValue, SetPageCount,\r\n    SetSearchCardArr,\r\n    SetSearchCardEmpty,\r\n    SetSearchCardMode,\r\n    SetSearchCardText,\r\n    SetSearchedCardBy,\r\n    SetSortCardStatus,\r\n    sortCardsStatusType, UpdateCard\r\n} from '../../../bll/redusers/card-reducer';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {Range} from 'rc-slider';\r\nimport SuperSelect from '../../common/c5-SuperSelect/SuperSelect';\r\nimport Login from '../login/login';\r\nimport {ResponsePage} from '../../common/ResponsePage/ResponsePage';\r\n\r\n\r\nexport const Card = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const {token} = useParams<{ token: string }>();\r\n    const tabletInfo = useSelector<AppStoreType, InitialStateCardType>(state => state.card)\r\n    const AllCards = useSelector<AppStoreType, OneCardsType[]>(state => state.card.cards)\r\n    const profile = useSelector<AppStoreType, InitialStateLoginType>(state => state.profile)\r\n    const [gradeCardValue, setGradeCardValue] = useState<number[]>([tabletInfo.gradeValue[0], tabletInfo.gradeValue[1]])\r\n    const selectParamsCardOptions: SearchCardTextType[] = ['By answer', 'By question']\r\n    const [selectedCardParams, setSelectedCardParams] = useState<SearchCardTextType>(selectParamsCardOptions[0]);\r\n    const [search, setSearch] = useState<string>('');\r\n    const isLogin = useSelector<AppStoreType, boolean>(state => state.login.logIn);\r\n\r\n    const {\r\n        loadingStatusCard,\r\n        packUserId,\r\n        cardsTotalCount,\r\n        page,\r\n        gradeValue,\r\n        sortCards,\r\n        searchCardMode,\r\n        pageForSearchCardMode,\r\n        searchCardArr,\r\n        searchCardEmpty,\r\n        errorCardText\r\n    } = tabletInfo\r\n\r\n\r\n    const onChangeGradeHandler = (newGradeValue: number[]) => {\r\n        setGradeCardValue(newGradeValue)\r\n    }\r\n\r\n    const onClickSearchCardHandler = (newGradeValue: number[] | undefined, sortBy?: SearchCardTextType) => {\r\n        if (newGradeValue) {\r\n            dispatch(SetGradeValue(newGradeValue))\r\n        } else if (sortBy) {\r\n            dispatch(SetSearchedCardBy(sortBy))\r\n            dispatch(SetSearchCardText(search))\r\n            dispatch(searchCard(token))\r\n        }\r\n    }\r\n    const onClickSearchModeCardHandler = (newGradeValue: number[], sortBy: SearchCardTextType) => {\r\n        dispatch(SetGradeValue(newGradeValue))\r\n        dispatch(SetSearchedCardBy(sortBy))\r\n        dispatch(SetSearchCardText(search))\r\n        dispatch(searchCard(token))\r\n    }\r\n\r\n\r\n    const onSortBtnHandler = (newStatus: sortCardsStatusType) => {\r\n        dispatch(SetSortCardStatus(newStatus))\r\n    }\r\n    const onHandlerCardSearch = (e: SyntheticEvent<HTMLInputElement>) => {\r\n        setSearch(e.currentTarget.value);\r\n    };\r\n\r\n    const onAddNewCardHandler = (cardsPack_id: string) => {\r\n        dispatch(AddCard({cardsPack_id}))\r\n\r\n    };\r\n    const onDeleteCardHandler = (cardId: string, cardsPack_id: string) => {\r\n        dispatch(DeleteCard(cardId, cardsPack_id))\r\n\r\n    };\r\n    const onUpdateCardHandler = (_id: string, cardsPack_id: string) => {\r\n        dispatch(UpdateCard({_id, question: 'blablabla'}, cardsPack_id,))\r\n\r\n    };\r\n\r\n    const onAllCardPagesHandler = () => {\r\n        dispatch(SetSearchCardEmpty(''))\r\n        dispatch(SetSearchCardMode(false))\r\n        dispatch(SetSearchCardArr(null))\r\n        dispatch(SetSortCardStatus('0updated'))\r\n        dispatch(SetPageCount(4))\r\n        dispatch(getCard(token))\r\n        setSearch('');\r\n    };\r\n\r\n    const {\r\n        _id,\r\n        name,\r\n        avatar\r\n    } = profile.profile\r\n\r\n    useEffect(() => {\r\n        {\r\n            !searchCardMode && dispatch(getCard(token))\r\n        }\r\n        {\r\n            searchCardMode && dispatch(searchCard(token))\r\n        }\r\n\r\n    }, [page, gradeValue, sortCards])\r\n\r\n\r\n    if (!isLogin) {\r\n        return <Login/>\r\n    }\r\n\r\n    if (loadingStatusCard === 'loading') {\r\n        return <Preloader/>\r\n    }\r\n\r\n    if (loadingStatusCard === 'error') {\r\n        return <ResponsePage typeOfPage={'cardsError'} errorText={errorCardText}/>\r\n\r\n    }\r\n\r\n\r\n    if (loadingStatusCard === 'redirect') {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={s.profile}>\r\n                <div className={s.user}>\r\n                    <div className={s.user_card}>\r\n                        <div className={s.logo}>\r\n                            <NavLink to={PATH.PROFILE}><img src={avatar ? avatar : user} alt=\"\"/></NavLink>\r\n                        </div>\r\n                        <div className={s.name}>\r\n                            {name}\r\n                        </div>\r\n                        <div className={s.about}>\r\n                            {_id}\r\n                        </div>\r\n                        <br/>\r\n                        <br/>\r\n                        <SuperButton disabled={!(profile.profile._id === tabletInfo.packUserId)} onClick={() => {\r\n                            onAddNewCardHandler(token)\r\n                        }}>ADD NEW CARD</SuperButton>\r\n                    </div>\r\n\r\n                    <div className={s.polz}>\r\n                        <div className={s.polztit}>Creator ID:</div>\r\n                        <br/>\r\n                        {packUserId}\r\n                        <br/>\r\n                        <br/>\r\n                        <br/>\r\n                        Current of cards: {cardsTotalCount}\r\n                        <br/>\r\n                        <br/>\r\n                        <div className={s.rangeValues}>\r\n                            <div>min:{gradeCardValue[0]}</div>\r\n                            <div>max:{gradeCardValue[1]}</div>\r\n                        </div>\r\n                        <Range step={0.1} min={0} max={5} defaultValue={gradeCardValue} value={gradeCardValue}\r\n                               onChange={onChangeGradeHandler}/>\r\n                        <br/>\r\n                        <br/>\r\n                        {!searchCardMode &&\r\n                        <SuperButton onClick={() => onClickSearchCardHandler(gradeCardValue)}>search</SuperButton>}\r\n                        {searchCardMode && <SuperButton\r\n                            onClick={() => onClickSearchModeCardHandler(gradeCardValue, selectedCardParams)}>search</SuperButton>}\r\n                    </div>\r\n                </div>\r\n                <div className={s.table}>\r\n                    <div className={s.tit}>\r\n                        Card list for {name}\r\n                    </div>\r\n                    <br/>\r\n                    <br/>\r\n                    <div className={s.inp}>\r\n                        <div style={{display: 'flex'}}>\r\n                            {selectedCardParams === 'By answer' &&\r\n                            <SuperInputText onChange={onHandlerCardSearch} value={search} label=\"Search by answer\"/>}\r\n                            {selectedCardParams === 'By question' &&\r\n                            <SuperInputText onChange={onHandlerCardSearch} value={search} label=\"Search by question\"/>}\r\n                            <SuperButton disabled={search === ''}\r\n                                         onClick={() => onClickSearchCardHandler(undefined, selectedCardParams)}>search</SuperButton>\r\n                            {searchCardMode && <SuperButton onClick={onAllCardPagesHandler}>go to all</SuperButton>}\r\n                        </div>\r\n                        <SuperSelect onChangeOption={setSelectedCardParams} options={selectParamsCardOptions}/>\r\n\r\n                    </div>\r\n                    <table className={s.mainTab}>\r\n                        <thead>\r\n                        <tr>\r\n                            <th>Question\r\n                                <div>\r\n                                    <button className={tabletInfo.sortCards === '1question' ? s.activeBtn : ''}\r\n                                            onClick={() => onSortBtnHandler('1question')}>/\\\r\n                                    </button>\r\n                                    <button className={tabletInfo.sortCards === '0question' ? s.activeBtn : ''}\r\n                                            onClick={() => onSortBtnHandler('0question')}>\\/\r\n                                    </button>\r\n                                </div>\r\n                            </th>\r\n\r\n                            <th>Answer\r\n                                <div>\r\n                                    <button className={tabletInfo.sortCards === '1answer' ? s.activeBtn : ''}\r\n                                            onClick={() => onSortBtnHandler('1answer')}>/\\\r\n                                    </button>\r\n                                    <button className={tabletInfo.sortCards === '0answer' ? s.activeBtn : ''}\r\n                                            onClick={() => onSortBtnHandler('0answer')}>\\/\r\n                                    </button>\r\n                                </div>\r\n                            </th>\r\n                            <th>Grade\r\n                                <div>\r\n                                    <button className={tabletInfo.sortCards === '1grade' ? s.activeBtn : ''}\r\n                                            onClick={() => onSortBtnHandler('1grade')}>/\\\r\n                                    </button>\r\n                                    <button className={tabletInfo.sortCards === '0grade' ? s.activeBtn : ''}\r\n                                            onClick={() => onSortBtnHandler('0grade')}>\\/\r\n                                    </button>\r\n                                </div>\r\n                            </th>\r\n                            <th>Updated\r\n                                <div>\r\n                                    <button className={tabletInfo.sortCards === '1updated' ? s.activeBtn : ''}\r\n                                            onClick={() => onSortBtnHandler('1updated')}>/\\\r\n                                    </button>\r\n                                    <button className={tabletInfo.sortCards === '0updated' ? s.activeBtn : ''}\r\n                                            onClick={() => onSortBtnHandler('0updated')}>\\/\r\n                                    </button>\r\n                                </div></th>\r\n                            <th>Action</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {searchCardEmpty &&\r\n                        <div style={{margin: '60px', fontSize: '50px', color: 'red'}}>{searchCardEmpty}</div>}\r\n                        {AllCards && AllCards.map(t =>\r\n                            <tr key={t.cardsPack_id}>\r\n                                <td>{t.question}</td>\r\n                                <td>{t.answer}</td>\r\n                                <td>{t.grade.toFixed(1)}</td>\r\n                                <td>{new Date(t.updated).toLocaleDateString()}</td>\r\n                                <td><SuperButton onClick={() => {\r\n                                    onDeleteCardHandler(t._id, t.cardsPack_id)\r\n                                }}>DELETE</SuperButton>\r\n                                    <SuperButton onClick={() => {\r\n                                        onUpdateCardHandler(t._id, t.cardsPack_id)\r\n                                    }}>UPDATE</SuperButton></td>\r\n                            </tr>)}\r\n                        {searchCardArr && searchCardArr[pageForSearchCardMode].map(t =>\r\n                            <tr key={t.cardsPack_id}>\r\n                                <td>{t.question}</td>\r\n                                <td>{t.answer}</td>\r\n                                <td>{t.grade.toFixed(1)}</td>\r\n                                <td>{new Date(t.updated).toLocaleDateString()}</td>\r\n                                <td><SuperButton onClick={() => {\r\n                                    onDeleteCardHandler(t._id, t.cardsPack_id)\r\n                                }}>DELETE</SuperButton>\r\n                                    <SuperButton onClick={() => {\r\n                                        onUpdateCardHandler(t._id, t.cardsPack_id)\r\n                                    }}>UPDATE</SuperButton></td>\r\n                            </tr>)}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            <Paginator cardType={true} pageForSearchMode={pageForSearchCardMode} searchMode={searchCardMode}\r\n                       totalItemsCount={cardsTotalCount} currentPage={page} pageSize={4}/>\r\n        </>\r\n    )\r\n        ;\r\n}\r\n\r\nexport default Card;\r\n","import {Redirect, Route, Switch} from 'react-router-dom';\r\n\r\nimport Error404 from '../pages/error404/error404';\r\nimport Login from '../pages/login/login';\r\nimport Profile from '../pages/profile/profile';\r\nimport RecoverPass from '../pages/recoverPass/recoverPass';\r\nimport Registration from '../pages/registration/registration';\r\nimport TabletCards from '../pages/tablet-cards/tablet-cards';\r\nimport SetNewPassword from '../pages/setNewPassword/setNewPassword';\r\nimport React from 'react';\r\nimport Card from '../pages/card/card';\r\n\r\nexport const PATH = {\r\n    ERROR_404: '/err404',\r\n    LOGIN: '/login',\r\n    PROFILE: '/profile',\r\n    RECOVER_PASS: '/recPassword',\r\n    REGISTRATION: '/reg',\r\n    TEST: '/card/:token',\r\n    CREATE_NEW_PASS:'/set-new-password/:token',\r\n    CARDS_TABLET:'/cards-tablet'\r\n}\r\n\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <div>\r\n            <Switch>\r\n\r\n                <Route path={'/'} exact render={() => <Redirect to={PATH.LOGIN}/>}/>\r\n                <Route path={PATH.LOGIN} render={() => <Login/>}/>\r\n                <Route path={PATH.PROFILE} render={() => <Profile/>}/>\r\n                <Route path={PATH.RECOVER_PASS} render={() => <RecoverPass/>}/>\r\n                <Route path={PATH.REGISTRATION} render={() => <Registration/>}/>\r\n                <Route path={PATH.TEST} render={() => <Card/>}/>\r\n                <Route path={PATH.CREATE_NEW_PASS} render={() => <SetNewPassword/>}/>\r\n                <Route path={PATH.CARDS_TABLET} render={() => <TabletCards/>}/>\r\n\r\n                <Route render={() => <Error404/>}/>\r\n\r\n            </Switch>\r\n        </div>\r\n    )\r\n\r\n\r\n}","import React from 'react';\r\nimport {PATH} from '../routes/Routes';\r\nimport {NavLink} from 'react-router-dom'\r\nimport s from './header.module.css';\r\nimport cn from './header.module.css';\r\nimport SuperButton from '../common/c2-SuperButton/SuperButton';\r\nimport {FaReact} from 'react-icons/fa';\r\nimport {FaRegUser} from 'react-icons/fa';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStoreType} from '../../bll/store/store';\r\nimport {logOutTC} from '../../bll/redusers/login-reducer';\r\n\r\nconst {header_tittle, header_nav, header_nav_active} = s;\r\n\r\nconst Header = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const isLogin = useSelector<AppStoreType, boolean>(state => state.login.logIn);\r\n\r\n\r\n    const logOutClickHandler = () => {\r\n        dispatch(logOutTC())\r\n    }\r\n\r\n    return (\r\n        <div className={cn.over}>\r\n            <div className={cn.header}>\r\n                <div><FaReact className={cn.logo}/></div>\r\n                <div className={header_tittle}>\r\n                    <NavLink to={PATH.CREATE_NEW_PASS} className={header_nav} activeClassName={header_nav_active}>Create\r\n                        new pass</NavLink>\r\n                    <NavLink to={PATH.ERROR_404} className={header_nav}\r\n                             activeClassName={header_nav_active}>error404</NavLink>\r\n                    <NavLink to={PATH.LOGIN} className={header_nav} activeClassName={header_nav_active}>login</NavLink>\r\n                    <NavLink to={PATH.PROFILE} className={header_nav}\r\n                             activeClassName={header_nav_active}> <FaRegUser className={cn.menuIcon}/> Profile</NavLink>\r\n                    <NavLink to={PATH.RECOVER_PASS} className={header_nav} activeClassName={header_nav_active}>recover\r\n                        pass</NavLink>\r\n                    <NavLink to={PATH.REGISTRATION} className={header_nav}\r\n                             activeClassName={header_nav_active}>registration</NavLink>\r\n                    <NavLink to={PATH.TEST} className={header_nav} activeClassName={header_nav_active}>test</NavLink>\r\n                    <NavLink to={PATH.CARDS_TABLET} className={header_nav} activeClassName={header_nav_active}>cardsTablet</NavLink>\r\n\r\n                </div>\r\n                {isLogin && <div><SuperButton onClick={logOutClickHandler}>Logout</SuperButton></div>}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import {Dispatch} from 'redux';\r\nimport {authAPI} from '../../dal/Api';\r\nimport {setProfile} from './profile-reducer';\r\nimport {logInTrue, setLoginError} from './login-reducer';\r\n\r\n\r\nconst SET_IS_INITIALIZED = 'AppReducer/SET_IS_INITIALIZED';\r\n\r\n\r\nexport const SetIsInitialized = (newInitializedStatus: IsInitializedStatusType) => ({\r\n    type: 'AppReducer/SET_IS_INITIALIZED' as const,\r\n    newInitializedStatus\r\n});\r\n\r\n\r\nlet InitialState = {\r\n    isInitialized: 'loading' as IsInitializedStatusType\r\n}\r\n\r\nexport type InitialStateLoginType = typeof InitialState\r\n\r\nexport const AppReducer = (state: InitialStateLoginType = InitialState, action: ProfileReducerActionType): InitialStateLoginType => {\r\n    switch (action.type) {\r\n        case SET_IS_INITIALIZED :\r\n            return {...state, isInitialized: action.newInitializedStatus}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const AuthMe = () => {\r\n    return (dispatch: Dispatch) => {\r\n\r\n        authAPI.authMe()\r\n            .then(res => {\r\n                    dispatch(setProfile(res.data))\r\n                    dispatch(logInTrue(true))\r\n                    dispatch(SetIsInitialized('success'))\r\n\r\n                }\r\n            )\r\n            .catch(error => {\r\n                const errMsg = error.response ? error.response.data.error\r\n                    : (error.message + ', more details in the console');\r\n                if(errMsg!='you are not authorized /ᐠ-ꞈ-ᐟ\\\\') {\r\n                    dispatch(setLoginError(errMsg))\r\n                }\r\n                dispatch(SetIsInitialized('notInitialized'))\r\n            })\r\n    }\r\n}\r\n\r\n\r\n//types\r\n\r\nexport type IsInitializedStatusType = 'loading' | 'success' | 'notInitialized'\r\n\r\nexport type setInitializedType = ReturnType<typeof SetIsInitialized>\r\n\r\nexport type ProfileReducerActionType = setInitializedType\r\n\r\nexport default AppReducer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport Header from './header/header';\r\nimport {Routes} from './routes/Routes';\r\nimport {AppStoreType} from '../bll/store/store';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AuthMe, IsInitializedStatusType} from '../bll/redusers/app-reducer';\r\nimport {Preloader} from './common/Preloader/Preloader';\r\n\r\n// +_+\r\n\r\n\r\n// +_+\r\nconst App = () => {\r\n    const isInitialized = useSelector<AppStoreType, IsInitializedStatusType>(state => state.app.isInitialized)\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(AuthMe())\r\n    }, [])\r\n\r\n\r\n    if (isInitialized === 'loading') {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            <Routes/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {EnterNewPassReducer} from '../redusers/enterNewPass-reducer';\r\nimport {LoginReducer} from '../redusers/login-reducer';\r\nimport {TestReducer} from '../redusers/test-reducer';\r\nimport {RecoverPassReducer} from '../redusers/recoverPass-reducer';\r\nimport {RegistrationReducer} from '../redusers/registration-reducer';\r\nimport {Error404Reducer} from '../redusers/error404-reducer';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport ProfileReducer from '../redusers/profile-reducer';\r\nimport {AppReducer} from '../redusers/app-reducer';\r\nimport TabletReducer from '../redusers/tablet-reducer';\r\nimport CardReducer from '../redusers/card-reducer';\r\n\r\n\r\nconst reducers = combineReducers({\r\n    enterNewPass: EnterNewPassReducer,\r\n    login: LoginReducer,\r\n    test: TestReducer,\r\n    recoverPass: RecoverPassReducer,\r\n    registration: RegistrationReducer,\r\n    error404: Error404Reducer,\r\n    profile: ProfileReducer,\r\n    app: AppReducer,\r\n    tablet: TabletReducer,\r\n    card: CardReducer\r\n})\r\n\r\n\r\nconst store = createStore(reducers, composeWithDevTools(applyMiddleware(thunkMiddleware),))\r\n\r\n\r\nexport type AppStoreType = ReturnType<typeof reducers>\r\n\r\n\r\nexport default store\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store","\r\n\r\n\r\n\r\n\r\n\r\nexport const EnterNewPassReducer = (state: any={}, action: any) => {\r\n\r\n            return state\r\n    }\r\n","\r\n\r\n\r\nexport const TestReducer = (state: any={}, action: any) => {\r\n\r\n    return state\r\n}\r\n","\r\n\r\n\r\nexport const Error404Reducer = (state: any={}, action: any) => {\r\n\r\n    return state\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './main/ui/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {Provider} from 'react-redux';\r\nimport store from './main/bll/store/store';\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n    <App />\r\n   </Provider>\r\n  </React.StrictMode>\r\n    </HashRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"over\":\"header_over__1HLph\",\"logo\":\"header_logo__2uIDE\",\"header\":\"header_header__1yRgS\",\"header_tittle\":\"header_header_tittle__3JxBO\",\"menuIcon\":\"header_menuIcon__1_wu_\",\"header_nav\":\"header_header_nav__3G-jk\",\"header_nav_active\":\"header_header_nav_active__sH-CJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"autorization\":\"ResponsePage_autorization__4GJHd\",\"form\":\"ResponsePage_form__4-Ca6\",\"hTit\":\"ResponsePage_hTit__1W79R\",\"tit\":\"ResponsePage_tit__12CGa\",\"imgMailSent\":\"ResponsePage_imgMailSent__1BkBF\",\"infText\":\"ResponsePage_infText__2phwX\",\"linkforgot\":\"ResponsePage_linkforgot__2Bb9K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"group\":\"SuperInputText_group__3qDwJ\",\"bar\":\"SuperInputText_bar__VxtwI\",\"highlight\":\"SuperInputText_highlight__iwiHC\",\"inputHighlighter\":\"SuperInputText_inputHighlighter___pGzO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"autorization\":\"Login_autorization__1hqT6\",\"form\":\"Login_form__3xakk\",\"hTit\":\"Login_hTit__41TBh\",\"tit\":\"Login_tit__2rEuJ\",\"linkforgot\":\"Login_linkforgot__oTByR\",\"overforgot\":\"Login_overforgot__1wK63\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"autorization\":\"profile_autorization__1mBsj\",\"form\":\"profile_form__1pDGq\",\"hTit\":\"profile_hTit__16tt0\",\"tit\":\"profile_tit__29fjK\",\"ava_img\":\"profile_ava_img__14Xro\",\"nameProfile\":\"profile_nameProfile__3Uq8P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"autorization\":\"recoverPass_autorization__25OjP\",\"form\":\"recoverPass_form__83iBH\",\"hTit\":\"recoverPass_hTit__10ml0\",\"tit\":\"recoverPass_tit__3D-5-\",\"linkforgot\":\"recoverPass_linkforgot__3hksA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"autorization\":\"registation_autorization__1zULC\",\"form\":\"registation_form__2kZb9\",\"hTit\":\"registation_hTit__U2AQU\",\"tit\":\"registation_tit__1Yhje\",\"linkforgot\":\"registation_linkforgot__159EK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"autorization\":\"EditProfile_autorization__nrPYc\",\"form\":\"EditProfile_form__1ST_n\",\"hTit\":\"EditProfile_hTit__37UUs\",\"tit\":\"EditProfile_tit__3Iju1\",\"ava_img\":\"EditProfile_ava_img__2du8b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"autorization\":\"setNewPassword_autorization__2kpM6\",\"form\":\"setNewPassword_form__1EVaR\",\"hTit\":\"setNewPassword_hTit__kBGPr\",\"tit\":\"setNewPassword_tit__33Duj\",\"linkforgot\":\"setNewPassword_linkforgot__1e3hy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__WnAx4\",\"red\":\"SuperButton_red__2Ek9W\",\"disableClass\":\"SuperButton_disableClass__2GPXd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnGroup\":\"Paginator_btnGroup__oav0M\",\"page\":\"Paginator_page__1V56A\",\"pageSelect\":\"Paginator_pageSelect__14oSi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"err404\":\"error404_err404__GI_XR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__1HzG7\",\"load4\":\"Preloader_load4__LaTT8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"test_component\":\"card_test_component__dLg81\",\"profile\":\"card_profile__km4Li\",\"user\":\"card_user__2xKYL\",\"user_card\":\"card_user_card__1T5dm\",\"logo\":\"card_logo__4Por9\",\"name\":\"card_name__1kHkS\",\"about\":\"card_about__1wvBX\",\"polz\":\"card_polz__3-NoP\",\"polztit\":\"card_polztit__23IIG\",\"table\":\"card_table__3qxty\",\"tit\":\"card_tit__3exBe\",\"inp\":\"card_inp__1rntG\",\"mainTab\":\"card_mainTab__2bFH5\",\"rangeValues\":\"card_rangeValues__sTr4C\",\"activeBtn\":\"card_activeBtn__2atwb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"SuperSelect_select__2RGK8\"};"],"sourceRoot":""}