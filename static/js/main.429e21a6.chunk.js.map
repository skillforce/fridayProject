{"version":3,"sources":["main/ui/header/header.module.css","main/ui/common/ResponsePage/ResponsePage.module.css","main/ui/common/c1-SuperInputText/SuperInputText.module.css","main/ui/pages/login/Login.module.css","main/ui/pages/profile/profile.module.css","main/ui/pages/recoverPass/recoverPass.module.css","main/ui/pages/registration/registation.module.css","main/ui/pages/profile/EditProfile/EditProfile.module.css","main/ui/pages/test/test.module.css","main/ui/pages/setNewPassword/setNewPassword.module.css","main/ui/common/c2-SuperButton/SuperButton.module.css","main/ui/common/c3-SuperCheckbox/SuperCheckbox.module.css","main/ui/pages/error404/error404.module.css","main/ui/common/Preloader/Preloader.module.css","main/ui/pages/error404/404ErrImg/notfound.gif","main/ui/pages/error404/error404.tsx","main/ui/common/c1-SuperInputText/SuperInputText.tsx","main/ui/common/c2-SuperButton/SuperButton.tsx","main/dal/Api.tsx","main/bll/redusers/profile-reducer.tsx","main/bll/redusers/login-reducer.tsx","main/bll/redusers/registration-reducer.tsx","main/ui/common/ErrorWindow/ErrorWindow.tsx","main/ui/common/Preloader/Preloader.tsx","main/bll/redusers/recoverPass-reducer.tsx","main/ui/pages/login/login.tsx","main/ui/pages/profile/EmptyAva.png","main/ui/pages/profile/EditProfile/EditProfile.tsx","main/ui/pages/profile/profile.tsx","main/ui/common/ResponsePage/mail.png","main/ui/common/ResponsePage/error.png","main/ui/common/ResponsePage/success.png","main/ui/common/ResponsePage/ResponsePage.tsx","main/ui/pages/recoverPass/recoverPass.tsx","main/ui/pages/registration/registration.tsx","main/ui/common/c3-SuperCheckbox/SuperCheckbox.tsx","main/ui/pages/test/test.tsx","main/ui/pages/setNewPassword/setNewPassword.tsx","main/ui/routes/Routes.tsx","main/ui/header/header.tsx","main/bll/redusers/app-reducer.tsx","main/ui/App.tsx","reportWebVitals.ts","main/bll/store/store.tsx","main/bll/redusers/enterNewPass-reducer.tsx","main/bll/redusers/test-reducer.tsx","main/bll/redusers/error404-reducer.tsx","index.tsx"],"names":["module","exports","err404","s","Error404","className","src","errImg","alt","superInput","errorInput","SuperInputText","type","onChange","onChangeText","onKeyPress","onEnter","error","label","restProps","spanClassName","finalInputClassName","value","cn","group","required","e","currentTarget","key","placeholder","highlight","bar","SuperButton","red","disabled","onClick","finalClassName","default","isDisabledClass","disableClass","settings","withCredentials","instance","axios","create","baseURL","instanceHeroky","authAPI","data","post","delete","profileAPI","put","SET_PROFILE","setProfile","profile","InitialState","_id","email","name","avatar","publicCardPacksCount","created","updated","isAdmin","verified","rememberMe","ProfileReducer","state","action","LOGIN_USER_TRUE","SET_LOGIN_ERROR","SET_LOADING","logInTrue","newLoginStatus","setLoginError","ErrorMSG","setIsLoading","newLoadingStatus","logIn","logInError","isLoading","LoginReducer","REG_CORRECT","REG_ERROR","SET_PROGRESS","setIsValidReg","newStatus","setSignUpError","setSignUpProgress","NewProgress","isValidReg","signUpProgress","SignUpError","RegistrationReducer","ErrorWindow","props","isEmptyEmailMsg","style","color","isEmptyPassMsg","isEmptyPass1Msg","isEmptyNameError","isEmptyUrlError","minLengthEmailMsg","minLengthPassMsg","maxLengthPassMsg","isValidEmailMsg","isPasswordCorrectReEnter","loader","Preloader","SET_IS_MESSAGE_SEND","SET_ERROR_MESSAGE","SetIsMessageSend","SetErrorRecoveryPassMessage","newMess","isMessageSend","ErrorMessageRecoveryPassword","RecoverPassReducer","useInput","initialValue","validator","useState","setValue","touched","setTouched","valid","isEmpty","setIsEmpty","minLengthError","setMinLengthError","maxLengthError","setMaxLengthError","isValidEmailError","setIsValidEmailError","inputValid","setInputValid","useEffect","length","test","String","toLowerCase","useValidator","hasOwnProperty","target","onBlur","t","Login","minLength","maxLength","isValidEmail","password","isLoginDisabled","dispatch","useDispatch","ErrorRequestMsg","useSelector","login","isLogin","to","PATH","PROFILE","autorization","form","hTit","tit","linkforgot","RECOVER_PASS","REGISTRATION","requestData","then","res","catch","errMsg","response","message","finally","logInTC","width","marginTop","marginBottom","EditProfile","onClickHandler","nameInput","avatarInput","saveClickHandler","newName","newAva","Data","updatedUser","LOGIN","ava_img","EmptyAva","Profile","isEditMode","setIsEditMode","nameProfile","imgMailSent","infText","ResponsePage","typeOfPage","mail","success","RecoverPass","isMessageSentStatus","recoverPass","from","setTimeout","Registration","password1","isPasswordDublicate","isCorrectReg","registration","SignUpErrorMsg","SignUpTC","SuperCheckbox","onChangeChecked","children","checkbox","newCheckedStatus","checked","test_component","bth_group","input_group","checkbox_group","Test","setChecked","text","setText","alert","SetNewPassword","token","useParams","resetPasswordToken","ERROR_404","TEST","CREATE_NEW_PASS","Routes","path","exact","render","header_tittle","header_nav","header_nav_active","Header","over","header","logo","activeClassName","menuIcon","SET_IS_INITIALIZED","SetIsInitialized","newInitializedStatus","isInitialized","AppReducer","App","app","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","enterNewPass","error404","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.429e21a6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"over\":\"header_over__3s2rP\",\"logo\":\"header_logo__1fk3g\",\"header\":\"header_header__tVpJo\",\"header_tittle\":\"header_header_tittle__1q0Br\",\"menuIcon\":\"header_menuIcon__12csc\",\"header_nav\":\"header_header_nav__24qu2\",\"header_nav_active\":\"header_header_nav_active__1_DUk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"autorization\":\"ResponsePage_autorization__1vHaE\",\"form\":\"ResponsePage_form__3fKcW\",\"hTit\":\"ResponsePage_hTit__1sG5f\",\"tit\":\"ResponsePage_tit__VtxIn\",\"imgMailSent\":\"ResponsePage_imgMailSent__846G5\",\"infText\":\"ResponsePage_infText__2sOGz\",\"linkforgot\":\"ResponsePage_linkforgot__11n_v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"group\":\"SuperInputText_group__2FIMM\",\"bar\":\"SuperInputText_bar__1qdVa\",\"highlight\":\"SuperInputText_highlight__3tJ8R\",\"inputHighlighter\":\"SuperInputText_inputHighlighter__3HjP1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"autorization\":\"Login_autorization__1qEuo\",\"form\":\"Login_form__GYdiv\",\"hTit\":\"Login_hTit__1ZhUs\",\"tit\":\"Login_tit__CUeBB\",\"linkforgot\":\"Login_linkforgot__IEovN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"autorization\":\"profile_autorization__1d987\",\"form\":\"profile_form__2MZSL\",\"hTit\":\"profile_hTit__jxM_7\",\"tit\":\"profile_tit__1Dr8G\",\"ava_img\":\"profile_ava_img__DaPCt\",\"nameProfile\":\"profile_nameProfile__Z7TVR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"autorization\":\"recoverPass_autorization__3La7f\",\"form\":\"recoverPass_form__3jlVD\",\"hTit\":\"recoverPass_hTit__2f-28\",\"tit\":\"recoverPass_tit__7T60K\",\"linkforgot\":\"recoverPass_linkforgot__195iw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"autorization\":\"registation_autorization__39ZAy\",\"form\":\"registation_form__1F05t\",\"hTit\":\"registation_hTit__K1t-A\",\"tit\":\"registation_tit__3v62l\",\"linkforgot\":\"registation_linkforgot__PR_TR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"autorization\":\"EditProfile_autorization__17eue\",\"form\":\"EditProfile_form__2i6aP\",\"hTit\":\"EditProfile_hTit__2_hLA\",\"tit\":\"EditProfile_tit__2gmlX\",\"ava_img\":\"EditProfile_ava_img__2yc6_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"test_component\":\"test_test_component__hXlio\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"autorization\":\"setNewPassword_autorization__3ESJn\",\"form\":\"setNewPassword_form__296sr\",\"hTit\":\"setNewPassword_hTit__kwql2\",\"tit\":\"setNewPassword_tit__2j_or\",\"linkforgot\":\"setNewPassword_linkforgot__1cuuc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__HO61J\",\"red\":\"SuperButton_red__1C2W2\",\"disableClass\":\"SuperButton_disableClass__2VWRR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__1Ml_a\",\"spanClassName\":\"SuperCheckbox_spanClassName__3CsxZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"err404\":\"error404_err404__2acUt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__8PjFt\",\"load4\":\"Preloader_load4__3vrnk\"};","export default __webpack_public_path__ + \"static/media/notfound.52f5b072.gif\";","import React from 'react';\r\nimport errImg from './404ErrImg/notfound.gif';\r\nimport s from './error404.module.css';\r\n\r\nconst{err404}=s;\r\n\r\nconst Error404 = () => {\r\n    return (\r\n        <div className={err404}>\r\n            <img src={errImg} alt=\"ErrorImg\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Error404;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './SuperInputText.module.css'\r\nimport cn from './SuperInputText.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: (e: React.KeyboardEvent<HTMLInputElement>) => void\r\n    error?: string\r\n    spanClassName?: string\r\n    label: string\r\n}\r\n\r\nconst {superInput, errorInput} = s;\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        label,\r\n        className, spanClassName,\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter(e) // то вызвать его\r\n    }\r\n\r\n\r\n    const finalInputClassName = restProps.value ? superInput : errorInput;\r\n\r\n\r\n    return (\r\n\r\n    <div className={cn.group}>\r\n        <input\r\n               required\r\n               onChange={onChangeCallback}\r\n               onKeyPress={onKeyPressCallback}\r\n               className={finalInputClassName}\r\n               placeholder={error}\r\n               {...restProps}\r\n        />\r\n            <span className={cn.highlight}></span>\r\n            <span className={cn.bar}></span>\r\n            <label>{label}</label>\r\n    </div>\r\n\r\n    )\r\n}\r\n\r\nexport default SuperInputText\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './SuperButton.module.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n    disabled?: boolean\r\n    onClick?: () => void\r\n    filter?: string\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className, disabled, onClick,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${red ? s.red : s.default} ${className}`\r\n    const isDisabledClass = `${disabled ? s.disableClass : finalClassName}`\r\n\r\n    return (\r\n        <button\r\n            onClick={onClick}\r\n            disabled={disabled}\r\n            className={isDisabledClass}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n}\r\n\r\nexport default SuperButton\r\n","import axios from 'axios'\r\n\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    ...settings\r\n})\r\n\r\nconst instanceHeroky = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    ...settings\r\n})\r\n\r\n// api\r\n\r\nexport type RequestDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport type SignUpDataRequestType = {\r\n    email: string\r\n    password: string\r\n}\r\nexport type forgotPassDataType = {\r\n    email: string\r\n    from: string\r\n    message:string\r\n}\r\nexport type newPassDataType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\nexport type SetProfileType = {\r\n    name: string\r\n    avatar: string\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const authAPI = {\r\n    login(data: RequestDataType) {\r\n        return instance.post('/auth/login', data);\r\n    },\r\n    logOut() {\r\n        return instance.delete('/auth/me');\r\n    },\r\n    signUp(data: SignUpDataRequestType) {\r\n        return instance.post('/auth/register', data);\r\n    },\r\n    authMe() {\r\n        return instance.post('auth/me');\r\n    },\r\n    forgotPass(data:forgotPassDataType) {\r\n        return instanceHeroky.post('/auth/forgot',data);\r\n    },\r\n    setNewPass(data:newPassDataType) {\r\n        return instanceHeroky.post('/auth/set-new-password',data);\r\n    },\r\n}\r\n\r\nexport const profileAPI ={\r\n    setProfile(data:SetProfileType){\r\n        return instanceHeroky.put('/auth/me',data);\r\n    }\r\n}\r\n","import {profileAPI, SetProfileType} from '../../dal/Api';\r\nimport {Dispatch} from 'redux';\r\nimport {logInTrue, setIsLoading, setLoginError} from './login-reducer';\r\n\r\nconst SET_PROFILE = 'ProfileReducer/SET_PROFILE';\r\n\r\nexport type ProfileResponseType = {\r\n    _id: string | null;\r\n    email: string | null;\r\n    name: string | null\r\n    avatar?: string | null\r\n    publicCardPacksCount: number | null// количество колод\r\n    created: Date | null\r\n    updated: Date | null\r\n    isAdmin: boolean | null\r\n    verified: boolean | null // подтвердил ли почту\r\n    rememberMe: boolean | null\r\n    error?: string | null\r\n}\r\n\r\n\r\nexport const setProfile = (profile: ProfileResponseType) => ({type: 'ProfileReducer/SET_PROFILE' as const, profile});\r\n\r\n\r\nlet InitialState = {\r\n    profile: {\r\n        _id: null as string | null,\r\n        email: null as string | null,\r\n        name: null as string | null,\r\n        avatar: null as string | null,\r\n        publicCardPacksCount: null as number | null, // количество колод\r\n        created: null as Date | null,\r\n        updated: null as Date | null,\r\n        isAdmin: null as boolean | null,\r\n        verified: null as boolean | null,// подтвердил ли почту\r\n        rememberMe: null as boolean | null,\r\n        error: null as string | null,\r\n    }\r\n}\r\n\r\nexport type InitialStateLoginType = typeof InitialState\r\n\r\nexport const EditProfileTC = (Data: SetProfileType) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setIsLoading(true))\r\n        profileAPI.setProfile(Data)\r\n            .then(res => {\r\n                    dispatch(setProfile(res.data.updatedUser))\r\n                    dispatch(logInTrue(true))\r\n                }\r\n            )\r\n            .catch(error => {\r\n                const errMsg = error.response ? error.response.data.error\r\n                    : (error.message + ', more details in the console');\r\n                dispatch(setLoginError(errMsg))\r\n            })\r\n            .finally(() => {\r\n                    dispatch(setIsLoading(false))\r\n                }\r\n            )\r\n    }\r\n}\r\n\r\n\r\nexport const ProfileReducer = (state: InitialStateLoginType = InitialState, action: ProfileReducerActionType): InitialStateLoginType => {\r\n    switch (action.type) {\r\n        case SET_PROFILE :\r\n            return {...state, profile: {...state.profile, ...action.profile}}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n//types\r\n\r\nexport type setProfileType = ReturnType<typeof setProfile>\r\n\r\nexport type ProfileReducerActionType = setProfileType\r\n\r\nexport default ProfileReducer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {Dispatch} from 'redux';\r\nimport {authAPI, RequestDataType} from '../../dal/Api';\r\nimport {setProfile} from './profile-reducer';\r\n\r\n\r\nconst LOGIN_USER_TRUE = 'LoginPageReducer/LOGIN_TRUE';\r\nconst SET_LOGIN_ERROR = 'LoginPageReducer/SET_LOGIN_ERROR';\r\nconst SET_LOADING = 'LoginPageReducer/SET_LOADING';\r\n\r\n\r\nexport const logInTrue = (newLoginStatus: boolean) => ({type: 'LoginPageReducer/LOGIN_TRUE' as const, newLoginStatus});\r\nexport const setLoginError = (ErrorMSG: string) => ({type: 'LoginPageReducer/SET_LOGIN_ERROR' as const, ErrorMSG});\r\nexport const setIsLoading = (newLoadingStatus: boolean) => ({\r\n    type: 'LoginPageReducer/SET_LOADING' as const,\r\n    newLoadingStatus\r\n});\r\n\r\n\r\nlet InitialState = {\r\n    logIn: false,\r\n    logInError: '',\r\n    isLoading: false\r\n}\r\n\r\ntype InitialStateLoginType = typeof InitialState\r\n\r\nexport const LoginReducer = (state: InitialStateLoginType = InitialState, action: LoginReducerActionType): InitialStateLoginType => {\r\n    switch (action.type) {\r\n        case LOGIN_USER_TRUE :\r\n            return {...state, logIn: action.newLoginStatus}\r\n        case SET_LOGIN_ERROR :\r\n            return {...state, logInError: action.ErrorMSG}\r\n        case SET_LOADING :\r\n            return {...state, isLoading: action.newLoadingStatus}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const logInTC = (requestData: RequestDataType) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setIsLoading(true))\r\n        authAPI.login(requestData)\r\n            .then(res => {\r\n                    dispatch(setProfile(res.data))\r\n                    dispatch(logInTrue(true))\r\n                }\r\n            )\r\n            .catch(error => {\r\n                const errMsg = error.response ? error.response.data.error\r\n                    : (error.message + ', more details in the console');\r\n                dispatch(setLoginError(errMsg))\r\n\r\n            })\r\n            .finally(() => {\r\n                    dispatch(setIsLoading(false))\r\n                }\r\n            )\r\n    }\r\n}\r\nexport const logOutTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setIsLoading(true))\r\n        authAPI.logOut()\r\n            .then(res => {\r\n\r\n                    dispatch(setProfile({\r\n                        _id: null,\r\n                        email: null,\r\n                        name: null,\r\n                        avatar: null,\r\n                        publicCardPacksCount: null,\r\n                        created: null,\r\n                        updated: null,\r\n                        isAdmin: null,\r\n                        verified: null,\r\n                        rememberMe: null,\r\n                        error: null\r\n                    }))\r\n                dispatch(logInTrue(false))\r\n                }\r\n            )\r\n            .catch(error => {\r\n                const errMsg = error.response ? error.response.data.error\r\n                    : (error.message + ', more details in the console');\r\n                dispatch(setLoginError(errMsg))\r\n            })\r\n            .finally(() => {\r\n                    dispatch(setIsLoading(false))\r\n                }\r\n            )\r\n    }\r\n}\r\n\r\n//types\r\n\r\nexport type LogInTrueType = ReturnType<typeof logInTrue>\r\nexport type SetLoginErrorType = ReturnType<typeof setLoginError>\r\nexport type SetLoadingType = ReturnType<typeof setIsLoading>\r\n\r\n\r\nexport type LoginReducerActionType = LogInTrueType | SetLoginErrorType | SetLoadingType\r\n\r\nexport default LoginReducer;\r\n","import {Dispatch} from 'redux';\r\nimport {authAPI, SignUpDataRequestType} from '../../dal/Api';\r\nimport {setIsLoading} from './login-reducer';\r\n\r\n\r\nconst REG_CORRECT = 'RegistrationReducer/REG_CORRECT';\r\nconst REG_ERROR = 'RegistrationReducer/REG_ERROR'\r\nconst SET_PROGRESS = 'RegistrationReducer/SET_PROGRESS'\r\n\r\n\r\nexport const setIsValidReg = (newStatus: boolean) => ({type: 'RegistrationReducer/REG_CORRECT' as const, newStatus});\r\nexport const setSignUpError = (ErrorMSG: string) => ({type: 'RegistrationReducer/REG_ERROR' as const, ErrorMSG});\r\nexport const setSignUpProgress = (NewProgress: NewProgressType) => ({\r\n    type: 'RegistrationReducer/SET_PROGRESS' as const,\r\n    NewProgress\r\n});\r\n\r\n\r\nlet InitialState = {\r\n    isValidReg: false,\r\n    signUpProgress: 'loading' as NewProgressType,\r\n    SignUpError: '',\r\n}\r\n\r\ntype InitialStateLoginType = typeof InitialState\r\n\r\nexport const RegistrationReducer = (state: InitialStateLoginType = InitialState, action: RegistrationReducerActionType): InitialStateLoginType => {\r\n    switch (action.type) {\r\n        case REG_CORRECT :\r\n            return {...state, isValidReg: action.newStatus}\r\n        case REG_ERROR :\r\n            return {...state, SignUpError: action.ErrorMSG}\r\n        case SET_PROGRESS :\r\n            return {...state, signUpProgress: action.NewProgress}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const SignUpTC = (requestData: SignUpDataRequestType) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setIsLoading(true))\r\n        authAPI.signUp(requestData)\r\n            .then(res => {\r\n                    dispatch(setIsValidReg(true))\r\n                    dispatch(setSignUpProgress('success'))\r\n                }\r\n            )\r\n            .catch(error => {\r\n                const errMsg = error.response ? error.response.data.error\r\n                    : (error.message + ', more details in the console');\r\n                dispatch(setSignUpProgress('error'))\r\n                dispatch(setSignUpError(errMsg))\r\n            })\r\n            .finally(() => {\r\n                    setTimeout(() => {\r\n                        dispatch(setIsLoading(false))\r\n                        dispatch(setSignUpProgress('loading'))\r\n                    }, 3000)\r\n                }\r\n            )\r\n    }\r\n\r\n}\r\n\r\n//types\r\n\r\nexport type setIsValidRegType = ReturnType<typeof setIsValidReg>\r\nexport type setSignUpErrorType = ReturnType<typeof setSignUpError>\r\nexport type setProgressType = ReturnType<typeof setSignUpProgress>\r\n\r\n\r\nexport type NewProgressType = 'loading' | 'success' | 'error'\r\n\r\n\r\nexport type RegistrationReducerActionType = setIsValidRegType | setSignUpErrorType | setProgressType\r\n\r\nexport default RegistrationReducer;\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\n\r\ntype ErrorWindowPropsType = {\r\n    isEmptyEmailMsg?:boolean\r\n    isEmptyPassMsg?:boolean\r\n    isEmptyPass1Msg?:boolean\r\n    minLengthEmailMsg?:boolean\r\n    minLengthPassMsg?:boolean\r\n    maxLengthPassMsg?:boolean\r\n    isValidEmailMsg?:boolean\r\n    isPasswordCorrectReEnter?:boolean\r\n    isEmptyNameError?:boolean\r\n    isEmptyUrlError?:boolean\r\n}\r\n\r\n\r\nexport const ErrorWindow=(props:ErrorWindowPropsType)=>{\r\n\r\n    return(\r\n        <div>\r\n            {props.isEmptyEmailMsg &&  <div style={{color: 'red'}}>Email field should be stuffed</div> }\r\n            {props.isEmptyPassMsg &&  <div style={{color: 'red'}}>Password field should be stuffed</div> }\r\n            {props.isEmptyPass1Msg &&  <div style={{color: 'red'}}>Password field should be stuffed</div> }\r\n            {props.isEmptyNameError &&  <div style={{color: 'red'}}>Name field should be stuffed</div> }\r\n            {props.isEmptyUrlError &&  <div style={{color: 'red'}}>URL field should be stuffed</div> }\r\n            {props.minLengthEmailMsg &&  <div style={{color: 'red'}}>Minimal length of email should be more than 3 symbols</div> }\r\n            {props.minLengthPassMsg &&  <div style={{color: 'red'}}>Minimal length of password should be more than 8 symbols</div> }\r\n            {props.maxLengthPassMsg &&  <div style={{color: 'red'}}>Maximal length of password should be low than 20 symbols</div> }\r\n            {props.isValidEmailMsg &&  <div style={{color: 'red'}}>Invalid email</div> }\r\n            {props.isPasswordCorrectReEnter &&  <div style={{color: 'red'}}>Entered passwords doesn't match</div> }\r\n        </div>\r\n    )\r\n}","import s from './Preloader.module.css';\r\nimport React from 'react';\r\n\r\nconst{loader}=s\r\n\r\nexport const Preloader =()=>{\r\n\r\n    return(\r\n        <div>\r\n            <div className={loader}>Loading...</div>\r\n        </div>\r\n    )\r\n\r\n\r\n}","import {Dispatch} from 'redux';\r\nimport {authAPI, forgotPassDataType, newPassDataType} from '../../dal/Api';\r\nimport {setIsLoading} from './login-reducer';\r\nimport {setSignUpProgress} from './registration-reducer';\r\n\r\n\r\nconst SET_IS_MESSAGE_SEND = 'AppReducer/SET_IS_MESSAGE_SEND';\r\nconst SET_ERROR_MESSAGE = 'AppReducer/SET_ERROR_MESSAGE';\r\n\r\n\r\nexport const SetIsMessageSend = (newStatus: isMessageSentStatusType) => ({\r\n    type: 'AppReducer/SET_IS_MESSAGE_SEND' as const,\r\n    newStatus\r\n});\r\nexport const SetErrorRecoveryPassMessage = (newMess: string) => ({\r\n    type: 'AppReducer/SET_ERROR_MESSAGE' as const,\r\n    newMess\r\n});\r\n\r\n\r\nlet InitialState = {\r\n    isMessageSend: 'error' as isMessageSentStatusType,\r\n    ErrorMessageRecoveryPassword: '' as string\r\n}\r\n\r\nexport type InitialStateLoginType = typeof InitialState\r\n\r\nexport const RecoverPassReducer = (state: InitialStateLoginType = InitialState, action: ProfileReducerActionType): InitialStateLoginType => {\r\n    switch (action.type) {\r\n        case SET_IS_MESSAGE_SEND :\r\n            return {...state, isMessageSend: action.newStatus}\r\n        case SET_ERROR_MESSAGE :\r\n            return {...state, ErrorMessageRecoveryPassword: action.newMess}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const SendMessage = (data: forgotPassDataType) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(SetIsMessageSend('loading'))\r\n        authAPI.forgotPass(data)\r\n            .then(res => {\r\n                    dispatch(SetIsMessageSend('sent'))\r\n                }\r\n            )\r\n            .catch(error => {\r\n                const errMsg = error.response ? error.response.data.error\r\n                    : (error.message + ', more details in the console');\r\n                dispatch(SetErrorRecoveryPassMessage(errMsg))\r\n                dispatch(SetIsMessageSend('error'))\r\n            })\r\n            .finally(() => {\r\n                    setTimeout(() => {\r\n                        dispatch(SetIsMessageSend('end'))\r\n                    }, 2000)\r\n                }\r\n            )\r\n    }\r\n}\r\nexport const CreateNewPassword = (data: newPassDataType) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(SetIsMessageSend('loading'))\r\n        authAPI.setNewPass(data)\r\n            .then(res => {\r\n                    dispatch(SetIsMessageSend('sent'))\r\n                }\r\n            )\r\n            .catch(error => {\r\n                const errMsg = error.response ? error.response.data.error\r\n                    : (error.message + ', more details in the console');\r\n                dispatch(SetErrorRecoveryPassMessage(errMsg))\r\n                dispatch(SetIsMessageSend('error'))\r\n            })\r\n            .finally(() => {\r\n                    setTimeout(() => {\r\n                        dispatch(SetIsMessageSend('end'))\r\n                    }, 2000)\r\n                }\r\n            )\r\n    }\r\n}\r\n\r\n\r\n//types\r\n\r\nexport type isMessageSentStatusType = 'sent' | 'loading' | 'error'|'end'\r\n\r\nexport type setIsMessageSendType = ReturnType<typeof SetIsMessageSend>\r\nexport type setErrorRecoveryPassMessageType = ReturnType<typeof SetErrorRecoveryPassMessage>\r\n\r\nexport type ProfileReducerActionType = setIsMessageSendType | setErrorRecoveryPassMessageType\r\n\r\nexport default RecoverPassReducer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport cn from './Login.module.css';\r\nimport SuperInputText from '../../common/c1-SuperInputText/SuperInputText';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport SuperButton from '../../common/c2-SuperButton/SuperButton';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {logInTC, setLoginError} from '../../../bll/redusers/login-reducer';\r\nimport {AppStoreType} from '../../../bll/store/store';\r\nimport {PATH} from '../../routes/Routes';\r\nimport {setIsValidReg} from '../../../bll/redusers/registration-reducer';\r\nimport {ErrorWindow} from '../../common/ErrorWindow/ErrorWindow';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {SetIsMessageSend} from '../../../bll/redusers/recoverPass-reducer';\r\n\r\n\r\ntype ValidatorType = {\r\n    isEmpty: boolean\r\n    minLength: number\r\n    maxLength: number,\r\n    isValidEmail?: boolean\r\n}\r\n\r\nconst useValidator = (value: any, validator: ValidatorType) => {\r\n\r\n    const [isEmpty, setIsEmpty] = useState(true);\r\n    const [minLengthError, setMinLengthError] = useState(false);\r\n    const [maxLengthError, setMaxLengthError] = useState(false);\r\n    const [isValidEmailError, setIsValidEmailError] = useState(false);\r\n    const [inputValid, setInputValid] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        for (const valid in validator) {\r\n            switch (valid) {\r\n                case 'minLength':\r\n                    value.length < validator[valid] ? setMinLengthError(true) : setMinLengthError(false)\r\n                    break;\r\n                case 'isEmpty':\r\n                    value ? setIsEmpty(false) : setIsEmpty(true)\r\n                    break;\r\n                case 'maxLength':\r\n                    value.length > validator[valid] ? setMaxLengthError(true) : setMaxLengthError(false)\r\n                    break;\r\n                case 'isValidEmail':\r\n                    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n                    re.test(String(value).toLowerCase()) ? setIsValidEmailError(false) : setIsValidEmailError(true)\r\n                    break;\r\n            }\r\n        }\r\n    }, [value])\r\n\r\n\r\n    useEffect(() => {\r\n        if (isEmpty || minLengthError || maxLengthError || isValidEmailError) {\r\n            setInputValid(false)\r\n        } else {\r\n            setInputValid(true)\r\n        }\r\n    }, [isEmpty, minLengthError, maxLengthError, isValidEmailError])\r\n\r\n\r\n    return {\r\n        isEmpty,\r\n        minLengthError,\r\n        maxLengthError,\r\n        isValidEmailError,\r\n        inputValid\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport const useInput = (initialValue: any, validator: ValidatorType) => {\r\n    const [value, setValue] = useState(initialValue);\r\n    const [touched, setTouched] = useState(false);\r\n\r\n    const valid = useValidator(value, validator)\r\n\r\n    const onChange = (e: ChangeEvent<HTMLInputElement> | any) => {\r\n        if (e.hasOwnProperty('target')) {\r\n            setValue(e.target.value)\r\n        } else {\r\n            setValue(e)\r\n        }\r\n    }\r\n\r\n    const onBlur = (t: boolean) => {\r\n        setTouched(t)\r\n    }\r\n\r\n    return {\r\n        value,\r\n        touched,\r\n        onChange,\r\n        onBlur,\r\n        ...valid\r\n    }\r\n\r\n}\r\n\r\nconst Login = () => {\r\n\r\n    const email = useInput('', {isEmpty: true, minLength: 3, maxLength: 50, isValidEmail: false});\r\n    const password = useInput('', {isEmpty: true, minLength: 7, maxLength: 20});\r\n    const rememberMe = useInput(false, {isEmpty: true, minLength: 7, maxLength: 20});\r\n\r\n    const isEmptyEmailMsg = email.touched && email.isEmpty;\r\n    const isEmptyPassMsg = password.touched && password.isEmpty\r\n    //проверка на пустоту\r\n\r\n    const minLengthEmailMsg = email.touched && email.minLengthError;\r\n    const minLengthPassMsg = password.touched && password.minLengthError;\r\n    // проверка на минимальную длинну\r\n\r\n    const isValidEmailMsg = email.touched && email.isValidEmailError;\r\n    const maxLengthPassMsg = password.touched && password.maxLengthError;\r\n    // проверка на валидность имейла и максимальную длинну пароля\r\n\r\n\r\n    const isLoginDisabled = !email.inputValid || !password.inputValid;\r\n    //отключаем кнопку если хоть одна ошибка есть\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const ErrorRequestMsg = useSelector<AppStoreType, string>(state => state.login.logInError);\r\n    const isLogin = useSelector<AppStoreType, boolean>(state => state.login.logIn);\r\n    const isLoading = useSelector<AppStoreType, boolean>(state => state.login.isLoading);\r\n\r\n\r\n    const onClickHandler = () => {\r\n        const requestData = {\r\n            email: email.value,\r\n            password: password.value,\r\n            rememberMe: rememberMe.value\r\n        }\r\n\r\n        dispatch(logInTC(requestData));\r\n        email.onChange('')\r\n        email.onBlur(false)\r\n        password.onChange('')\r\n        password.onBlur(false)\r\n        rememberMe.onChange(false)\r\n\r\n    }\r\n\r\n\r\n    const onClickForgotHandler=()=>{\r\n        dispatch(SetIsMessageSend('error')) //чтобы если вдруг после редиректа на логин из восстановления пароля пользователь решит снова зайти на забыл пароль\r\n    }\r\n\r\n    const signUpClickHandler = () => {\r\n        dispatch(setIsValidReg(false))\r\n    }\r\n\r\n\r\n    if (email.touched || email.value || password.touched || password.value) {\r\n        dispatch(setLoginError(''))\r\n    }\r\n\r\n\r\n    if (isLoading) {\r\n        return <Preloader/>\r\n    }\r\n\r\n\r\n    if (isLogin) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={cn.autorization}>\r\n            <div className={cn.form}>\r\n                <div className={cn.hTit}>\r\n                    It-incubator\r\n                </div>\r\n                <div className={cn.tit}>\r\n                    Login\r\n                </div>\r\n                <form action=\"\">\r\n                    {ErrorRequestMsg && <div style={{color:'red'}}>{ErrorRequestMsg}</div>}\r\n\r\n\r\n                    <ErrorWindow isEmptyEmailMsg={isEmptyEmailMsg} minLengthEmailMsg={minLengthEmailMsg}\r\n                                 isValidEmailMsg={isValidEmailMsg}/>\r\n\r\n\r\n                    <SuperInputText onChange={email.onChange} onBlur={() => {\r\n                        email.onBlur(true)\r\n                    }} value={email.value}\r\n                                    label={'Email'}/>\r\n\r\n                    <ErrorWindow isEmptyPassMsg={isEmptyPassMsg} minLengthPassMsg={minLengthPassMsg}\r\n                                 maxLengthPassMsg={maxLengthPassMsg}/>\r\n\r\n\r\n                    <SuperInputText onChange={password.onChange} onBlur={() => {\r\n                        password.onBlur(true)\r\n                    }} value={password.value}\r\n                                    label={'Password'} type={'password'}/>\r\n\r\n\r\n                    <input value={rememberMe.value} onChange={rememberMe.onChange} type={'checkbox'}/> remember me\r\n\r\n\r\n                    <NavLink onClick={onClickForgotHandler} className={cn.linkforgot} to={PATH.RECOVER_PASS}>Forgot password</NavLink>\r\n\r\n\r\n                    <div><NavLink onClick={signUpClickHandler} className={cn.linkforgot} to={PATH.REGISTRATION}>Sign\r\n                        up</NavLink></div>\r\n                    {/*Если пользователь который только что зарегался решит еще раз зарегаться нам нужно откатить IsValidRec в registration reducer*/}\r\n\r\n\r\n                    <SuperButton onClick={onClickHandler} disabled={isLoginDisabled}\r\n                                 style={{width: 280, marginTop: 80, marginBottom: 40}}>Login</SuperButton>\r\n\r\n\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n\r\n","export default __webpack_public_path__ + \"static/media/EmptyAva.832c8a5e.png\";","import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport cn from './EditProfile.module.css'\r\nimport EmptyAva from '../EmptyAva.png'\r\nimport {AppStoreType} from '../../../../bll/store/store';\r\nimport {EditProfileTC, InitialStateLoginType} from '../../../../bll/redusers/profile-reducer';\r\nimport {Preloader} from '../../../common/Preloader/Preloader';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {PATH} from '../../../routes/Routes';\r\nimport {useInput} from '../../login/login';\r\nimport SuperInputText from '../../../common/c1-SuperInputText/SuperInputText';\r\nimport {ErrorWindow} from '../../../common/ErrorWindow/ErrorWindow';\r\n\r\ntype EditModePropsType = {\r\n    onClickHandler: (newStatus: boolean) => void\r\n    isEditMode: boolean\r\n}\r\n\r\nconst EditProfile = (props: EditModePropsType) => {\r\n\r\n\r\n    const isLogin = useSelector<AppStoreType, boolean>(state => state.login.logIn);\r\n    const isLoading = useSelector<AppStoreType, boolean>(state => state.login.isLoading);\r\n    const profile = useSelector<AppStoreType, InitialStateLoginType>(state => state.profile)\r\n    const dispatch = useDispatch();\r\n\r\n    const {onClickHandler} = props\r\n\r\n    const {\r\n        _id,\r\n        email,\r\n        name,\r\n        avatar\r\n    } = profile.profile\r\n\r\n\r\n    const nameInput = useInput(name, {isEmpty: true, minLength: 3, maxLength: 50})\r\n    const avatarInput = useInput(avatar ? avatar : '', {isEmpty: true, minLength: 3, maxLength: 50})\r\n\r\n\r\n    const saveClickHandler = (newName: string, newAva: string) => {\r\n        const data = {\r\n            name: newName ? newName : '',\r\n            avatar: newAva ? newAva : ''\r\n        }\r\n        dispatch(EditProfileTC(data))\r\n        onClickHandler(false)\r\n    }\r\n\r\n\r\n    if (isLoading) {\r\n        return <Preloader/>\r\n    }\r\n\r\n\r\n    if (!isLogin) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    const isEmptyNameError = nameInput.isEmpty && nameInput.touched;\r\n    const isEmptyUrlError = avatarInput.isEmpty && avatarInput.touched;\r\n\r\n    return (\r\n        <div className={cn.form}>\r\n            <div className={cn.hTit}>\r\n                It-incubator\r\n            </div>\r\n            <ErrorWindow isEmptyNameError={isEmptyNameError}/>\r\n\r\n            <div>Name: <SuperInputText placeholder={nameInput.value ? '' : 'Enter your new nick name'} onChange={nameInput.onChange} onBlur={() => {\r\n                nameInput.onBlur(true)\r\n            }} value={nameInput.value} label={''}/></div>\r\n\r\n            <div className={cn.ava_img}><img src={avatar ? avatar : EmptyAva} alt=\"avatar\"/></div>\r\n            <ErrorWindow isEmptyUrlError={isEmptyUrlError}/>\r\n            <div>Avatar: <SuperInputText placeholder={avatarInput.value ? '' : 'Enter new image url'}\r\n                                         onChange={avatarInput.onChange} onBlur={() => {\r\n                avatarInput.onBlur(true)\r\n            }} value={avatarInput.value} label={''}/></div>\r\n            <div className={cn.tit}>\r\n                <div>Email:{email}</div>\r\n                <div>ID:{_id}</div>\r\n            </div>\r\n            <button disabled={!(nameInput.value && avatarInput.value)} onClick={() => {\r\n                saveClickHandler(nameInput.value, avatarInput.value)\r\n            }}>Save\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EditProfile;\r\n","import React, {useState} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppStoreType} from '../../../bll/store/store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {PATH} from '../../routes/Routes';\r\nimport {InitialStateLoginType} from '../../../bll/redusers/profile-reducer';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport cn from './profile.module.css';\r\nimport EmptyAva from './EmptyAva.png'\r\nimport EditProfile from './EditProfile/EditProfile';\r\n\r\n\r\nconst Profile = () => {\r\n\r\n    const isLogin = useSelector<AppStoreType, boolean>(state => state.login.logIn);\r\n    const ErrorRequestMsg = useSelector<AppStoreType, string>(state => state.login.logInError);\r\n    const isLoading = useSelector<AppStoreType, boolean>(state => state.login.isLoading);\r\n    const profile = useSelector<AppStoreType, InitialStateLoginType>(state => state.profile)\r\n\r\n\r\n    const[isEditMode, setIsEditMode]=useState(false)\r\n\r\n    const onClickHandler=(newStatus:boolean)=>{\r\n        setIsEditMode(newStatus)\r\n    }\r\n\r\n    const {\r\n        _id,\r\n        email,\r\n        name,\r\n        avatar,\r\n        publicCardPacksCount,\r\n        created,\r\n        updated,\r\n        isAdmin,\r\n        verified,\r\n        rememberMe,\r\n        error\r\n    } = profile.profile\r\n\r\n\r\n    if (isLoading) {\r\n        return <Preloader/>\r\n    }\r\n\r\n\r\n    if (!isLogin) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n\r\n    return (\r\n         <div className={cn.autorization}>\r\n             {!isEditMode &&<div className={cn.form}>\r\n                <div className={cn.hTit}>\r\n                    It-incubator\r\n                </div>\r\n                 <div className={cn.nameProfile}>{name}</div>\r\n                <div className={cn.ava_img}><img src={avatar? avatar : EmptyAva} alt=\"avator\"/></div>\r\n                <div className={cn.tit}>\r\n                    <div >Email:{email}</div>\r\n                    <div>ID:{_id}</div>\r\n                </div>\r\n                <button onClick={()=>{onClickHandler(true)}}>Edit profile</button>\r\n            </div>}\r\n             {isEditMode && <EditProfile onClickHandler={onClickHandler} isEditMode={isEditMode} />}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","export default __webpack_public_path__ + \"static/media/mail.4e31cb8b.png\";","export default __webpack_public_path__ + \"static/media/error.3b8bd8e7.png\";","export default __webpack_public_path__ + \"static/media/success.6ee71b34.png\";","import s from './ResponsePage.module.css';\r\nimport React from 'react';\r\nimport mail from './mail.png';\r\nimport error from './error.png';\r\nimport success from './success.png';\r\n\r\nimport {PATH} from '../../routes/Routes';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst{autorization,form,hTit,tit,imgMailSent,infText,linkforgot}=s;\r\n\r\n\r\n\r\ntype ResponsePagePropsType ={\r\n    email?:string\r\n    typeOfPage:'sent'|'error'|'success'\r\n}\r\n\r\n\r\n\r\nexport const ResponsePage =(props:ResponsePagePropsType)=>{\r\n    const{email,typeOfPage}=props;\r\n    return (\r\n         <div className={autorization}>\r\n             {typeOfPage==='sent'&& <div className={form}>\r\n                <div className={hTit}>\r\n                    It-incubator\r\n                </div>\r\n                <div className={tit}>\r\n                    Check Email\r\n                </div>\r\n                <div className={imgMailSent}>\r\n                <img src={mail} alt=\"mailSent\"/>\r\n            </div>\r\n                <div className={infText}>\r\n                    We've sent an Email with instruction to {email}\r\n                </div>\r\n                 <NavLink className={linkforgot} to={PATH.LOGIN}>Sign in</NavLink>\r\n            </div>}\r\n             {typeOfPage==='error'&& <div className={form}>\r\n                 <div className={hTit}>\r\n                     It-incubator\r\n                 </div>\r\n                 <div className={tit}>\r\n                     Some Error\r\n                 </div>\r\n                 <div className={imgMailSent}>\r\n                     <img src={error} alt=\"error\"/>\r\n                 </div>\r\n                 <div className={infText}>\r\n                     Happen some error, await a few seconds...\r\n                 </div>\r\n             </div>}\r\n             {typeOfPage==='success'&& <div className={form}>\r\n                 <div className={hTit}>\r\n                     It-incubator\r\n                 </div>\r\n                 <div className={tit}>\r\n                     Success!\r\n                 </div>\r\n                 <div className={imgMailSent}>\r\n                     <img src={success} alt=\"success\"/>\r\n                 </div>\r\n             </div>}\r\n        </div>)\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport cn from './recoverPass.module.css';\r\nimport SuperInputText from '../../common/c1-SuperInputText/SuperInputText';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport SuperButton from '../../common/c2-SuperButton/SuperButton';\r\nimport {PATH} from '../../routes/Routes';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStoreType} from '../../../bll/store/store';\r\nimport {useInput} from '../login/login';\r\nimport {isMessageSentStatusType, SendMessage} from '../../../bll/redusers/recoverPass-reducer';\r\nimport {setLoginError} from '../../../bll/redusers/login-reducer';\r\nimport {ErrorWindow} from '../../common/ErrorWindow/ErrorWindow';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {ResponsePage} from '../../common/ResponsePage/ResponsePage';\r\n\r\n\r\nconst RecoverPass = () => {\r\n    const email = useInput('', {isEmpty: true, minLength: 3, maxLength: 50, isValidEmail: false});\r\n    const dispatch = useDispatch();\r\n    const isMessageSentStatus = useSelector<AppStoreType, isMessageSentStatusType>(state => state.recoverPass.isMessageSend)\r\n    const ErrorRequestMsg = useSelector<AppStoreType, string>(state => state.recoverPass.ErrorMessageRecoveryPassword);\r\n    const isLogin = useSelector<AppStoreType, boolean>(state => state.login.logIn);\r\n\r\n\r\n    const onClickHandler = () => {\r\n        const message = {\r\n            email: email.value,\r\n            from: 'test-front-admin <skillforce@mail.ru>',\r\n            message: `<div style=\"background-color: lime; padding: 15px\">\t\r\n\t        password recovery link: \r\n\t        <a href='https://skillforce.github.io/fridayProject/#/set-new-password/$token$'>\r\n\t        link</a></div>`\r\n        }\r\n        dispatch(SendMessage(message))\r\n    }\r\n\r\n    if (email.touched || email.value) {\r\n        dispatch(setLoginError(''))\r\n    }\r\n\r\n    const minLengthEmailMsg = email.touched && email.minLengthError;\r\n    const isValidEmailMsg = email.touched && email.isValidEmailError;\r\n    const isEmptyEmailMsg = email.touched && email.isEmpty;\r\n    const isLoginDisabled = !email.inputValid && !minLengthEmailMsg;\r\n\r\n\r\n    if (isLogin) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    if (isMessageSentStatus === 'loading') {\r\n        return <Preloader/>\r\n    }\r\n\r\n\r\n    if (isMessageSentStatus === 'sent') {\r\n        return <ResponsePage typeOfPage={'sent'} email={email.value}/>\r\n    }\r\n    if (isMessageSentStatus === 'end') {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={cn.autorization}>\r\n            <div className={cn.form}>\r\n                <div className={cn.hTit}>\r\n                    It-incubator\r\n                </div>\r\n                <div className={cn.tit}>\r\n                    Forgot your password?\r\n                </div>\r\n\r\n\r\n                <ErrorWindow minLengthEmailMsg={minLengthEmailMsg} isValidEmailMsg={isValidEmailMsg}\r\n                             isEmptyEmailMsg={isEmptyEmailMsg}/>\r\n\r\n\r\n                <form action=\"\">\r\n                    {ErrorRequestMsg && <div>{ErrorRequestMsg}</div>}\r\n\r\n                    <SuperInputText onChange={email.onChange} onBlur={() => {\r\n                        email.onBlur(true)\r\n                    }} value={email.value}\r\n                                    label={'Email'}/>\r\n\r\n\r\n                    <NavLink className={cn.linkforgot} to={PATH.LOGIN}>Try Log In</NavLink>\r\n\r\n\r\n                    <SuperButton disabled={isLoginDisabled} onClick={onClickHandler}\r\n                                 style={{width: 280, marginTop: 80, marginBottom: 40}}>SEND\r\n                        MESSAGE</SuperButton>\r\n\r\n\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RecoverPass;\r\n","import React from 'react';\r\nimport cn from './registation.module.css';\r\nimport SuperInputText from '../../common/c1-SuperInputText/SuperInputText';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport SuperButton from '../../common/c2-SuperButton/SuperButton';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStoreType} from '../../../bll/store/store';\r\nimport {PATH} from '../../routes/Routes';\r\nimport {setSignUpError, SignUpTC} from '../../../bll/redusers/registration-reducer';\r\nimport {useInput} from '../login/login';\r\nimport {ErrorWindow} from '../../common/ErrorWindow/ErrorWindow';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {ResponsePage} from '../../common/ResponsePage/ResponsePage';\r\n\r\n\r\nconst Registration = () => {\r\n\r\n    const email = useInput('', {isEmpty: true, minLength: 3, maxLength: 50, isValidEmail: false});\r\n    const password = useInput('', {isEmpty: true, minLength: 7, maxLength: 20});\r\n    const password1 = useInput('', {isEmpty: true, minLength: 7, maxLength: 20});\r\n\r\n\r\n    const isEmptyEmailMsg = email.touched && email.isEmpty;\r\n    const isEmptyPassMsg = password.touched && password.isEmpty;\r\n    //проверка на пустоту\r\n\r\n    const minLengthEmailMsg = email.touched && email.minLengthError;\r\n    const minLengthPassMsg = password.touched && password.minLengthError;\r\n    // проверка на минимальную длинну\r\n\r\n    const isValidEmailMsg = email.touched && email.isValidEmailError;\r\n    const maxLengthPassMsg = password.touched && password.maxLengthError;\r\n    // проверка на валидность имейла и максимальную длинну пароля\r\n\r\n    const isLoginDisabled = email.inputValid && password.inputValid;\r\n    //отключаем кнопку если хоть одна ошибка есть\r\n\r\n\r\n    const isPasswordCorrectReEnter = password.value !== password1.value && password.touched;\r\n    const isPasswordDublicate = password.value === password1.value;\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const isLogin = useSelector<AppStoreType, boolean>(state => state.login.logIn);\r\n    const isLoading = useSelector<AppStoreType, boolean>(state => state.login.isLoading);\r\n    const isCorrectReg = useSelector<AppStoreType, boolean>(state => state.registration.isValidReg);\r\n    const SignUpErrorMsg = useSelector<AppStoreType, string>(state => state.registration.SignUpError);\r\n    const signUpProgress = useSelector<AppStoreType, string>(state => state.registration.signUpProgress);\r\n\r\n\r\n    const onClickHandler = () => {\r\n\r\n        const requestData = {\r\n            email: email.value,\r\n            password: password.value,\r\n        }\r\n\r\n        dispatch(SignUpTC(requestData));\r\n\r\n        email.onChange('')\r\n        email.onBlur(false)\r\n        password.onChange('')\r\n        password.onBlur(false)\r\n        password1.onBlur(false)\r\n        password1.onChange('')\r\n\r\n    } //обработка клика на кнопку SignUp\r\n\r\n\r\n    if (email.touched || email.value || password.touched || password.value || password1.touched || password1.value) {\r\n        dispatch(setSignUpError(''))\r\n    } //зачищаем ошибки работы с сервером при попытки нового введения символов пользователем\r\n\r\n\r\n    if (isLoading && signUpProgress === 'loading') {\r\n        return <Preloader/>\r\n    }\r\n    if (isLoading && signUpProgress === 'success') {\r\n        return <ResponsePage typeOfPage={'success'}/>\r\n    }\r\n    if (isLoading && signUpProgress === 'error') {\r\n        return <ResponsePage typeOfPage={'error'}/>\r\n    }\r\n\r\n    if (isCorrectReg) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    if (isLogin) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={cn.autorization}>\r\n            <div className={cn.form}>\r\n                <div className={cn.hTit}>\r\n                    It-incubator\r\n                </div>\r\n                <div className={cn.tit}>\r\n                    Sign Up\r\n                </div>\r\n                <form>\r\n                    {SignUpErrorMsg && <div style={{color: 'red'}}>{SignUpErrorMsg}</div>}\r\n\r\n                    <ErrorWindow isEmptyEmailMsg={isEmptyEmailMsg} minLengthEmailMsg={minLengthEmailMsg}\r\n                                 isValidEmailMsg={isValidEmailMsg}/>\r\n\r\n                    <SuperInputText onChange={email.onChange} onBlur={() => {\r\n                        email.onBlur(true)\r\n                    }} value={email.value}\r\n                                    label={'Enter your email'}/>\r\n\r\n                    <ErrorWindow isEmptyPassMsg={isEmptyPassMsg} minLengthPassMsg={minLengthPassMsg}\r\n                                 maxLengthPassMsg={maxLengthPassMsg}/>\r\n\r\n\r\n                    <SuperInputText onChange={password.onChange} onBlur={() => {\r\n                        password.onBlur(true)\r\n                    }} value={password.value}\r\n                                    label={'Enter your unique password'} type={'password'}/>\r\n\r\n                    <ErrorWindow isPasswordCorrectReEnter={isPasswordCorrectReEnter}/>\r\n\r\n                    <SuperInputText onChange={password1.onChange} onBlur={() => {\r\n                        password1.onBlur(true)\r\n                    }} value={password1.value}\r\n                                    label={'Repeat your password'} type={'password'}/>\r\n\r\n\r\n                    <NavLink className={cn.linkforgot} to={PATH.LOGIN}>Sign in</NavLink>\r\n                    <SuperButton onClick={onClickHandler} disabled={!isPasswordDublicate || !isLoginDisabled}\r\n                                 style={{width: 280, marginTop: 80, marginBottom: 40}}>Sign up</SuperButton>\r\n\r\n\r\n                </form>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Registration;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport s from './SuperCheckbox.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newCheckedStatus = e.currentTarget.checked;\r\n        if (onChangeChecked) {\r\n            onChangeChecked(newCheckedStatus);\r\n        }\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type={'checkbox'}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    )\r\n}\r\n\r\nexport default SuperCheckbox\r\n","import React, {useState} from 'react';\r\nimport SuperCheckbox from '../../common/c3-SuperCheckbox/SuperCheckbox';\r\nimport SuperInputText from '../../common/c1-SuperInputText/SuperInputText';\r\nimport SuperButton from '../../common/c2-SuperButton/SuperButton';\r\nimport s from './test.module.css';\r\n\r\nconst {test_component, bth_group, input_group, checkbox_group} = s;\r\n\r\n\r\nconst Test = () => {\r\n\r\n    const [checked, setChecked] = useState<boolean>(false)//Делает чекбокс управляемым\r\n    const [text, setText] = useState<string>('')//Делает input управляемым\r\n    const error = text ? '' : 'Enter the text'//Для подсветки пустого инпута\r\n\r\n    const showAlert = () => {\r\n        if (error) {\r\n            alert('Enter text in control input')\r\n        } else {\r\n            alert(`You was entered : ${text}`) // если нет ошибки показать текст\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={test_component}>\r\n            <div className={bth_group}>\r\n                <span>Controlled CheckBox</span>\r\n                <SuperCheckbox\r\n                    checked={checked}\r\n                    onChangeChecked={setChecked}/>\r\n                <span>Uncontrolled CheckBox(checked)</span>\r\n                <SuperCheckbox checked/>\r\n                <span>Uncontrolled CheckBox(Unchecked)</span>\r\n                <SuperCheckbox checked={false}/>\r\n            </div>\r\n            <div className={input_group}>\r\n                <span>Controlled input</span>\r\n                <SuperInputText\r\n                    value={text}\r\n                    onChangeText={setText}\r\n                    error={error}/>\r\n                <span>Uncontrolled input(with error)</span>\r\n                <SuperInputText\r\n                    placeholder={'withOutAnyText'}\r\n                    value={''}\r\n                    error={error}/>\r\n                <span>Uncontrolled input(without error)</span>\r\n                <SuperInputText\r\n                    value={'some text'}\r\n                />\r\n            </div>\r\n            <div className={checkbox_group}>\r\n                <span>Btn with out err</span>\r\n                <SuperButton onClick={showAlert}>testOnBTN(click!)</SuperButton>\r\n\r\n                <span>Btn with err</span>\r\n                <SuperButton red>testErrorBTN</SuperButton>\r\n\r\n                <span>disabled btn</span>\r\n                <SuperButton disabled>testDisabledBTN</SuperButton>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Test;\r\n","import React from 'react';\r\nimport cn from './setNewPassword.module.css';\r\nimport SuperInputText from '../../common/c1-SuperInputText/SuperInputText';\r\nimport {NavLink, Redirect, useParams} from 'react-router-dom';\r\nimport SuperButton from '../../common/c2-SuperButton/SuperButton';\r\nimport {PATH} from '../../routes/Routes';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStoreType} from '../../../bll/store/store';\r\nimport {useInput} from '../login/login';\r\nimport {CreateNewPassword, isMessageSentStatusType} from '../../../bll/redusers/recoverPass-reducer';\r\nimport {setLoginError} from '../../../bll/redusers/login-reducer';\r\nimport {ErrorWindow} from '../../common/ErrorWindow/ErrorWindow';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {ResponsePage} from '../../common/ResponsePage/ResponsePage';\r\n\r\n\r\nexport const SetNewPassword = () => {\r\n    const password = useInput('', {isEmpty: true, minLength: 7, maxLength: 20});\r\n    const password1 = useInput('', {isEmpty: true, minLength: 7, maxLength: 20});\r\n    const dispatch = useDispatch();\r\n    const isMessageSentStatus = useSelector<AppStoreType, isMessageSentStatusType>(state => state.recoverPass.isMessageSend)\r\n    const ErrorRequestMsg = useSelector<AppStoreType, string>(state => state.recoverPass.ErrorMessageRecoveryPassword);\r\n    const isLogin = useSelector<AppStoreType, boolean>(state => state.login.logIn);\r\n    const {token} = useParams<{ token: string }>();\r\n\r\n    const onClickHandler = () => {\r\n        const message = {\r\n            password: password.value,\r\n            resetPasswordToken: token\r\n        }\r\n        dispatch(CreateNewPassword(message))\r\n    }\r\n\r\n    if (password.touched || password.value) {\r\n        dispatch(setLoginError(''))\r\n    }\r\n\r\n\r\n    const isEmptyPassMsg = password.touched && password.isEmpty;\r\n\r\n\r\n    const minLengthPassMsg = password.touched && password.minLengthError;\r\n\r\n    const maxLengthPassMsg = password.touched && password.maxLengthError;\r\n\r\n\r\n    const isPasswordCorrectReEnter = password.value === password1.value && password1.value !== '';\r\n\r\n    const isButtonDisabled = !password.inputValid && !password.inputValid && !isPasswordCorrectReEnter;\r\n\r\n    if (isLogin) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    if (isMessageSentStatus === 'loading') {\r\n        return <Preloader/>\r\n    }\r\n\r\n\r\n    if (isMessageSentStatus === 'sent') {\r\n        return (<div>\r\n                <ResponsePage typeOfPage={'success'}/>\r\n                </div>\r\n        )\r\n    }\r\n    if (isMessageSentStatus === 'end') {\r\n        return (<Redirect to={PATH.LOGIN}/>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={cn.autorization}>\r\n            <div className={cn.form}>\r\n                <div className={cn.hTit}>\r\n                    It-incubator\r\n                </div>\r\n                <div className={cn.tit}>\r\n                    Create new password\r\n                </div>\r\n                <form>\r\n                    {ErrorRequestMsg && <div>{ErrorRequestMsg}</div>}\r\n\r\n                    <ErrorWindow isEmptyPassMsg={isEmptyPassMsg} minLengthPassMsg={minLengthPassMsg}\r\n                                 maxLengthPassMsg={maxLengthPassMsg}/>\r\n\r\n\r\n                    <SuperInputText onChange={password.onChange} onBlur={() => {\r\n                        password.onBlur(true)\r\n                    }} value={password.value}\r\n                                    label={'Enter new unique password'} type={'password'}/>\r\n\r\n                    <ErrorWindow isPasswordCorrectReEnter={!isPasswordCorrectReEnter && password1.value!==''}/>\r\n\r\n\r\n                    <SuperInputText onChange={password1.onChange} onBlur={() => {\r\n                        password1.onBlur(true)\r\n                    }} value={password1.value}\r\n                                    label={'Repeat your password'} type={'password'}/>\r\n\r\n\r\n                    <SuperButton disabled={!isPasswordCorrectReEnter} onClick={onClickHandler}\r\n                                 style={{width: 280, marginTop: 80, marginBottom: 40}}>Create\r\n                        new password</SuperButton>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SetNewPassword;\r\n","import {Redirect, Route, Switch} from 'react-router-dom';\r\n\r\nimport Error404 from '../pages/error404/error404';\r\nimport Login from '../pages/login/login';\r\nimport Profile from '../pages/profile/profile';\r\nimport RecoverPass from '../pages/recoverPass/recoverPass';\r\nimport Registration from '../pages/registration/registration';\r\nimport Test from '../pages/test/test';\r\nimport SetNewPassword from '../pages/setNewPassword/setNewPassword';\r\nimport React from 'react';\r\n\r\nexport const PATH = {\r\n    ERROR_404: '/err404',\r\n    LOGIN: '/login',\r\n    PROFILE: '/profile',\r\n    RECOVER_PASS: '/recPassword',\r\n    REGISTRATION: '/reg',\r\n    TEST: '/test',\r\n    CREATE_NEW_PASS:'/set-new-password/:token'\r\n}\r\n\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <div>\r\n            <Switch>\r\n\r\n                <Route path={'/'} exact render={() => <Redirect to={PATH.LOGIN}/>}/>\r\n                <Route path={PATH.LOGIN} render={() => <Login/>}/>\r\n                <Route path={PATH.PROFILE} render={() => <Profile/>}/>\r\n                <Route path={PATH.RECOVER_PASS} render={() => <RecoverPass/>}/>\r\n                <Route path={PATH.REGISTRATION} render={() => <Registration/>}/>\r\n                <Route path={PATH.TEST} render={() => <Test/>}/>\r\n                <Route path={PATH.CREATE_NEW_PASS} render={() => <SetNewPassword/>}/>\r\n\r\n                <Route render={() => <Error404/>}/>\r\n\r\n            </Switch>\r\n        </div>\r\n    )\r\n\r\n\r\n}","import React from 'react';\r\nimport {PATH} from '../routes/Routes';\r\nimport {NavLink} from 'react-router-dom'\r\nimport s from './header.module.css';\r\nimport cn from './header.module.css';\r\nimport SuperButton from '../common/c2-SuperButton/SuperButton';\r\nimport {FaReact} from 'react-icons/fa';\r\nimport {FaRegUser} from 'react-icons/fa';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStoreType} from '../../bll/store/store';\r\nimport {logOutTC} from '../../bll/redusers/login-reducer';\r\n\r\nconst {header_tittle, header_nav, header_nav_active} = s;\r\n\r\nconst Header = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const isLogin = useSelector<AppStoreType, boolean>(state => state.login.logIn);\r\n\r\n\r\n    const logOutClickHandler = () => {\r\n        dispatch(logOutTC())\r\n    }\r\n\r\n    return (\r\n        <div className={cn.over}>\r\n            <div className={cn.header}>\r\n                <div><FaReact className={cn.logo}/></div>\r\n                <div className={header_tittle}>\r\n                    <NavLink to={PATH.CREATE_NEW_PASS} className={header_nav} activeClassName={header_nav_active}>Create\r\n                        new pass</NavLink>\r\n                    <NavLink to={PATH.ERROR_404} className={header_nav}\r\n                             activeClassName={header_nav_active}>error404</NavLink>\r\n                    <NavLink to={PATH.LOGIN} className={header_nav} activeClassName={header_nav_active}>login</NavLink>\r\n                    <NavLink to={PATH.PROFILE} className={header_nav}\r\n                             activeClassName={header_nav_active}> <FaRegUser className={cn.menuIcon}/> Profile</NavLink>\r\n                    <NavLink to={PATH.RECOVER_PASS} className={header_nav} activeClassName={header_nav_active}>recover\r\n                        pass</NavLink>\r\n                    <NavLink to={PATH.REGISTRATION} className={header_nav}\r\n                             activeClassName={header_nav_active}>registration</NavLink>\r\n                    <NavLink to={PATH.TEST} className={header_nav} activeClassName={header_nav_active}>test</NavLink>\r\n\r\n                </div>\r\n                {isLogin && <div><SuperButton onClick={logOutClickHandler}>Logout</SuperButton></div>}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import {Dispatch} from 'redux';\r\nimport {authAPI} from '../../dal/Api';\r\nimport {setProfile} from './profile-reducer';\r\nimport {logInTrue, setLoginError} from './login-reducer';\r\n\r\n\r\nconst SET_IS_INITIALIZED = 'AppReducer/SET_IS_INITIALIZED';\r\n\r\n\r\nexport const SetIsInitialized = (newInitializedStatus: IsInitializedStatusType) => ({\r\n    type: 'AppReducer/SET_IS_INITIALIZED' as const,\r\n    newInitializedStatus\r\n});\r\n\r\n\r\nlet InitialState = {\r\n    isInitialized: 'loading' as IsInitializedStatusType\r\n}\r\n\r\nexport type InitialStateLoginType = typeof InitialState\r\n\r\nexport const AppReducer = (state: InitialStateLoginType = InitialState, action: ProfileReducerActionType): InitialStateLoginType => {\r\n    switch (action.type) {\r\n        case SET_IS_INITIALIZED :\r\n            return {...state, isInitialized: action.newInitializedStatus}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const AuthMe = () => {\r\n    return (dispatch: Dispatch) => {\r\n\r\n        authAPI.authMe()\r\n            .then(res => {\r\n                    dispatch(setProfile(res.data))\r\n                    dispatch(logInTrue(true))\r\n                    dispatch(SetIsInitialized('success'))\r\n\r\n                }\r\n            )\r\n            .catch(error => {\r\n                const errMsg = error.response ? error.response.data.error\r\n                    : (error.message + ', more details in the console');\r\n                dispatch(setLoginError(errMsg))\r\n                dispatch(SetIsInitialized('notInitialized'))\r\n            })\r\n    }\r\n}\r\n\r\n\r\n//types\r\n\r\nexport type IsInitializedStatusType = 'loading' | 'success' | 'notInitialized'\r\n\r\nexport type setInitializedType = ReturnType<typeof SetIsInitialized>\r\n\r\nexport type ProfileReducerActionType = setInitializedType\r\n\r\nexport default AppReducer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport Header from './header/header';\r\nimport {Routes} from './routes/Routes';\r\nimport {AppStoreType} from '../bll/store/store';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AuthMe, IsInitializedStatusType} from '../bll/redusers/app-reducer';\r\nimport {Preloader} from './common/Preloader/Preloader';\r\n\r\n// +_+\r\n\r\n\r\n// +_+\r\nconst App = () => {\r\n    const isInitialized = useSelector<AppStoreType, IsInitializedStatusType>(state => state.app.isInitialized)\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(AuthMe())\r\n    }, [])\r\n\r\n\r\n    if (isInitialized === 'loading') {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            <Routes/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {EnterNewPassReducer} from '../redusers/enterNewPass-reducer';\r\nimport {LoginReducer} from '../redusers/login-reducer';\r\nimport {TestReducer} from '../redusers/test-reducer';\r\nimport {RecoverPassReducer} from '../redusers/recoverPass-reducer';\r\nimport {RegistrationReducer} from '../redusers/registration-reducer';\r\nimport {Error404Reducer} from '../redusers/error404-reducer';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport ProfileReducer from '../redusers/profile-reducer';\r\nimport {AppReducer} from '../redusers/app-reducer';\r\n\r\n\r\nconst reducers = combineReducers({\r\n    enterNewPass: EnterNewPassReducer,\r\n    login: LoginReducer,\r\n    test: TestReducer,\r\n    recoverPass: RecoverPassReducer,\r\n    registration: RegistrationReducer,\r\n    error404: Error404Reducer,\r\n    profile: ProfileReducer,\r\n    app:AppReducer\r\n})\r\n\r\n\r\nconst store = createStore(reducers, composeWithDevTools(applyMiddleware(thunkMiddleware),))\r\n\r\n\r\nexport type AppStoreType = ReturnType<typeof reducers>\r\n\r\n\r\nexport default store\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store","\r\n\r\n\r\n\r\n\r\n\r\nexport const EnterNewPassReducer = (state: any={}, action: any) => {\r\n\r\n            return state\r\n    }\r\n","\r\n\r\n\r\nexport const TestReducer = (state: any={}, action: any) => {\r\n\r\n    return state\r\n}\r\n","\r\n\r\n\r\nexport const Error404Reducer = (state: any={}, action: any) => {\r\n\r\n    return state\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './main/ui/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {Provider} from 'react-redux';\r\nimport store from './main/bll/store/store';\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n    <App />\r\n   </Provider>\r\n  </React.StrictMode>\r\n    </HashRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}