{"version":3,"sources":["main/ui/pages/tablet-cards/tablet-cards.module.css","main/ui/pages/card/CardProfile/CardProfile.module.css","main/ui/pages/tablet-cards/CardsDeckProfile/CardsDeckProfile.module.css","main/ui/pages/error404/404ErrImg/notfound.gif","main/ui/pages/error404/error404.tsx","main/ui/common/c1-SuperInputText/SuperInputText.tsx","main/ui/common/c2-SuperButton/SuperButton.tsx","main/dal/Api.tsx","main/bll/redusers/profile-reducer.tsx","main/bll/redusers/login-reducer.tsx","main/bll/redusers/registration-reducer.tsx","main/ui/common/ErrorWindow/ErrorWindow.tsx","main/ui/common/Preloader/Preloader.tsx","main/bll/redusers/recoverPass-reducer.tsx","main/ui/pages/login/login.tsx","main/ui/pages/profile/EmptyAva.png","main/ui/pages/profile/EditProfile/EditProfile.tsx","main/ui/pages/profile/profile.tsx","main/ui/common/ResponsePage/mail.png","main/ui/common/ResponsePage/error.png","main/ui/common/ResponsePage/success.png","main/ui/common/ResponsePage/ResponsePage.tsx","main/ui/pages/recoverPass/recoverPass.tsx","main/ui/pages/registration/registration.tsx","main/bll/redusers/tablet-reducer.tsx","main/bll/redusers/card-reducer.tsx","main/ui/common/Paginator/Paginator.tsx","main/ui/common/sortBtn/sortBtn.tsx","main/ui/pages/tablet-cards/CardOnly/CardOnly.tsx","main/ui/pages/tablet-cards/CardsDeckProfile/CardsDeckProfile.tsx","main/ui/common/c5-SuperSelect/SuperSelect.tsx","main/ui/common/SearchBlock/SearchBlock.tsx","main/ui/common/Modal/Modal.tsx","main/ui/pages/tablet-cards/tablet-cards.tsx","main/ui/pages/setNewPassword/setNewPassword.tsx","main/ui/pages/card/CardOnlyCard/CardOnlyCard.tsx","assets/img/user.png","main/ui/pages/card/CardProfile/CardProfile.tsx","main/ui/pages/card/card.tsx","main/bll/redusers/card-game-reducer.tsx","main/ui/pages/cardGame/Raiting/star/star.png","main/ui/pages/cardGame/Raiting/star/star.tsx","main/ui/pages/cardGame/Raiting/raiting.tsx","main/ui/pages/cardGame/cardGame.tsx","main/ui/routes/Routes.tsx","main/ui/header/header.tsx","main/bll/redusers/app-reducer.tsx","main/ui/App.tsx","reportWebVitals.ts","main/bll/store/store.tsx","main/bll/redusers/enterNewPass-reducer.tsx","main/bll/redusers/test-reducer.tsx","main/bll/redusers/error404-reducer.tsx","index.tsx","main/ui/header/header.module.css","main/ui/pages/card/card.module.css","main/ui/common/ResponsePage/ResponsePage.module.css","main/ui/common/c1-SuperInputText/SuperInputText.module.css","main/ui/pages/login/Login.module.css","main/ui/pages/profile/profile.module.css","main/ui/pages/cardGame/cardGame.module.css","main/ui/pages/recoverPass/recoverPass.module.css","main/ui/pages/registration/registation.module.css","main/ui/pages/profile/EditProfile/EditProfile.module.css","main/ui/common/Modal/Modal.module.css","main/ui/pages/setNewPassword/setNewPassword.module.css","main/ui/common/c2-SuperButton/SuperButton.module.css","main/ui/common/Paginator/Paginator.module.css","main/ui/pages/tablet-cards/CardOnly/CardOnly.module.css","main/ui/pages/card/CardOnlyCard/CardOnlyCard.module.css","main/ui/pages/cardGame/Raiting/star/star.module.css","main/ui/pages/error404/error404.module.css","main/ui/common/Preloader/Preloader.module.css","main/ui/common/sortBtn/sortBtn.module.css","main/ui/common/c5-SuperSelect/SuperSelect.module.css","main/ui/pages/cardGame/Raiting/raiting.module.css"],"names":["module","exports","err404","s","Error404","className","src","errImg","alt","superInput","errorInput","SuperInputText","type","onChange","onChangeText","onKeyPress","onEnter","error","label","restProps","spanClassName","finalInputClassName","value","cn","group","required","e","currentTarget","key","placeholder","highlight","bar","SuperButton","red","disabled","onClick","finalClassName","default","isDisabledClass","disableClass","settings","withCredentials","instance","axios","create","baseURL","instanceHeroky","authAPI","data","post","delete","profileAPI","put","CardsPackAPI","params","min","max","sortPacks","page","pageCount","user_id","get","cardsPack","cardId","id","CardAPI","sortCards","cardsPack_id","newCardParams","card","grade","card_id","SET_PROFILE","setProfile","profile","InitialState","_id","email","name","avatar","publicCardPacksCount","created","updated","isAdmin","verified","rememberMe","ProfileReducer","state","action","LOGIN_USER_TRUE","SET_LOGIN_ERROR","SET_LOADING","logInTrue","newLoginStatus","setLoginError","ErrorMSG","setIsLoading","newLoadingStatus","logIn","logInError","isLoading","LoginReducer","REG_CORRECT","REG_ERROR","SET_PROGRESS","setIsValidReg","newStatus","setSignUpError","setSignUpProgress","NewProgress","isValidReg","signUpProgress","SignUpError","RegistrationReducer","ErrorWindow","props","isEmptyEmailMsg","style","color","isEmptyPassMsg","isEmptyPass1Msg","isEmptyNameError","isEmptyUrlError","minLengthEmailMsg","minLengthPassMsg","maxLengthPassMsg","isValidEmailMsg","isPasswordCorrectReEnter","loader","Preloader","SET_IS_MESSAGE_SEND","SET_ERROR_MESSAGE","SetIsMessageSend","SetErrorRecoveryPassMessage","newMess","isMessageSend","ErrorMessageRecoveryPassword","RecoverPassReducer","useInput","initialValue","validator","useState","setValue","touched","setTouched","valid","isEmpty","setIsEmpty","minLengthError","setMinLengthError","maxLengthError","setMaxLengthError","isValidEmailError","setIsValidEmailError","inputValid","setInputValid","useEffect","length","test","String","toLowerCase","useValidator","hasOwnProperty","target","onBlur","t","Login","minLength","maxLength","isValidEmail","password","isLoginDisabled","dispatch","useDispatch","ErrorRequestMsg","useSelector","login","isLogin","to","PATH","PROFILE","autorization","form","hTit","tit","linkforgot","RECOVER_PASS","REGISTRATION","requestData","then","res","catch","errMsg","response","message","finally","logInTC","width","marginTop","marginBottom","EditProfile","onClickHandler","nameInput","avatarInput","saveClickHandler","newName","newAva","Data","updatedUser","LOGIN","ava_img","EmptyAva","Profile","isEditMode","setIsEditMode","nameProfile","CARDS_TABLET","textDecoration","imgMailSent","infText","ResponsePage","typeOfPage","errorText","mail","success","RecoverPass","isMessageSentStatus","recoverPass","from","setTimeout","Registration","password1","isPasswordDublicate","isCorrectReg","registration","SignUpErrorMsg","SignUpTC","SET_TABLET_INFO","SET_CURRENT_PAGE","SET_MIN_MAX_CARDS_COUNT","SET_SORT_STATUS","SET_SEARCH_TEXT","SET_SEARCHED_BY","SET_SEARCH_CARDS_ARR","SET_SEARCH_MODE","SET_PAGE_FOR_SEARCH_MODE","SET_SEARCH_EMPTY","SET_LOADING_STATUS","SET_ERROR_TEXT","SET_CHECK_BOX_VALUE","SetTabletInfo","newTabletInfo","SetSortStatus","newSortStatus","SetSearchCardsArr","newCards","SetSearchMode","newMode","SetSearchEmpty","msg","SetLoadingStatus","SetErrorText","newText","cardPacks","searchCardsArr","cardPacksTotalCount","maxCardsCount","minCardsCount","currentPage","sortStatus","searchText","checkBoxValue","searchedBy","searchMode","pageForSearchMode","searchEmpty","loadingStatus","getCarsPack","getState","tablet","promise","toString","Promise","all","SearchCorrectCards","searchBy","newCardsPacks","filter","indexOf","newTotalCount","temp","push","splice","user_name","TabletReducer","newPage","newMinMaxCurrent","SET_CARD_INFO","SET_LOADING_CARD_STATUS","SET_PAGE","SET_GRADE_VALUE","SET_SORT_CARD_STATUS","SET_SEARCH_CARD_TEXT","SET_SEARCHED_CARD_BY","SET_SEARCH_CARD_MODE","SET_SEARCH_CARD_ARR","SET_PAGE_FOR_SEARCH_CARD_MODE","SET_PAGE_COUNT","SET_ERROR_CARD_TEXT","SetCardInfo","newCardInfo","SetLoadingCardStatus","SetGradeValue","newRangeValue","SetSortCardStatus","SetSearchCardText","SetSearchedCardBy","SetSearchCardMode","SetSearchCardEmpty","SetSearchCardArr","newArr","SetErrorCardText","cards","searchCardArr","cardsTotalCount","maxGrade","minGrade","packUserId","gradeValue","loadingStatusCard","searchCardText","searchedCardBy","searchCardMode","searchCardEmpty","pageForSearchCardMode","errorCardText","getCard","searchCard","question","answer","CardReducer","pageSelect","btnGroup","Paginator","totalItemsCount","pageSize","cardType","pagesCount","Math","ceil","allPages","i","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","map","p","SetPageForSearchCardMode","SetPageForSearchMode","onPageChanged","activeBtn","SortBtn","onSortBtnHandler","property","tableTitle","btnBlock","CardOnly","profileId","setActiveModalUpdateDeck","setCardIdInModal","setActiveModalDeleteDeck","setNameDeck","onClickUpdateBtnHandler","newId","onClickDeleteBtnHandler","cardsCount","Date","toLocaleDateString","CardsDeckProfile","user","user_card","logo","name_profile","about","polz","polztit","rangeValues","rangeClass","rangeValue","onClickSearchBtnHandler","onChangeRangeHandler","setActiveModalAddDeck","defaultValue","select","SuperSelect","options","onChangeOption","mappedOptions","SearchBlock","selectedParams","onHandlerSearch","search","onAllPagesHandler","selectParamsOptions","setOptionParams","searchProperty","inp","display","undefined","modal","modal_content","modal_active","modal_content_active","Modal","active","setActive","children","event","stopPropagation","TabletCards","setRangeValue","setSearch","activeModalAddDeck","activeModalUpdateDeck","activeModalDeleteDeck","cardIdInModal","nameInModal","checkBoxInModal","setCheckBoxInModal","onChangeCheckBoxInModal","sortBy","SetMinMaxCardsCurrent","addDeckModal","checked","DelDeckModal","addParams","private","PostCards","table","mainTab","SetNewPassword","token","useParams","resetPasswordToken","CardOnlyCard","AllCards","onChangeQuestion","onChangeAnswer","onChangeGrade","setActiveModalUpdateCard","setCardPack_id","setCard_id","setActiveModalDeleteCard","onUpdateCardModalHandler","cardPackId","onDeleteCardModalHandler","toFixed","CardProfile","currentCard","rangeLine","gradeCardValue","onClickSearchModeCardHandler","onChangeGradeHandler","selectedCardParams","onClickSearchCardHandler","setActiveModalAddCard","userPhoto","step","Card","tabletInfo","setGradeCardValue","selectParamsCardOptions","setSelectedCardParams","activeModalAddCard","activeModalDeleteCard","activeModalUpdateCard","cardPack_id","questionInModal","answerInModal","gradeInModal","newGradeValue","onAllCardPagesHandler","SET_IS_INIT_GAME_STATUS","SET_SHOW_CARD","SET_ALL_CARDS_IN_DECK","SET_MARK_VALUE","SET_IS_SHOW_ANSWER","setIsInitGameStatus","setMarkValue","newValue","setIsShowAnswer","InitialCardGameState","showCard","allCardsInDeck","isInitGameStatus","ErrorText","markValue","isShowAnswer","gameInit","a","newCard","sum","reduce","acc","rand","random","newSum","starOn","starOf","StarOn","star","StarOf","Star","selected","raiting","Rating","putMark","ratingBlock","CardGame","CardToShow","cardGame","isInitStatus","num","ERROR_404","TEST","CREATE_NEW_PASS","CARD","CARD_GAME","Routes","path","exact","render","header_tittle","header_nav","header_nav_active","Header","over","header","activeClassName","menuIcon","SET_IS_INITIALIZED","SetIsInitialized","newInitializedStatus","isInitialized","AppReducer","App","app","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","enterNewPass","error404","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71d84fda.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"test_component\":\"tablet-cards_test_component__2NWTK\",\"profile\":\"tablet-cards_profile__1ZjqQ\",\"table\":\"tablet-cards_table__ETl4B\",\"tit\":\"tablet-cards_tit__2WLp0\",\"inp\":\"tablet-cards_inp__1iLsm\",\"mainTab\":\"tablet-cards_mainTab__2lzLm\",\"addDeckModal\":\"tablet-cards_addDeckModal__2jZUp\",\"DelDeckModal\":\"tablet-cards_DelDeckModal__3GMgc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"CardProfile_user__hmaIm\",\"user_card\":\"CardProfile_user_card__J9O0C\",\"logo\":\"CardProfile_logo__2gYJE\",\"name_profile\":\"CardProfile_name_profile__tlCgM\",\"about\":\"CardProfile_about__1gdTM\",\"polz\":\"CardProfile_polz__mxQbz\",\"polztit\":\"CardProfile_polztit__1_TNQ\",\"rangeValues\":\"CardProfile_rangeValues__24UtJ\",\"rangeClass\":\"CardProfile_rangeClass__3Wgo5\",\"currentCard\":\"CardProfile_currentCard__3ukD9\",\"rangeLine\":\"CardProfile_rangeLine__2cYAT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"CardsDeckProfile_user__1JM5S\",\"user_card\":\"CardsDeckProfile_user_card__1MVQ4\",\"logo\":\"CardsDeckProfile_logo__3ur9Q\",\"name_profile\":\"CardsDeckProfile_name_profile__3zNRo\",\"about\":\"CardsDeckProfile_about__1vQEG\",\"polz\":\"CardsDeckProfile_polz__1myBK\",\"polztit\":\"CardsDeckProfile_polztit__2XEtR\",\"rangeValues\":\"CardsDeckProfile_rangeValues__1mP3O\",\"rangeClass\":\"CardsDeckProfile_rangeClass__1_b02\"};","export default __webpack_public_path__ + \"static/media/notfound.52f5b072.gif\";","import React from 'react';\r\nimport errImg from './404ErrImg/notfound.gif';\r\nimport s from './error404.module.css';\r\n\r\nconst{err404}=s;\r\n\r\nconst Error404 = () => {\r\n    return (\r\n        <div className={err404}>\r\n            <img src={errImg} alt=\"ErrorImg\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Error404;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './SuperInputText.module.css'\r\nimport cn from './SuperInputText.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: (e: React.KeyboardEvent<HTMLInputElement>) => void\r\n    error?: string\r\n    spanClassName?: string\r\n    label: string\r\n}\r\n\r\nconst {superInput, errorInput} = s;\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        label,\r\n        className, spanClassName,\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter(e) // то вызвать его\r\n    }\r\n\r\n\r\n    const finalInputClassName = restProps.value ? superInput : errorInput;\r\n\r\n\r\n    return (\r\n\r\n    <div className={cn.group}>\r\n        <input\r\n               required\r\n               onChange={onChangeCallback}\r\n               onKeyPress={onKeyPressCallback}\r\n               className={finalInputClassName}\r\n               placeholder={error}\r\n               {...restProps}\r\n        />\r\n            <span className={cn.highlight}></span>\r\n            <span className={cn.bar}></span>\r\n            <label>{label}</label>\r\n    </div>\r\n\r\n    )\r\n}\r\n\r\nexport default SuperInputText\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './SuperButton.module.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n    disabled?: boolean\r\n    onClick?: () => void\r\n    filter?: string\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className, disabled, onClick,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${red ? s.red : s.default} ${className}`\r\n    const isDisabledClass = `${disabled ? s.disableClass : finalClassName}`\r\n\r\n    return (\r\n        <button\r\n            onClick={onClick}\r\n            disabled={disabled}\r\n            className={isDisabledClass}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n}\r\n\r\nexport default SuperButton\r\n","import axios from 'axios'\r\n\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    ...settings\r\n})\r\n\r\nconst instanceHeroky = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    ...settings\r\n})\r\n\r\n// api\r\n\r\nexport type RequestDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport type SignUpDataRequestType = {\r\n    email: string\r\n    password: string\r\n}\r\nexport type forgotPassDataType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\nexport type newPassDataType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\nexport type SetProfileType = {\r\n    name: string\r\n    avatar: string\r\n}\r\n\r\nexport type ParamsGetCardsType = {\r\n    packName?: string,\r\n    min?: number\r\n    max?: number\r\n    sortPacks?: any\r\n    page?: number\r\n    pageCount?: number\r\n    user_id?: any\r\n}\r\nexport type ParamsAddNewCardsType = {\r\n    cardsPack: CardsPackType\r\n}\r\n\r\nexport type CardsPackType = {\r\n    name?: string,\r\n    deckCover?: string\r\n    private?: boolean\r\n}\r\nexport type CardParamType = {\r\n    cardsPack_id: string\r\n    min?: number\r\n    max?: number\r\n    sortCards?: any\r\n    page?: number\r\n    pageCount?: number\r\n}\r\nexport type newCardDataType = {\r\n    cardsPack_id: string\r\n    question?: string\r\n    answer?: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    answerImg?: string\r\n    questionImg?: string\r\n    questionVideo?: string\r\n    answerVideo?: string\r\n    type?: string\r\n}\r\n\r\nexport type newUpdateCardDataType = {\r\n    _id: string\r\n    question?: string\r\n    answer?: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    answerImg?: string\r\n    questionImg?: string\r\n    questionVideo?: string\r\n    answerVideo?: string\r\n    type?: string\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    login(data: RequestDataType) {\r\n        return instance.post('/auth/login', data);\r\n    },\r\n    logOut() {\r\n        return instance.delete('/auth/me');\r\n    },\r\n    signUp(data: SignUpDataRequestType) {\r\n        return instance.post('/auth/register', data);\r\n    },\r\n    authMe() {\r\n        return instance.post('auth/me');\r\n    },\r\n    forgotPass(data: forgotPassDataType) {\r\n        return instanceHeroky.post('/auth/forgot', data);\r\n    },\r\n    setNewPass(data: newPassDataType) {\r\n        return instanceHeroky.post('/auth/set-new-password', data);\r\n    },\r\n}\r\n\r\nexport const profileAPI = {\r\n    setProfile(data: SetProfileType) {\r\n        return instance.put('/auth/me', data);\r\n    }\r\n}\r\n\r\n\r\nexport const CardsPackAPI = {\r\n    getCards(params: ParamsGetCardsType) {\r\n        const {min, max, sortPacks, page, pageCount, user_id} = params\r\n        return instance.get('/cards/pack', {params: {min, max, sortPacks, page, pageCount, user_id}})\r\n    },\r\n    addNewCards(cardsPack: CardsPackType) {\r\n        return instance.post('/cards/pack', {cardsPack: {...cardsPack}})\r\n    },\r\n    deleteCards(cardId: string) {\r\n        return instance.delete('/cards/pack', {params: {id: cardId}})\r\n    },\r\n    updateCards(cardsPack:{_id: string, name?: string} ) {\r\n        return instance.put('/cards/pack', {cardsPack:{...cardsPack}})\r\n    }\r\n\r\n}\r\n\r\nexport const CardAPI = {\r\n    getCards(params: CardParamType) {\r\n        const {min, max, sortCards, page, pageCount, cardsPack_id} = params\r\n        return instance.get('/cards/card', {params: {sortCards, min, max, cardsPack_id, page, pageCount}})\r\n    },\r\n    addNewCards(newCardParams: newCardDataType) {\r\n        return instance.post('/cards/card', {card: {...newCardParams}})\r\n    },\r\n    deleteCard(cardId: string) {\r\n        return instance.delete('/cards/card', {params: {id: cardId}})\r\n    },\r\n    updateCard(newCardParams: newUpdateCardDataType) {\r\n        return instance.put('/cards/card', {card: {...newCardParams}})\r\n    },\r\n    gradeCard(grade:number,card_id:string){\r\n        return instance.put('/cards/grade',{grade,card_id})\r\n    }\r\n\r\n}\r\n","import {profileAPI, SetProfileType} from '../../dal/Api';\r\nimport {Dispatch} from 'redux';\r\nimport {logInTrue, setIsLoading, setLoginError} from './login-reducer';\r\n\r\nconst SET_PROFILE = 'ProfileReducer/SET_PROFILE';\r\n\r\nexport type ProfileResponseType = {\r\n    _id: string | null;\r\n    email: string | null;\r\n    name: string | null\r\n    avatar?: string | null\r\n    publicCardPacksCount: number | null// количество колод\r\n    created: Date | null\r\n    updated: Date | null\r\n    isAdmin: boolean | null\r\n    verified: boolean | null // подтвердил ли почту\r\n    rememberMe: boolean | null\r\n    error?: string | null\r\n}\r\n\r\n\r\nexport const setProfile = (profile: ProfileResponseType) => ({type: 'ProfileReducer/SET_PROFILE' as const, profile});\r\n\r\n\r\nlet InitialState = {\r\n    profile: {\r\n        _id: null as string | null,\r\n        email: null as string | null,\r\n        name: null as string | null,\r\n        avatar: null as string | null,\r\n        publicCardPacksCount: null as number | null, // количество колод\r\n        created: null as Date | null,\r\n        updated: null as Date | null,\r\n        isAdmin: null as boolean | null,\r\n        verified: null as boolean | null,// подтвердил ли почту\r\n        rememberMe: null as boolean | null,\r\n        error: null as string | null,\r\n    }\r\n}\r\n\r\nexport type InitialStateLoginType = typeof InitialState\r\n\r\nexport const EditProfileTC = (Data: SetProfileType) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setIsLoading(true))\r\n        profileAPI.setProfile(Data)\r\n            .then(res => {\r\n                    dispatch(setProfile(res.data.updatedUser))\r\n                    dispatch(logInTrue(true))\r\n                }\r\n            )\r\n            .catch(error => {\r\n                const errMsg = error.response ? error.response.data.error\r\n                    : (error.message + ', more details in the console');\r\n                dispatch(setLoginError(errMsg))\r\n            })\r\n            .finally(() => {\r\n                    dispatch(setIsLoading(false))\r\n                }\r\n            )\r\n    }\r\n}\r\n\r\n\r\nexport const ProfileReducer = (state: InitialStateLoginType = InitialState, action: ProfileReducerActionType): InitialStateLoginType => {\r\n    switch (action.type) {\r\n        case SET_PROFILE :\r\n            return {...state, profile: {...state.profile, ...action.profile}}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n//types\r\n\r\nexport type setProfileType = ReturnType<typeof setProfile>\r\n\r\nexport type ProfileReducerActionType = setProfileType\r\n\r\nexport default ProfileReducer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {Dispatch} from 'redux';\r\nimport {authAPI, RequestDataType} from '../../dal/Api';\r\nimport {setProfile} from './profile-reducer';\r\n\r\n\r\nconst LOGIN_USER_TRUE = 'LoginPageReducer/LOGIN_TRUE';\r\nconst SET_LOGIN_ERROR = 'LoginPageReducer/SET_LOGIN_ERROR';\r\nconst SET_LOADING = 'LoginPageReducer/SET_LOADING';\r\n\r\n\r\nexport const logInTrue = (newLoginStatus: boolean) => ({type: 'LoginPageReducer/LOGIN_TRUE' as const, newLoginStatus});\r\nexport const setLoginError = (ErrorMSG: string) => ({type: 'LoginPageReducer/SET_LOGIN_ERROR' as const, ErrorMSG});\r\nexport const setIsLoading = (newLoadingStatus: boolean) => ({\r\n    type: 'LoginPageReducer/SET_LOADING' as const,\r\n    newLoadingStatus\r\n});\r\n\r\n\r\nlet InitialState = {\r\n    logIn: false,\r\n    logInError: '',\r\n    isLoading: false\r\n}\r\n\r\ntype InitialStateLoginType = typeof InitialState\r\n\r\nexport const LoginReducer = (state: InitialStateLoginType = InitialState, action: LoginReducerActionType): InitialStateLoginType => {\r\n    switch (action.type) {\r\n        case LOGIN_USER_TRUE :\r\n            return {...state, logIn: action.newLoginStatus}\r\n        case SET_LOGIN_ERROR :\r\n            return {...state, logInError: action.ErrorMSG}\r\n        case SET_LOADING :\r\n            return {...state, isLoading: action.newLoadingStatus}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const logInTC = (requestData: RequestDataType) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setIsLoading(true))\r\n        authAPI.login(requestData)\r\n            .then(res => {\r\n                    dispatch(setProfile(res.data))\r\n                    dispatch(logInTrue(true))\r\n                }\r\n            )\r\n            .catch(error => {\r\n                const errMsg = error.response ? error.response.data.error\r\n                    : (error.message + ', more details in the console');\r\n                dispatch(setLoginError(errMsg))\r\n\r\n            })\r\n            .finally(() => {\r\n                    dispatch(setIsLoading(false))\r\n                }\r\n            )\r\n    }\r\n}\r\nexport const logOutTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setIsLoading(true))\r\n        authAPI.logOut()\r\n            .then(res => {\r\n\r\n                    dispatch(setProfile({\r\n                        _id: null,\r\n                        email: null,\r\n                        name: null,\r\n                        avatar: null,\r\n                        publicCardPacksCount: null,\r\n                        created: null,\r\n                        updated: null,\r\n                        isAdmin: null,\r\n                        verified: null,\r\n                        rememberMe: null,\r\n                        error: null\r\n                    }))\r\n                dispatch(logInTrue(false))\r\n                }\r\n            )\r\n            .catch(error => {\r\n                const errMsg = error.response ? error.response.data.error\r\n                    : (error.message + ', more details in the console');\r\n                dispatch(setLoginError(errMsg))\r\n            })\r\n            .finally(() => {\r\n                    dispatch(setIsLoading(false))\r\n                }\r\n            )\r\n    }\r\n}\r\n\r\n//types\r\n\r\nexport type LogInTrueType = ReturnType<typeof logInTrue>\r\nexport type SetLoginErrorType = ReturnType<typeof setLoginError>\r\nexport type SetLoadingType = ReturnType<typeof setIsLoading>\r\n\r\n\r\nexport type LoginReducerActionType = LogInTrueType | SetLoginErrorType | SetLoadingType\r\n\r\nexport default LoginReducer;\r\n","import {Dispatch} from 'redux';\r\nimport {authAPI, SignUpDataRequestType} from '../../dal/Api';\r\nimport {setIsLoading} from './login-reducer';\r\n\r\n\r\nconst REG_CORRECT = 'RegistrationReducer/REG_CORRECT';\r\nconst REG_ERROR = 'RegistrationReducer/REG_ERROR'\r\nconst SET_PROGRESS = 'RegistrationReducer/SET_PROGRESS'\r\n\r\n\r\nexport const setIsValidReg = (newStatus: boolean) => ({type: 'RegistrationReducer/REG_CORRECT' as const, newStatus});\r\nexport const setSignUpError = (ErrorMSG: string) => ({type: 'RegistrationReducer/REG_ERROR' as const, ErrorMSG});\r\nexport const setSignUpProgress = (NewProgress: NewProgressType) => ({\r\n    type: 'RegistrationReducer/SET_PROGRESS' as const,\r\n    NewProgress\r\n});\r\n\r\n\r\nlet InitialState = {\r\n    isValidReg: false,\r\n    signUpProgress: 'loading' as NewProgressType,\r\n    SignUpError: '',\r\n}\r\n\r\ntype InitialStateLoginType = typeof InitialState\r\n\r\nexport const RegistrationReducer = (state: InitialStateLoginType = InitialState, action: RegistrationReducerActionType): InitialStateLoginType => {\r\n    switch (action.type) {\r\n        case REG_CORRECT :\r\n            return {...state, isValidReg: action.newStatus}\r\n        case REG_ERROR :\r\n            return {...state, SignUpError: action.ErrorMSG}\r\n        case SET_PROGRESS :\r\n            return {...state, signUpProgress: action.NewProgress}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const SignUpTC = (requestData: SignUpDataRequestType) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setIsLoading(true))\r\n        authAPI.signUp(requestData)\r\n            .then(res => {\r\n                    dispatch(setIsValidReg(true))\r\n                    dispatch(setSignUpProgress('success'))\r\n                }\r\n            )\r\n            .catch(error => {\r\n                const errMsg = error.response ? error.response.data.error\r\n                    : (error.message + ', more details in the console');\r\n                dispatch(setSignUpProgress('error'))\r\n                dispatch(setSignUpError(errMsg))\r\n            })\r\n            .finally(() => {\r\n                    setTimeout(() => {\r\n                        dispatch(setIsLoading(false))\r\n                        dispatch(setSignUpProgress('loading'))\r\n                    }, 3000)\r\n                }\r\n            )\r\n    }\r\n\r\n}\r\n\r\n//types\r\n\r\nexport type setIsValidRegType = ReturnType<typeof setIsValidReg>\r\nexport type setSignUpErrorType = ReturnType<typeof setSignUpError>\r\nexport type setProgressType = ReturnType<typeof setSignUpProgress>\r\n\r\n\r\nexport type NewProgressType = 'loading' | 'success' | 'error'\r\n\r\n\r\nexport type RegistrationReducerActionType = setIsValidRegType | setSignUpErrorType | setProgressType\r\n\r\nexport default RegistrationReducer;\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\n\r\ntype ErrorWindowPropsType = {\r\n    isEmptyEmailMsg?:boolean\r\n    isEmptyPassMsg?:boolean\r\n    isEmptyPass1Msg?:boolean\r\n    minLengthEmailMsg?:boolean\r\n    minLengthPassMsg?:boolean\r\n    maxLengthPassMsg?:boolean\r\n    isValidEmailMsg?:boolean\r\n    isPasswordCorrectReEnter?:boolean\r\n    isEmptyNameError?:boolean\r\n    isEmptyUrlError?:boolean\r\n}\r\n\r\n\r\nexport const ErrorWindow=(props:ErrorWindowPropsType)=>{\r\n\r\n    return(\r\n        <div>\r\n            {props.isEmptyEmailMsg &&  <div style={{color: 'red'}}>Email field should be stuffed</div> }\r\n            {props.isEmptyPassMsg &&  <div style={{color: 'red'}}>Password field should be stuffed</div> }\r\n            {props.isEmptyPass1Msg &&  <div style={{color: 'red'}}>Password field should be stuffed</div> }\r\n            {props.isEmptyNameError &&  <div style={{color: 'red'}}>Name field should be stuffed</div> }\r\n            {props.isEmptyUrlError &&  <div style={{color: 'red'}}>URL field should be stuffed</div> }\r\n            {props.minLengthEmailMsg &&  <div style={{color: 'red'}}>Minimal length of email should be more than 3 symbols</div> }\r\n            {props.minLengthPassMsg &&  <div style={{color: 'red'}}>Minimal length of password should be more than 8 symbols</div> }\r\n            {props.maxLengthPassMsg &&  <div style={{color: 'red'}}>Maximal length of password should be low than 20 symbols</div> }\r\n            {props.isValidEmailMsg &&  <div style={{color: 'red'}}>Invalid email</div> }\r\n            {props.isPasswordCorrectReEnter &&  <div style={{color: 'red'}}>Entered passwords doesn't match</div> }\r\n        </div>\r\n    )\r\n}","import s from './Preloader.module.css';\r\nimport React from 'react';\r\n\r\nconst{loader}=s\r\n\r\nexport const Preloader =()=>{\r\n\r\n    return(\r\n        <div>\r\n            <div className={loader}>Loading...</div>\r\n        </div>\r\n    )\r\n\r\n\r\n}","import {Dispatch} from 'redux';\r\nimport {authAPI, forgotPassDataType, newPassDataType} from '../../dal/Api';\r\nimport {setIsLoading} from './login-reducer';\r\nimport {setSignUpProgress} from './registration-reducer';\r\n\r\n\r\nconst SET_IS_MESSAGE_SEND = 'AppReducer/SET_IS_MESSAGE_SEND';\r\nconst SET_ERROR_MESSAGE = 'AppReducer/SET_ERROR_MESSAGE';\r\n\r\n\r\nexport const SetIsMessageSend = (newStatus: isMessageSentStatusType) => ({\r\n    type: 'AppReducer/SET_IS_MESSAGE_SEND' as const,\r\n    newStatus\r\n});\r\nexport const SetErrorRecoveryPassMessage = (newMess: string) => ({\r\n    type: 'AppReducer/SET_ERROR_MESSAGE' as const,\r\n    newMess\r\n});\r\n\r\n\r\nlet InitialState = {\r\n    isMessageSend: 'error' as isMessageSentStatusType,\r\n    ErrorMessageRecoveryPassword: '' as string\r\n}\r\n\r\nexport type InitialStateLoginType = typeof InitialState\r\n\r\nexport const RecoverPassReducer = (state: InitialStateLoginType = InitialState, action: ProfileReducerActionType): InitialStateLoginType => {\r\n    switch (action.type) {\r\n        case SET_IS_MESSAGE_SEND :\r\n            return {...state, isMessageSend: action.newStatus}\r\n        case SET_ERROR_MESSAGE :\r\n            return {...state, ErrorMessageRecoveryPassword: action.newMess}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const SendMessage = (data: forgotPassDataType) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(SetIsMessageSend('loading'))\r\n        authAPI.forgotPass(data)\r\n            .then(res => {\r\n                    dispatch(SetIsMessageSend('sent'))\r\n                }\r\n            )\r\n            .catch(error => {\r\n                const errMsg = error.response ? error.response.data.error\r\n                    : (error.message + ', more details in the console');\r\n                dispatch(SetErrorRecoveryPassMessage(errMsg))\r\n                dispatch(SetIsMessageSend('error'))\r\n            })\r\n            .finally(() => {\r\n                    setTimeout(() => {\r\n                        dispatch(SetIsMessageSend('end'))\r\n                    }, 2000)\r\n                }\r\n            )\r\n    }\r\n}\r\nexport const CreateNewPassword = (data: newPassDataType) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(SetIsMessageSend('loading'))\r\n        authAPI.setNewPass(data)\r\n            .then(res => {\r\n                    dispatch(SetIsMessageSend('sent'))\r\n                }\r\n            )\r\n            .catch(error => {\r\n                const errMsg = error.response ? error.response.data.error\r\n                    : (error.message + ', more details in the console');\r\n                dispatch(SetErrorRecoveryPassMessage(errMsg))\r\n                dispatch(SetIsMessageSend('error'))\r\n            })\r\n            .finally(() => {\r\n                    setTimeout(() => {\r\n                        dispatch(SetIsMessageSend('end'))\r\n                    }, 2000)\r\n                }\r\n            )\r\n    }\r\n}\r\n\r\n\r\n//types\r\n\r\nexport type isMessageSentStatusType = 'sent' | 'loading' | 'error'|'end'\r\n\r\nexport type setIsMessageSendType = ReturnType<typeof SetIsMessageSend>\r\nexport type setErrorRecoveryPassMessageType = ReturnType<typeof SetErrorRecoveryPassMessage>\r\n\r\nexport type ProfileReducerActionType = setIsMessageSendType | setErrorRecoveryPassMessageType\r\n\r\nexport default RecoverPassReducer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport cn from './Login.module.css';\r\nimport SuperInputText from '../../common/c1-SuperInputText/SuperInputText';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport SuperButton from '../../common/c2-SuperButton/SuperButton';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {logInTC, setLoginError} from '../../../bll/redusers/login-reducer';\r\nimport {AppStoreType} from '../../../bll/store/store';\r\nimport {PATH} from '../../routes/Routes';\r\nimport {setIsValidReg} from '../../../bll/redusers/registration-reducer';\r\nimport {ErrorWindow} from '../../common/ErrorWindow/ErrorWindow';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {SetIsMessageSend} from '../../../bll/redusers/recoverPass-reducer';\r\n\r\n\r\ntype ValidatorType = {\r\n    isEmpty: boolean\r\n    minLength: number\r\n    maxLength: number,\r\n    isValidEmail?: boolean\r\n}\r\n\r\nconst useValidator = (value: any, validator: ValidatorType) => {\r\n\r\n    const [isEmpty, setIsEmpty] = useState(true);\r\n    const [minLengthError, setMinLengthError] = useState(false);\r\n    const [maxLengthError, setMaxLengthError] = useState(false);\r\n    const [isValidEmailError, setIsValidEmailError] = useState(false);\r\n    const [inputValid, setInputValid] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        for (const valid in validator) {\r\n            switch (valid) {\r\n                case 'minLength':\r\n                    value.length < validator[valid] ? setMinLengthError(true) : setMinLengthError(false)\r\n                    break;\r\n                case 'isEmpty':\r\n                    value ? setIsEmpty(false) : setIsEmpty(true)\r\n                    break;\r\n                case 'maxLength':\r\n                    value.length > validator[valid] ? setMaxLengthError(true) : setMaxLengthError(false)\r\n                    break;\r\n                case 'isValidEmail':\r\n                    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n                    re.test(String(value).toLowerCase()) ? setIsValidEmailError(false) : setIsValidEmailError(true)\r\n                    break;\r\n            }\r\n        }\r\n    }, [value])\r\n\r\n\r\n    useEffect(() => {\r\n        if (isEmpty || minLengthError || maxLengthError || isValidEmailError) {\r\n            setInputValid(false)\r\n        } else {\r\n            setInputValid(true)\r\n        }\r\n    }, [isEmpty, minLengthError, maxLengthError, isValidEmailError])\r\n\r\n\r\n    return {\r\n        isEmpty,\r\n        minLengthError,\r\n        maxLengthError,\r\n        isValidEmailError,\r\n        inputValid\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport const useInput = (initialValue: any, validator: ValidatorType) => {\r\n    const [value, setValue] = useState(initialValue);\r\n    const [touched, setTouched] = useState(false);\r\n\r\n    const valid = useValidator(value, validator)\r\n\r\n    const onChange = (e: ChangeEvent<HTMLInputElement> | any) => {\r\n        if (e.hasOwnProperty('target')) {\r\n            setValue(e.target.value)\r\n            } else {\r\n                setValue(e)\r\n            }\r\n        }\r\n\r\n        const onBlur = (t: boolean) => {\r\n            setTouched(t)\r\n        }\r\n\r\n        return {\r\n            value,\r\n            touched,\r\n            onChange,\r\n            onBlur,\r\n            ...valid\r\n        }\r\n\r\n    }\r\n\r\n    const Login = () => {\r\n\r\n        const email = useInput('', {isEmpty: true, minLength: 3, maxLength: 50, isValidEmail: false});\r\n        const password = useInput('', {isEmpty: true, minLength: 7, maxLength: 20});\r\n        const rememberMe = useInput(false, {isEmpty: true, minLength: 7, maxLength: 20});\r\n\r\n        const isEmptyEmailMsg = email.touched && email.isEmpty;\r\n        const isEmptyPassMsg = password.touched && password.isEmpty\r\n        //проверка на пустоту\r\n\r\n        const minLengthEmailMsg = email.touched && email.minLengthError;\r\n        const minLengthPassMsg = password.touched && password.minLengthError;\r\n        // проверка на минимальную длинну\r\n\r\n        const isValidEmailMsg = email.touched && email.isValidEmailError;\r\n        const maxLengthPassMsg = password.touched && password.maxLengthError;\r\n        // проверка на валидность имейла и максимальную длинну пароля\r\n\r\n\r\n        const isLoginDisabled = !email.inputValid || !password.inputValid;\r\n        //отключаем кнопку если хоть одна ошибка есть\r\n\r\n        const dispatch = useDispatch();\r\n\r\n        const ErrorRequestMsg = useSelector<AppStoreType, string>(state => state.login.logInError);\r\n        const isLogin = useSelector<AppStoreType, boolean>(state => state.login.logIn);\r\n        const isLoading = useSelector<AppStoreType, boolean>(state => state.login.isLoading);\r\n\r\n\r\n        const onClickHandler = () => {\r\n            const requestData = {\r\n                email: email.value,\r\n                password: password.value,\r\n                rememberMe: rememberMe.value\r\n            }\r\n\r\n            dispatch(logInTC(requestData));\r\n            email.onChange('')\r\n            email.onBlur(false)\r\n            password.onChange('')\r\n            password.onBlur(false)\r\n            rememberMe.onChange(false)\r\n\r\n        }\r\n\r\n\r\n        const onClickForgotHandler = () => {\r\n            dispatch(SetIsMessageSend('error')) //чтобы если вдруг после редиректа на логин из восстановления пароля пользователь решит снова зайти на забыл пароль\r\n        }\r\n\r\n        const signUpClickHandler = () => {\r\n            dispatch(setIsValidReg(false))\r\n        }\r\n\r\n\r\n        if (email.touched || email.value || password.touched || password.value) {\r\n            dispatch(setLoginError(''))\r\n        }\r\n\r\n\r\n        if (isLoading) {\r\n            return <Preloader/>\r\n        }\r\n\r\n\r\n        if (isLogin) {\r\n            return <Redirect to={PATH.PROFILE}/>\r\n        }\r\n\r\n\r\n        return (\r\n            <div className={cn.autorization}>\r\n                <div className={cn.form}>\r\n                    <div className={cn.hTit}>\r\n                        It-incubator\r\n                    </div>\r\n                    <div className={cn.tit}>\r\n                        Login\r\n                    </div>\r\n                    <form action=\"\">\r\n\r\n\r\n                        {ErrorRequestMsg && <div style={{color: 'red'}}>{ErrorRequestMsg}</div>}\r\n\r\n\r\n                        <ErrorWindow isEmptyEmailMsg={isEmptyEmailMsg} minLengthEmailMsg={minLengthEmailMsg}\r\n                                     isValidEmailMsg={isValidEmailMsg}/>\r\n\r\n\r\n                        <SuperInputText onChange={email.onChange} onBlur={() => {\r\n                            email.onBlur(true)\r\n                        }} value={email.value}\r\n                                        label={'Email'}/>\r\n\r\n                        <ErrorWindow isEmptyPassMsg={isEmptyPassMsg} minLengthPassMsg={minLengthPassMsg}\r\n                                     maxLengthPassMsg={maxLengthPassMsg}/>\r\n\r\n\r\n                        <SuperInputText onChange={password.onChange} onBlur={() => {\r\n                            password.onBlur(true)\r\n                        }} value={password.value}\r\n                                        label={'Password'} type={'password'}/>\r\n\r\n\r\n                        <input value={rememberMe.value} onChange={rememberMe.onChange} type={'checkbox'}/> remember me\r\n\r\n\r\n                        <NavLink onClick={onClickForgotHandler} className={cn.linkforgot} to={PATH.RECOVER_PASS}>Forgot\r\n                            password</NavLink>\r\n\r\n\r\n                        <div><NavLink onClick={signUpClickHandler} className={cn.linkforgot} to={PATH.REGISTRATION}>Sign\r\n                            up</NavLink></div>\r\n                        {/*Если пользователь который только что зарегался решит еще раз зарегаться нам нужно откатить IsValidRec в registration reducer*/}\r\n\r\n\r\n                        <SuperButton onClick={onClickHandler} disabled={isLoginDisabled}\r\n                                     style={{width: 280, marginTop: 80, marginBottom: 40}}>Login</SuperButton>\r\n\r\n\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    export default Login;\r\n\r\n","export default __webpack_public_path__ + \"static/media/EmptyAva.832c8a5e.png\";","import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport cn from './EditProfile.module.css'\r\nimport EmptyAva from '../EmptyAva.png'\r\nimport {AppStoreType} from '../../../../bll/store/store';\r\nimport {EditProfileTC, InitialStateLoginType} from '../../../../bll/redusers/profile-reducer';\r\nimport {Preloader} from '../../../common/Preloader/Preloader';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {PATH} from '../../../routes/Routes';\r\nimport {useInput} from '../../login/login';\r\nimport SuperInputText from '../../../common/c1-SuperInputText/SuperInputText';\r\nimport {ErrorWindow} from '../../../common/ErrorWindow/ErrorWindow';\r\n\r\ntype EditModePropsType = {\r\n    onClickHandler: (newStatus: boolean) => void\r\n    isEditMode: boolean\r\n}\r\n\r\nconst EditProfile = (props: EditModePropsType) => {\r\n\r\n\r\n    const isLogin = useSelector<AppStoreType, boolean>(state => state.login.logIn);\r\n    const isLoading = useSelector<AppStoreType, boolean>(state => state.login.isLoading);\r\n    const profile = useSelector<AppStoreType, InitialStateLoginType>(state => state.profile)\r\n    const dispatch = useDispatch();\r\n\r\n    const {onClickHandler} = props\r\n\r\n    const {\r\n        _id,\r\n        email,\r\n        name,\r\n        avatar\r\n    } = profile.profile\r\n\r\n\r\n    const nameInput = useInput(name, {isEmpty: true, minLength: 3, maxLength: 50})\r\n    const avatarInput = useInput(avatar ? avatar : '', {isEmpty: true, minLength: 3, maxLength: 50})\r\n\r\n\r\n    const saveClickHandler = (newName: string, newAva: string) => {\r\n        const data = {\r\n            name: newName ? newName : '',\r\n            avatar: newAva ? newAva : ''\r\n        }\r\n        dispatch(EditProfileTC(data))\r\n        onClickHandler(false)\r\n    }\r\n\r\n\r\n    if (isLoading) {\r\n        return <Preloader/>\r\n    }\r\n\r\n\r\n    if (!isLogin) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    const isEmptyNameError = nameInput.isEmpty && nameInput.touched;\r\n    const isEmptyUrlError = avatarInput.isEmpty && avatarInput.touched;\r\n\r\n    return (\r\n        <div className={cn.form}>\r\n            <div className={cn.hTit}>\r\n                It-incubator\r\n            </div>\r\n            <ErrorWindow isEmptyNameError={isEmptyNameError}/>\r\n\r\n            <div>Name: <SuperInputText placeholder={nameInput.value ? '' : 'Enter your new nick name'} onChange={nameInput.onChange} onBlur={() => {\r\n                nameInput.onBlur(true)\r\n            }} value={nameInput.value} label={''}/></div>\r\n\r\n            <div className={cn.ava_img}><img src={avatar ? avatar : EmptyAva} alt=\"avatar\"/></div>\r\n            <ErrorWindow isEmptyUrlError={isEmptyUrlError}/>\r\n            <div>Avatar: <SuperInputText placeholder={avatarInput.value ? '' : 'Enter new image url'}\r\n                                         onChange={avatarInput.onChange} onBlur={() => {\r\n                avatarInput.onBlur(true)\r\n            }} value={avatarInput.value} label={''}/></div>\r\n            <div className={cn.tit}>\r\n                <div>Email:{email}</div>\r\n                <div>ID:{_id}</div>\r\n            </div>\r\n            <button disabled={!(nameInput.value && avatarInput.value)} onClick={() => {\r\n                saveClickHandler(nameInput.value, avatarInput.value)\r\n            }}>Save\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EditProfile;\r\n","import React, {useState} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppStoreType} from '../../../bll/store/store';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport {PATH} from '../../routes/Routes';\r\nimport {InitialStateLoginType} from '../../../bll/redusers/profile-reducer';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport cn from './profile.module.css';\r\nimport EmptyAva from './EmptyAva.png'\r\nimport EditProfile from './EditProfile/EditProfile';\r\nimport SuperButton from '../../common/c2-SuperButton/SuperButton';\r\n\r\n\r\nconst Profile = () => {\r\n\r\n    const isLogin = useSelector<AppStoreType, boolean>(state => state.login.logIn);\r\n    const ErrorRequestMsg = useSelector<AppStoreType, string>(state => state.login.logInError);\r\n    const isLoading = useSelector<AppStoreType, boolean>(state => state.login.isLoading);\r\n    const profile = useSelector<AppStoreType, InitialStateLoginType>(state => state.profile)\r\n\r\n\r\n    const[isEditMode, setIsEditMode]=useState(false)\r\n\r\n    const onClickHandler=(newStatus:boolean)=>{\r\n        setIsEditMode(newStatus)\r\n    }\r\n\r\n    const {\r\n        _id,\r\n        email,\r\n        name,\r\n        avatar,\r\n        publicCardPacksCount,\r\n        created,\r\n        updated,\r\n        isAdmin,\r\n        verified,\r\n        rememberMe,\r\n        error\r\n    } = profile.profile\r\n\r\n\r\n    if (isLoading) {\r\n        return <Preloader/>\r\n    }\r\n\r\n\r\n    if (!isLogin) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n\r\n    return (\r\n         <div className={cn.autorization}>\r\n             {!isEditMode &&<div className={cn.form}>\r\n                <div className={cn.hTit}>\r\n                    It-incubator\r\n                </div>\r\n                 <div className={cn.nameProfile}>{name}</div>\r\n                <div className={cn.ava_img}><img src={avatar? avatar : EmptyAva} alt=\"avator\"/></div>\r\n                <div className={cn.tit}>\r\n                    <div >Email:{email}</div>\r\n                    <div>ID:{_id}</div>\r\n                </div>\r\n                <button onClick={()=>{onClickHandler(true)}}>Edit profile</button>\r\n                <SuperButton><NavLink to={PATH.CARDS_TABLET} style={{color:'white',textDecoration:'none'}}>Go to cards tablet</NavLink></SuperButton>\r\n            </div>}\r\n             {isEditMode && <EditProfile onClickHandler={onClickHandler} isEditMode={isEditMode} />}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","export default __webpack_public_path__ + \"static/media/mail.4e31cb8b.png\";","export default __webpack_public_path__ + \"static/media/error.3b8bd8e7.png\";","export default __webpack_public_path__ + \"static/media/success.6ee71b34.png\";","import s from './ResponsePage.module.css';\r\nimport React from 'react';\r\nimport mail from './mail.png';\r\nimport error from './error.png';\r\nimport success from './success.png';\r\n\r\nimport {PATH} from '../../routes/Routes';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst{autorization,form,hTit,tit,imgMailSent,infText,linkforgot}=s;\r\n\r\n\r\n\r\ntype ResponsePagePropsType ={\r\n    email?:string\r\n    typeOfPage:'sent'|'error'|'success'|'cardsError'\r\n    errorText?:string\r\n}\r\n\r\n\r\n\r\nexport const ResponsePage =(props:ResponsePagePropsType)=>{\r\n    const{email,typeOfPage,errorText}=props;\r\n    return (\r\n         <div className={autorization}>\r\n             {typeOfPage==='sent'&& <div className={form}>\r\n                <div className={hTit}>\r\n                    It-incubator\r\n                </div>\r\n                <div className={tit}>\r\n                    Check Email\r\n                </div>\r\n                <div className={imgMailSent}>\r\n                <img src={mail} alt=\"mailSent\"/>\r\n            </div>\r\n                <div className={infText}>\r\n                    We've sent an Email with instruction to {email}\r\n                </div>\r\n                 <NavLink className={linkforgot} to={PATH.LOGIN}>Sign in</NavLink>\r\n            </div>}\r\n             {typeOfPage==='error'&& <div className={form}>\r\n                 <div className={hTit}>\r\n                     It-incubator\r\n                 </div>\r\n                 <div className={tit}>\r\n                     Some Error\r\n                 </div>\r\n                 <div className={imgMailSent}>\r\n                     <img src={error} alt=\"error\"/>\r\n                 </div>\r\n                 <div className={infText}>\r\n                     Happen some error, await a few seconds...\r\n                 </div>\r\n             </div>}\r\n             {typeOfPage==='success'&& <div className={form}>\r\n                 <div className={hTit}>\r\n                     It-incubator\r\n                 </div>\r\n                 <div className={tit}>\r\n                     Success!\r\n                 </div>\r\n                 <div className={imgMailSent}>\r\n                     <img src={success} alt=\"success\"/>\r\n                 </div>\r\n             </div>}\r\n             {typeOfPage==='cardsError'&& <div className={form}>\r\n                 <div className={hTit}>\r\n                     It-incubator\r\n                 </div>\r\n                 <div className={tit} style={{color:'red'}}>\r\n                     Some Error\r\n                 </div>\r\n                 <div className={infText}>\r\n                     Happen some error, await a few seconds...\r\n                 </div>\r\n             </div>}\r\n        </div>)\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport cn from './recoverPass.module.css';\r\nimport SuperInputText from '../../common/c1-SuperInputText/SuperInputText';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport SuperButton from '../../common/c2-SuperButton/SuperButton';\r\nimport {PATH} from '../../routes/Routes';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStoreType} from '../../../bll/store/store';\r\nimport {useInput} from '../login/login';\r\nimport {isMessageSentStatusType, SendMessage} from '../../../bll/redusers/recoverPass-reducer';\r\nimport {setLoginError} from '../../../bll/redusers/login-reducer';\r\nimport {ErrorWindow} from '../../common/ErrorWindow/ErrorWindow';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {ResponsePage} from '../../common/ResponsePage/ResponsePage';\r\n\r\n\r\nconst RecoverPass = () => {\r\n    const email = useInput('', {isEmpty: true, minLength: 3, maxLength: 50, isValidEmail: false});\r\n    const dispatch = useDispatch();\r\n    const isMessageSentStatus = useSelector<AppStoreType, isMessageSentStatusType>(state => state.recoverPass.isMessageSend)\r\n    const ErrorRequestMsg = useSelector<AppStoreType, string>(state => state.recoverPass.ErrorMessageRecoveryPassword);\r\n    const isLogin = useSelector<AppStoreType, boolean>(state => state.login.logIn);\r\n\r\n\r\n    const onClickHandler = () => {\r\n        const message = {\r\n            email: email.value,\r\n            from: 'tablet-cards-front-admin <skillforce@mail.ru>',\r\n            message: `<div style=\"background-color: lime; padding: 15px\">\t\r\n\t        password recovery link: \r\n\t        <a href='https://skillforce.github.io/fridayProject/#/set-new-password/$token$'>\r\n\t        link</a></div>`\r\n        }\r\n        dispatch(SendMessage(message))\r\n    }\r\n\r\n    if (email.touched || email.value) {\r\n        dispatch(setLoginError(''))\r\n    }\r\n\r\n    const minLengthEmailMsg = email.touched && email.minLengthError;\r\n    const isValidEmailMsg = email.touched && email.isValidEmailError;\r\n    const isEmptyEmailMsg = email.touched && email.isEmpty;\r\n    const isLoginDisabled = !email.inputValid && !minLengthEmailMsg;\r\n\r\n\r\n    if (isLogin) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    if (isMessageSentStatus === 'loading') {\r\n        return <Preloader/>\r\n    }\r\n\r\n\r\n    if (isMessageSentStatus === 'sent') {\r\n        return <ResponsePage typeOfPage={'sent'} email={email.value}/>\r\n    }\r\n\r\n\r\n\r\n    if (isMessageSentStatus === 'end') {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={cn.autorization}>\r\n            <div className={cn.form}>\r\n                <div className={cn.hTit}>\r\n                    It-incubator\r\n                </div>\r\n                <div className={cn.tit}>\r\n                    Forgot your password?\r\n                </div>\r\n\r\n\r\n                <ErrorWindow minLengthEmailMsg={minLengthEmailMsg} isValidEmailMsg={isValidEmailMsg}\r\n                             isEmptyEmailMsg={isEmptyEmailMsg}/>\r\n\r\n\r\n                <form action=\"\">\r\n                    {ErrorRequestMsg && <div>{ErrorRequestMsg}</div>}\r\n\r\n                    <SuperInputText onChange={email.onChange} onBlur={() => {\r\n                        email.onBlur(true)\r\n                    }} value={email.value}\r\n                                    label={'Email'}/>\r\n\r\n\r\n                    <NavLink className={cn.linkforgot} to={PATH.LOGIN}>Try Log In</NavLink>\r\n\r\n\r\n                    <SuperButton disabled={isLoginDisabled} onClick={onClickHandler}\r\n                                 style={{width: 280, marginTop: 80, marginBottom: 40}}>SEND\r\n                        MESSAGE</SuperButton>\r\n\r\n\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RecoverPass;\r\n","import React from 'react';\r\nimport cn from './registation.module.css';\r\nimport SuperInputText from '../../common/c1-SuperInputText/SuperInputText';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport SuperButton from '../../common/c2-SuperButton/SuperButton';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStoreType} from '../../../bll/store/store';\r\nimport {PATH} from '../../routes/Routes';\r\nimport {setSignUpError, SignUpTC} from '../../../bll/redusers/registration-reducer';\r\nimport {useInput} from '../login/login';\r\nimport {ErrorWindow} from '../../common/ErrorWindow/ErrorWindow';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {ResponsePage} from '../../common/ResponsePage/ResponsePage';\r\n\r\n\r\nconst Registration = () => {\r\n\r\n    const email = useInput('', {isEmpty: true, minLength: 3, maxLength: 50, isValidEmail: false});\r\n    const password = useInput('', {isEmpty: true, minLength: 7, maxLength: 20});\r\n    const password1 = useInput('', {isEmpty: true, minLength: 7, maxLength: 20});\r\n\r\n\r\n    const isEmptyEmailMsg = email.touched && email.isEmpty;\r\n    const isEmptyPassMsg = password.touched && password.isEmpty;\r\n    //проверка на пустоту\r\n\r\n    const minLengthEmailMsg = email.touched && email.minLengthError;\r\n    const minLengthPassMsg = password.touched && password.minLengthError;\r\n    // проверка на минимальную длинну\r\n\r\n    const isValidEmailMsg = email.touched && email.isValidEmailError;\r\n    const maxLengthPassMsg = password.touched && password.maxLengthError;\r\n    // проверка на валидность имейла и максимальную длинну пароля\r\n\r\n    const isLoginDisabled = email.inputValid && password.inputValid;\r\n    //отключаем кнопку если хоть одна ошибка есть\r\n\r\n\r\n    const isPasswordCorrectReEnter = password.value !== password1.value && password.touched;\r\n    const isPasswordDublicate = password.value === password1.value;\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const isLogin = useSelector<AppStoreType, boolean>(state => state.login.logIn);\r\n    const isLoading = useSelector<AppStoreType, boolean>(state => state.login.isLoading);\r\n    const isCorrectReg = useSelector<AppStoreType, boolean>(state => state.registration.isValidReg);\r\n    const SignUpErrorMsg = useSelector<AppStoreType, string>(state => state.registration.SignUpError);\r\n    const signUpProgress = useSelector<AppStoreType, string>(state => state.registration.signUpProgress);\r\n\r\n\r\n    const onClickHandler = () => {\r\n\r\n        const requestData = {\r\n            email: email.value,\r\n            password: password.value,\r\n        }\r\n\r\n        dispatch(SignUpTC(requestData));\r\n\r\n        email.onChange('')\r\n        email.onBlur(false)\r\n        password.onChange('')\r\n        password.onBlur(false)\r\n        password1.onBlur(false)\r\n        password1.onChange('')\r\n\r\n    } //обработка клика на кнопку SignUp\r\n\r\n\r\n    if (email.touched || email.value || password.touched || password.value || password1.touched || password1.value) {\r\n        dispatch(setSignUpError(''))\r\n    } //зачищаем ошибки работы с сервером при попытки нового введения символов пользователем\r\n\r\n\r\n    if (isLoading && signUpProgress === 'loading') {\r\n        return <Preloader/>\r\n    }\r\n    if (isLoading && signUpProgress === 'success') {\r\n        return <ResponsePage typeOfPage={'success'}/>\r\n    }\r\n    if (isLoading && signUpProgress === 'error') {\r\n        return <ResponsePage typeOfPage={'error'}/>\r\n    }\r\n\r\n    if (isCorrectReg) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    if (isLogin) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={cn.autorization}>\r\n            <div className={cn.form}>\r\n                <div className={cn.hTit}>\r\n                    It-incubator\r\n                </div>\r\n                <div className={cn.tit}>\r\n                    Sign Up\r\n                </div>\r\n                <form>\r\n                    {SignUpErrorMsg && <div style={{color: 'red'}}>{SignUpErrorMsg}</div>}\r\n\r\n                    <ErrorWindow isEmptyEmailMsg={isEmptyEmailMsg} minLengthEmailMsg={minLengthEmailMsg}\r\n                                 isValidEmailMsg={isValidEmailMsg}/>\r\n\r\n                    <SuperInputText onChange={email.onChange} onBlur={() => {\r\n                        email.onBlur(true)\r\n                    }} value={email.value}\r\n                                    label={'Enter your email'}/>\r\n\r\n                    <ErrorWindow isEmptyPassMsg={isEmptyPassMsg} minLengthPassMsg={minLengthPassMsg}\r\n                                 maxLengthPassMsg={maxLengthPassMsg}/>\r\n\r\n\r\n                    <SuperInputText onChange={password.onChange} onBlur={() => {\r\n                        password.onBlur(true)\r\n                    }} value={password.value}\r\n                                    label={'Enter your unique password'} type={'password'}/>\r\n\r\n                    <ErrorWindow isPasswordCorrectReEnter={isPasswordCorrectReEnter}/>\r\n\r\n                    <SuperInputText onChange={password1.onChange} onBlur={() => {\r\n                        password1.onBlur(true)\r\n                    }} value={password1.value}\r\n                                    label={'Repeat your password'} type={'password'}/>\r\n\r\n\r\n                    <NavLink className={cn.linkforgot} to={PATH.LOGIN}>Sign in</NavLink>\r\n                    <SuperButton onClick={onClickHandler} disabled={!isPasswordDublicate || !isLoginDisabled}\r\n                                 style={{width: 280, marginTop: 80, marginBottom: 40}}>Sign up</SuperButton>\r\n\r\n\r\n                </form>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Registration;\r\n","import {Dispatch} from 'redux';\r\nimport {CardsPackAPI, CardsPackType} from '../../dal/Api';\r\nimport {AppStoreType} from '../store/store';\r\nimport {SetCardInfo, SetSearchCardEmpty} from './card-reducer';\r\n\r\n\r\nconst SET_TABLET_INFO = 'TabletReducer/SET_TABLET_INFO';\r\nconst SET_CURRENT_PAGE = 'TabletReducer/SET_CURRENT_PAGE';\r\nconst SET_MIN_MAX_CARDS_COUNT = 'TabletReducer/SET_MIN_MAX_CARDS_COUNT';\r\nconst SET_SORT_STATUS = 'TabletReducer/SET_SORT_STATUS';\r\nconst SET_SEARCH_TEXT = 'TabletReducer/SET_SEARCH_TEXT';\r\nconst SET_SEARCHED_BY = 'TabletReducer/SET_SEARCHED_BY';\r\nconst SET_SEARCH_CARDS_ARR = 'TabletReducer/SET_SEARCH_CARDS_ARR';\r\nconst SET_SEARCH_MODE = 'TabletReducer/SET_SEARCH_MODE';\r\nconst SET_PAGE_FOR_SEARCH_MODE = 'TabletReducer/SET_PAGE_FOR_SEARCH_MODE';\r\nconst SET_SEARCH_EMPTY = 'TabletReducer/SET_SEARCH_EMPTY';\r\nconst SET_LOADING_STATUS = 'TabletReducer/SET_LOADING_STATUS';\r\nconst SET_ERROR_TEXT = 'TabletReducer/SET_ERROR_TEXT';\r\nconst SET_CHECK_BOX_VALUE = 'TabletReducer/SET_CHECK_BOX_VALUE';\r\n\r\n\r\nexport const SetTabletInfo = (newTabletInfo: InitialStateTabletType) => ({\r\n    type: 'TabletReducer/SET_TABLET_INFO' as const,\r\n    newTabletInfo\r\n});\r\n\r\nexport const SetCurrentPage = (newPage: number) => ({\r\n    type: 'TabletReducer/SET_CURRENT_PAGE' as const,\r\n    newPage\r\n});\r\n\r\nexport const SetMinMaxCardsCurrent = (newMinMaxCurrent: number[]) => ({\r\n    type: 'TabletReducer/SET_MIN_MAX_CARDS_COUNT' as const,\r\n    newMinMaxCurrent\r\n});\r\n\r\nexport const SetSortStatus = (newSortStatus: SortPackType) => ({\r\n    type: 'TabletReducer/SET_SORT_STATUS' as const,\r\n    newSortStatus\r\n});\r\n\r\nexport const SetSearchText = (newText: string) => ({\r\n    type: 'TabletReducer/SET_SEARCH_TEXT' as const,\r\n    newText\r\n});\r\nexport const SetSearchedBy = (newStatus: SearchTextType) => ({\r\n    type: 'TabletReducer/SET_SEARCHED_BY' as const,\r\n    newStatus\r\n});\r\nexport const SetSearchCardsArr = (newCards: cardType[] | null) => ({\r\n    type: 'TabletReducer/SET_SEARCH_CARDS_ARR' as const,\r\n    newCards\r\n});\r\nexport const SetSearchMode = (newMode: boolean) => ({\r\n    type: 'TabletReducer/SET_SEARCH_MODE' as const,\r\n    newMode\r\n});\r\nexport const SetPageForSearchMode = (newPage: number) => ({\r\n    type: 'TabletReducer/SET_PAGE_FOR_SEARCH_MODE' as const,\r\n    newPage\r\n});\r\nexport const SetSearchEmpty = (msg: string) => ({\r\n    type: 'TabletReducer/SET_SEARCH_EMPTY' as const,\r\n    msg\r\n});\r\nexport const SetLoadingStatus = (newStatus: loadingStatusType) => ({\r\n    type: 'TabletReducer/SET_LOADING_STATUS' as const,\r\n    newStatus\r\n});\r\nexport const SetErrorText = (newText: string) => ({\r\n    type: 'TabletReducer/SET_ERROR_TEXT' as const,\r\n    newText\r\n});\r\nexport const SetCheckBoxValue = (newStatus: boolean) => ({\r\n    type: 'TabletReducer/SET_CHECK_BOX_VALUE' as const,\r\n    newStatus\r\n});\r\n\r\n\r\nlet InitialState = {\r\n    cardPacks: [] as cardType[],\r\n    searchCardsArr: null as Array<cardType[]> | null,\r\n    cardPacksTotalCount: 0,\r\n    maxCardsCount: 40,\r\n    minCardsCount: 0,\r\n    page: 1,\r\n    pageCount: 10,\r\n    currentPage: 1,\r\n    sortStatus: '0updated' as SortPackType,\r\n    searchText: '',\r\n    checkBoxValue: false,\r\n    searchedBy: '' as SearchTextType,\r\n    searchMode: false as boolean,\r\n    pageForSearchMode: 0 as number,\r\n    searchEmpty: '' as string,\r\n    loadingStatus: 'success' as loadingStatusType,\r\n    errorText: '' as string\r\n}\r\n\r\nexport type InitialStateTabletType = typeof InitialState\r\n\r\nexport const TabletReducer = (state: InitialStateTabletType = InitialState, action: AllTabletActionType):any => {\r\n    switch (action.type) {\r\n        case SET_TABLET_INFO :\r\n            return {\r\n                ...state,\r\n                cardPacks: [...action.newTabletInfo.cardPacks],\r\n                cardPacksTotalCount: action.newTabletInfo.cardPacksTotalCount\r\n            }\r\n        case SET_CURRENT_PAGE :\r\n            return {...state, currentPage: action.newPage}\r\n        case SET_MIN_MAX_CARDS_COUNT :\r\n            return {...state, minCardsCount: action.newMinMaxCurrent[0], maxCardsCount: action.newMinMaxCurrent[1]}\r\n        case SET_SORT_STATUS :\r\n            return {...state, sortStatus: action.newSortStatus}\r\n        case SET_SEARCH_TEXT :\r\n            return {...state, searchText: action.newText}\r\n        case SET_SEARCHED_BY :\r\n            return {...state, searchedBy: action.newStatus}\r\n        case SET_SEARCH_CARDS_ARR :\r\n            return {...state, searchCardsArr: action.newCards}\r\n        case SET_SEARCH_MODE :\r\n            return {...state, searchMode: action.newMode}\r\n        case SET_PAGE_FOR_SEARCH_MODE :\r\n            return {...state, pageForSearchMode: action.newPage}\r\n        case SET_SEARCH_EMPTY :\r\n            return {...state, searchEmpty: action.msg}\r\n        case SET_LOADING_STATUS :\r\n            return {...state, loadingStatus: action.newStatus}\r\n        case SET_ERROR_TEXT :\r\n            return {...state, errorText: action.newText}\r\n        case SET_CHECK_BOX_VALUE :\r\n            return {...state, checkBoxValue: action.newStatus}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const getCarsPack = () => {\r\n    return (dispatch: Dispatch, getState: () => AppStoreType) => {\r\n        const state = getState()\r\n        const page = state.tablet.currentPage\r\n        const pageCount = state.tablet.pageCount\r\n        const min = state.tablet.minCardsCount\r\n        const max = state.tablet.maxCardsCount\r\n        const sortPacks = state.tablet.sortStatus\r\n        const checkBoxValue = state.tablet.checkBoxValue\r\n        const user_id = checkBoxValue ? state.profile.profile._id : '';\r\n\r\n        dispatch(SetLoadingStatus('loading'));\r\n        const promise = CardsPackAPI.getCards({page, pageCount, min, max, sortPacks, user_id})\r\n            .then(res => {\r\n                if (res.data.cardPacks.length !== 0) {\r\n                    dispatch(SetSearchEmpty(''))\r\n                    dispatch(SetTabletInfo(res.data))\r\n                } else {\r\n                    dispatch(SetTabletInfo({...res.data, cardPacksTotalCount: 1, cardPacks: []}))\r\n                    dispatch(SetSearchEmpty('not found any cards'))\r\n                }\r\n            })\r\n\r\n            .catch(error => {\r\n                dispatch(SetErrorText(error.toString()))\r\n                dispatch(SetLoadingStatus('error'));\r\n                setTimeout(() => {\r\n                    dispatch(SetLoadingStatus('redirect'))\r\n                }, 3000)\r\n\r\n            })\r\n        Promise.all([promise]).then(res => setTimeout(() => {\r\n                dispatch(SetLoadingStatus('success'))\r\n            }, 2000)\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const SearchCorrectCards = () => {\r\n    return (dispatch: Dispatch, getState: () => AppStoreType) => {\r\n        const state = getState()\r\n        const searchText = state.tablet.searchText\r\n        const searchBy = state.tablet.searchedBy\r\n        const min = state.tablet.minCardsCount\r\n        const max = state.tablet.maxCardsCount\r\n        const sortPacks = state.tablet.sortStatus\r\n        const checkBoxValue = state.tablet.checkBoxValue\r\n        const user_id = checkBoxValue ? state.profile.profile._id : '';\r\n\r\n        dispatch(SetLoadingStatus('loading'));\r\n        const promise = CardsPackAPI.getCards({page: 1, pageCount: 4000, min, max, sortPacks, user_id})\r\n            .then(res => {\r\n                    if (searchBy === 'By name') {\r\n                        const newCardsPacks = res.data.cardPacks.filter((t: cardType) => t.name.toLowerCase().indexOf(searchText.toLowerCase()) !== -1)\r\n                        const newTotalCount = newCardsPacks.length\r\n                        const temp = []\r\n                        if (newCardsPacks.length !== 0) {\r\n                            while (newCardsPacks.length > 0) {\r\n                                temp.push(newCardsPacks.splice(0, 10))\r\n                            }\r\n                            dispatch(SetSearchEmpty(''))\r\n                            dispatch(SetSearchMode(true))\r\n                            dispatch(SetSearchCardsArr(temp))\r\n                            dispatch(SetTabletInfo({...res.data, cardPacksTotalCount: newTotalCount, cardPacks: []}))\r\n                        } else {\r\n                            dispatch(SetSearchMode(true))\r\n                            dispatch(SetSearchCardsArr(null))\r\n                            dispatch(SetTabletInfo({...res.data, cardPacksTotalCount: 1, cardPacks: []}))\r\n                            dispatch(SetSearchEmpty('not found by this name'))\r\n                        }\r\n                    }\r\n                    if (searchBy === 'By creator') {\r\n                        const newCardsPacks = res.data.cardPacks.filter((t: cardType) => t.user_name.toLowerCase().indexOf(searchText.toLowerCase()) !== -1)\r\n                        const newTotalCount = newCardsPacks.length\r\n                        const temp = []\r\n                        if (newCardsPacks.length !== 0) {\r\n                            while (newCardsPacks.length > 0) {\r\n                                temp.push(newCardsPacks.splice(0, 10))\r\n                            }\r\n                            dispatch(SetSearchEmpty(''))\r\n                            dispatch(SetSearchMode(true))\r\n                            dispatch(SetSearchCardsArr(temp))\r\n                            dispatch(SetTabletInfo({...res.data, cardPacksTotalCount: newTotalCount, cardPacks: []}))\r\n                        } else {\r\n                            dispatch(SetSearchMode(true))\r\n                            dispatch(SetSearchCardsArr(null))\r\n                            dispatch(SetTabletInfo({...res.data, cardPacksTotalCount: 1, cardPacks: []}))\r\n                            dispatch(SetSearchEmpty('not found by this creator'))\r\n                        }\r\n                    }\r\n\r\n                }\r\n            )\r\n            .catch(error => {\r\n                dispatch(SetErrorText(error.toString()))\r\n                dispatch(SetLoadingStatus('error'));\r\n                setTimeout(() => {\r\n                    dispatch(SetLoadingStatus('redirect'))\r\n                }, 3000)\r\n\r\n            })\r\n        Promise.all([promise]).then(res => setTimeout(() => {\r\n                dispatch(SetLoadingStatus('success'))\r\n            }, 2000)\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const PostCards = (params: CardsPackType = {name: 'aaaaa'}) => {\r\n    return (dispatch: Dispatch<any>, getState: () => AppStoreType) => {\r\n        const searchMode = getState().tablet.searchMode\r\n        dispatch(SetLoadingStatus('loading'));\r\n        const promise = CardsPackAPI.addNewCards(params)\r\n            .then(res => searchMode ? dispatch(SearchCorrectCards()) : dispatch(getCarsPack()))\r\n            .catch(error => {\r\n                dispatch(SetErrorText(error.toString()))\r\n                dispatch(SetLoadingStatus('error'));\r\n                setTimeout(() => {\r\n                    dispatch(SetLoadingStatus('redirect'))\r\n                }, 3000)\r\n            })\r\n    }\r\n}\r\nexport const DeleteCards = (cardId: string) => {\r\n    return (dispatch: Dispatch<any>, getState: () => AppStoreType) => {\r\n        dispatch(SetLoadingStatus('loading'));\r\n        const searchMode = getState().tablet.searchMode\r\n        CardsPackAPI.deleteCards(cardId)\r\n            .then(res => searchMode ? dispatch(SearchCorrectCards()) : dispatch(getCarsPack()))\r\n            .catch(error => {\r\n                dispatch(SetErrorText(error.toString()))\r\n                dispatch(SetLoadingStatus('error'));\r\n                setTimeout(() => {\r\n                    dispatch(SetLoadingStatus('redirect'))\r\n                }, 3000)\r\n\r\n            })\r\n    }\r\n}\r\nexport const updateCards = (cardId: string,newName?:string) => {\r\n    return (dispatch: Dispatch<any>, getState: () => AppStoreType) => {\r\n        const searchMode = getState().tablet.searchMode\r\n        dispatch(SetLoadingStatus('loading'));\r\n        CardsPackAPI.updateCards({_id:cardId,name:newName})\r\n            .then(res => searchMode ? dispatch(SearchCorrectCards()) : dispatch(getCarsPack()))\r\n            .catch(error => {\r\n                dispatch(SetErrorText(error.toString()))\r\n                dispatch(SetLoadingStatus('error'));\r\n                setTimeout(() => {\r\n                    dispatch(SetLoadingStatus('redirect'))\r\n                }, 3000)\r\n            })\r\n    }\r\n}\r\n\r\n\r\n//types\r\n\r\n\r\nexport type SetTabletInfoType = ReturnType<typeof SetTabletInfo>\r\nexport type SetCurrentPageType = ReturnType<typeof SetCurrentPage>\r\nexport type SetMinMaxCardsCurrentType = ReturnType<typeof SetMinMaxCardsCurrent>\r\nexport type SetSortStatusType = ReturnType<typeof SetSortStatus>\r\nexport type SetSearchTextType = ReturnType<typeof SetSearchText>\r\nexport type SetSearchedByType = ReturnType<typeof SetSearchedBy>\r\nexport type SetSearchCardsArrType = ReturnType<typeof SetSearchCardsArr>\r\nexport type SetSearchModeType = ReturnType<typeof SetSearchMode>\r\nexport type SetPageForSearchModeType = ReturnType<typeof SetPageForSearchMode>\r\nexport type SetSearchEmptyType = ReturnType<typeof SetSearchEmpty>\r\nexport type SetLoadingStatusType = ReturnType<typeof SetLoadingStatus>\r\nexport type SetErrorTextType = ReturnType<typeof SetErrorText>\r\nexport type SetCheckBoxValueType = ReturnType<typeof SetCheckBoxValue>\r\n\r\nexport type AllTabletActionType =\r\n    SetTabletInfoType\r\n    | SetCurrentPageType\r\n    | SetMinMaxCardsCurrentType\r\n    | SetSortStatusType\r\n    | SetSearchTextType\r\n    | SetSearchedByType\r\n    | SetSearchCardsArrType\r\n    | SetSearchModeType\r\n    | SetPageForSearchModeType\r\n    | SetSearchEmptyType\r\n    | SetLoadingStatusType\r\n    | SetErrorTextType\r\n    | SetCheckBoxValueType\r\n\r\nexport type cardType = {\r\n    _id: string\r\n    user_id: string\r\n    name: string\r\n    path: string\r\n    cardsCount: number\r\n    grade: number\r\n    shots: number\r\n    rating: number\r\n    type: string\r\n    created: Date\r\n    updated: Date\r\n    __v: number\r\n    user_name: string\r\n    private: boolean\r\n}\r\nexport type SortPackType = '0cardsCount' | '1cardsCount' | '0name' | '1name' | '0updated' | '1updated'\r\nexport type SearchTextType = 'By name' | 'By creator' | ''\r\nexport type loadingStatusType = 'success' | 'error' | 'loading' | 'redirect'\r\n\r\n\r\nexport default TabletReducer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {Dispatch} from 'redux';\r\nimport {CardAPI, newCardDataType, newUpdateCardDataType} from '../../dal/Api';\r\nimport {AppStoreType} from '../store/store';\r\nimport {loadingStatusType} from './tablet-reducer';\r\n\r\n\r\nconst SET_CARD_INFO = 'CardReducer/SET_CARD_INFO';\r\nconst SET_LOADING_CARD_STATUS = 'CardReducer/SET_LOADING_CARD_STATUS';\r\nconst SET_PAGE = 'CardReducer/SET_PAGE';\r\nconst SET_GRADE_VALUE = 'CardReducer/SET_GRADE_VALUE';\r\nconst SET_SORT_CARD_STATUS = 'CardReducer/SET_SORT_CARD_STATUS';\r\nconst SET_SEARCH_CARD_TEXT = 'CardReducer/SET_SEARCH_CARD_TEXT';\r\nconst SET_SEARCHED_CARD_BY = 'CardReducer/SET_SEARCHED_CARD_BY';\r\nconst SET_SEARCH_CARD_MODE = 'CardReducer/SET_SEARCH_CARD_MODE';\r\nconst SET_SEARCH_EMPTY = 'CardReducer/SET_SEARCH_EMPTY';\r\nconst SET_SEARCH_CARD_ARR = 'CardReducer/SET_SEARCH_CARD_ARR';\r\nconst SET_PAGE_FOR_SEARCH_CARD_MODE = 'CardReducer/SET_PAGE_FOR_SEARCH_CARD_MODE';\r\nconst SET_PAGE_COUNT = 'CardReducer/SET_PAGE_COUNT';\r\nconst SET_ERROR_CARD_TEXT = 'CardReducer/SET_ERROR_CARD_TEXT';\r\n\r\n\r\nexport const SetCardInfo = (newCardInfo: InitialStateCardType) => ({\r\n    type: 'CardReducer/SET_CARD_INFO' as const,\r\n    newCardInfo\r\n});\r\n\r\nexport const SetPage = (newPage: number) => ({\r\n    type: 'CardReducer/SET_PAGE' as const,\r\n    newPage\r\n});\r\nexport const SetLoadingCardStatus = (newStatus: loadingStatusType) => ({\r\n    type: 'CardReducer/SET_LOADING_CARD_STATUS' as const,\r\n    newStatus\r\n});\r\nexport const SetGradeValue = (newRangeValue: number[]) => ({\r\n    type: 'CardReducer/SET_GRADE_VALUE' as const,\r\n    newRangeValue\r\n});\r\nexport const SetSortCardStatus = (newSortStatus: sortCardsStatusType) => ({\r\n    type: 'CardReducer/SET_SORT_CARD_STATUS' as const,\r\n    newSortStatus\r\n});\r\nexport const SetSearchCardText = (newText: string) => ({\r\n    type: 'CardReducer/SET_SEARCH_CARD_TEXT' as const,\r\n    newText\r\n});\r\nexport const SetSearchedCardBy = (newStatus: SearchCardTextType) => ({\r\n    type: 'CardReducer/SET_SEARCHED_CARD_BY' as const,\r\n    newStatus\r\n});\r\nexport const SetSearchCardMode = (newStatus: boolean) => ({\r\n    type: 'CardReducer/SET_SEARCH_CARD_MODE' as const,\r\n    newStatus\r\n});\r\nexport const SetSearchCardEmpty = (newText: string) => ({\r\n    type: 'CardReducer/SET_SEARCH_EMPTY' as const,\r\n    newText\r\n});\r\nexport const SetSearchCardArr = (newArr: Array<OneCardsType[]> | null) => ({\r\n    type: 'CardReducer/SET_SEARCH_CARD_ARR' as const,\r\n    newArr\r\n});\r\nexport const SetPageForSearchCardMode = (newPage: number) => ({\r\n    type: 'CardReducer/SET_PAGE_FOR_SEARCH_CARD_MODE' as const,\r\n    newPage\r\n});\r\nexport const SetPageCount = (newPage: number) => ({\r\n    type: 'CardReducer/SET_PAGE_COUNT' as const,\r\n    newPage\r\n});\r\nexport const SetErrorCardText = (newText: string) => ({\r\n    type: 'CardReducer/SET_ERROR_CARD_TEXT' as const,\r\n    newText\r\n});\r\n\r\n\r\nlet InitialState = {\r\n    cards: [] as OneCardsType[],\r\n    searchCardArr: null as Array<OneCardsType[]> | null,\r\n    cardsTotalCount: 0,\r\n    maxGrade: 0,\r\n    minGrade: 5,\r\n    page: 1,\r\n    pageCount: 4,\r\n    packUserId: '' as string,\r\n    gradeValue: [0, 5],\r\n    loadingStatusCard: 'success' as loadingStatusCardType,\r\n    sortCards: '0update' as sortCardsStatusType,\r\n    searchCardText: '',\r\n    searchedCardBy: '' as SearchCardTextType,\r\n    searchCardMode: false as boolean,\r\n    searchCardEmpty: '' as string,\r\n    pageForSearchCardMode: 0 as number,\r\n    errorCardText: '' as string\r\n}\r\n\r\nexport type InitialStateCardType = typeof InitialState\r\n\r\nexport const CardReducer = (state: InitialStateCardType = InitialState, action: AllTabletActionType): any => {\r\n    switch (action.type) {\r\n        case SET_CARD_INFO :\r\n            return {...state, ...action.newCardInfo}\r\n        case SET_LOADING_CARD_STATUS :\r\n            return {...state, loadingStatusCard: action.newStatus}\r\n        case SET_PAGE :\r\n            return {...state, page: action.newPage}\r\n        case SET_GRADE_VALUE :\r\n            return {...state, gradeValue: action.newRangeValue}\r\n        case SET_SORT_CARD_STATUS :\r\n            return {...state, sortCards: action.newSortStatus}\r\n        case SET_SEARCH_CARD_TEXT :\r\n            return {...state, searchCardText: action.newText}\r\n        case SET_SEARCHED_CARD_BY :\r\n            return {...state, searchedCardBy: action.newStatus}\r\n        case SET_SEARCH_CARD_MODE :\r\n            return {...state, searchCardMode: action.newStatus}\r\n        case SET_SEARCH_EMPTY :\r\n            return {...state, searchCardEmpty: action.newText}\r\n        case SET_SEARCH_CARD_ARR :\r\n            return {...state, searchCardArr: action.newArr}\r\n        case SET_PAGE_FOR_SEARCH_CARD_MODE :\r\n            return {...state, pageForSearchCardMode: action.newPage}\r\n        case SET_PAGE_COUNT :\r\n            return {...state, pageCount: action.newPage}\r\n        case SET_ERROR_CARD_TEXT :\r\n            return {...state, errorCardText: action.newText}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const getCard = (id: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppStoreType) => {\r\n        const state = getState()\r\n        const page = state.card.page\r\n        const pageCount = state.card.pageCount\r\n        const gradeValue = state.card.gradeValue\r\n        const sortCards = state.card.sortCards\r\n        dispatch(SetLoadingCardStatus('loading'));\r\n        const promise = CardAPI.getCards({\r\n            cardsPack_id: id,\r\n            page,\r\n            pageCount,\r\n            min: gradeValue[0],\r\n            max: gradeValue[1],\r\n            sortCards\r\n        })\r\n            .then(res => {\r\n                    if (res.data.cards.length !== 0) {\r\n                        dispatch(SetSearchCardEmpty(''))\r\n                        dispatch(SetCardInfo(res.data))\r\n                    } else {\r\n                        dispatch(SetCardInfo({...res.data, cardsTotalCount: 1, cards: []}))\r\n                        dispatch(SetSearchCardEmpty('not found any cards'))\r\n                    }\r\n                }\r\n            )\r\n            .catch(error => {\r\n                dispatch(SetErrorCardText(error.toString()))\r\n                dispatch(SetLoadingCardStatus('error'));\r\n                setTimeout(() => {\r\n                    dispatch(SetLoadingCardStatus('redirect'))\r\n                }, 3000)\r\n\r\n            })\r\n        Promise.all([promise]).then(res => setTimeout(() => {\r\n                dispatch(SetLoadingCardStatus('success'))\r\n            }, 2000)\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const searchCard = (id: string) => {\r\n    debugger\r\n    return (dispatch: Dispatch, getState: () => AppStoreType) => {\r\n        const state = getState()\r\n        const gradeValue = state.card.gradeValue\r\n        const sortCards = state.card.sortCards\r\n        const searchedCardBy = state.card.searchedCardBy\r\n        const searchCardText = state.card.searchCardText\r\n        const pageCount = state.card.pageCount\r\n        dispatch(SetLoadingCardStatus('loading'));\r\n        const promise = CardAPI.getCards({\r\n            cardsPack_id: id,\r\n            page: 1,\r\n            pageCount: 100,\r\n            min: gradeValue[0],\r\n            max: gradeValue[1],\r\n            sortCards\r\n        })\r\n            .then(res => {\r\n                    if (searchedCardBy === 'By question') {\r\n\r\n                        const newCardsPacks = res.data.cards.filter((t: OneCardsType) => t.question.toLowerCase().indexOf(searchCardText.toLowerCase()) !== -1)\r\n                        const newTotalCount = newCardsPacks.length\r\n                        const temp = []\r\n                        if (newCardsPacks.length !== 0) {\r\n                            while (newCardsPacks.length > 0) {\r\n                                temp.push(newCardsPacks.splice(0, 4))\r\n                            }\r\n                            dispatch(SetSearchCardEmpty(''))\r\n                            dispatch(SetSearchCardMode(true))\r\n                            dispatch(SetSearchCardArr(temp))\r\n                            dispatch(SetCardInfo({...res.data, cardsTotalCount: newTotalCount, cards: []}))\r\n                        } else {\r\n                            dispatch(SetSearchCardMode(true))\r\n                            dispatch(SetSearchCardArr(null))\r\n                            dispatch(SetCardInfo({...res.data, cardsTotalCount: 1, cards: []}))\r\n                            dispatch(SetSearchCardEmpty('not found by this question'))\r\n\r\n                        }\r\n                    }\r\n                    if (searchedCardBy === 'By answer') {\r\n                        const newCardsPacks = res.data.cards.filter((t: OneCardsType) => t.answer.toLowerCase().indexOf(searchCardText.toLowerCase()) !== -1)\r\n                        const newTotalCount = newCardsPacks.length\r\n                        const temp = []\r\n                        if (newCardsPacks.length !== 0) {\r\n                            while (newCardsPacks.length > 0) {\r\n                                temp.push(newCardsPacks.splice(0, 4))\r\n                            }\r\n                            dispatch(SetSearchCardEmpty(''))\r\n                            dispatch(SetSearchCardMode(true))\r\n                            dispatch(SetSearchCardArr(temp))\r\n                            dispatch(SetCardInfo({...res.data, cardsTotalCount: newTotalCount, cards: []}))\r\n                        } else {\r\n                            dispatch(SetSearchCardMode(true))\r\n                            dispatch(SetSearchCardArr(null))\r\n                            dispatch(SetCardInfo({...res.data, cardsTotalCount: 1, cards: []}))\r\n                            dispatch(SetSearchCardEmpty('not found by this answer'))\r\n                        }\r\n                    }\r\n\r\n                }\r\n            )\r\n            .catch(error => {\r\n                dispatch(SetErrorCardText(error.toString()))\r\n                dispatch(SetLoadingCardStatus('error'));\r\n                setTimeout(() => {\r\n                    dispatch(SetLoadingCardStatus('redirect'))\r\n                }, 3000)\r\n\r\n            })\r\n        Promise.all([promise]).then(res => setTimeout(() => {\r\n                dispatch(SetLoadingCardStatus('success'))\r\n            }, 2000)\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const AddCard = (newCardParams: newCardDataType) => {\r\n    return (dispatch: Dispatch<any>, getState: () => AppStoreType) => {\r\n        dispatch(SetLoadingCardStatus('loading'));\r\n        const searchMode = getState().card.searchCardMode\r\n        CardAPI.addNewCards(newCardParams)\r\n            .then(res => searchMode ? dispatch(searchCard(newCardParams.cardsPack_id)) : dispatch(getCard(newCardParams.cardsPack_id)))\r\n            .catch(error => {\r\n                dispatch(SetErrorCardText(error.toString()))\r\n                dispatch(SetLoadingCardStatus('error'));\r\n                setTimeout(() => {\r\n                    dispatch(SetLoadingCardStatus('redirect'))\r\n                }, 3000)\r\n            })\r\n    }\r\n}\r\nexport const UpdateCard = (newCardParams: newUpdateCardDataType, cardsPack_id: string) => {\r\n    return (dispatch: Dispatch<any>, getState: () => AppStoreType) => {\r\n        dispatch(SetLoadingCardStatus('loading'));\r\n        const searchMode = getState().card.searchCardMode\r\n        CardAPI.updateCard(newCardParams)\r\n            .then(res => searchMode ? dispatch(searchCard(cardsPack_id)) : dispatch(getCard(cardsPack_id)))\r\n            .catch(error => {\r\n                dispatch(SetErrorCardText(error.toString()))\r\n                dispatch(SetLoadingCardStatus('error'));\r\n                setTimeout(() => {\r\n                    dispatch(SetLoadingCardStatus('redirect'))\r\n                }, 3000)\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport const DeleteCard = (cardId: string, cardsPack_id: string) => {\r\n\r\n    return (dispatch: Dispatch<any>, getState: () => AppStoreType) => {\r\n        debugger\r\n        const searchMode = getState().card.searchCardMode\r\n        dispatch(SetLoadingCardStatus('loading'));\r\n        CardAPI.deleteCard(cardId)\r\n            .then(res => searchMode ? dispatch(searchCard(cardsPack_id)) : dispatch(getCard(cardsPack_id)))\r\n            .catch(error => {\r\n                dispatch(SetErrorCardText(error.toString()))\r\n                dispatch(SetLoadingCardStatus('error'));\r\n                setTimeout(() => {\r\n                    dispatch(SetLoadingCardStatus('redirect'))\r\n                }, 3000)\r\n            })\r\n    }\r\n}\r\n\r\n\r\n//types\r\n\r\n\r\nexport type SetCardInfoType = ReturnType<typeof SetCardInfo>\r\nexport type SetLoadingCardStatusType = ReturnType<typeof SetLoadingCardStatus>\r\nexport type SetPageType = ReturnType<typeof SetPage>\r\nexport type SetGradeValueType = ReturnType<typeof SetGradeValue>\r\nexport type SetSortCardStatusType = ReturnType<typeof SetSortCardStatus>\r\nexport type SetSearchCardTextType = ReturnType<typeof SetSearchCardText>\r\nexport type SetSearchedCardByType = ReturnType<typeof SetSearchedCardBy>\r\nexport type SetSearchCardModeType = ReturnType<typeof SetSearchCardMode>\r\nexport type SetSearchCardEmptyType = ReturnType<typeof SetSearchCardEmpty>\r\nexport type SetSearchCardArrType = ReturnType<typeof SetSearchCardArr>\r\nexport type SetPageForSearchCardModeType = ReturnType<typeof SetPageForSearchCardMode>\r\nexport type SetPageCountType = ReturnType<typeof SetPageCount>\r\nexport type SetErrorCardTextType = ReturnType<typeof SetErrorCardText>\r\n\r\nexport type AllTabletActionType =\r\n    SetCardInfoType\r\n    | SetLoadingCardStatusType\r\n    | SetPageType\r\n    | SetGradeValueType\r\n    | SetSortCardStatusType\r\n    | SetSearchCardTextType\r\n    | SetSearchedCardByType\r\n    | SetSearchCardModeType\r\n    | SetSearchCardEmptyType\r\n    | SetSearchCardArrType\r\n    | SetPageForSearchCardModeType\r\n    | SetPageCountType\r\n    | SetErrorCardTextType\r\n\r\n\r\nexport type OneCardsType = {\r\n    answer: string\r\n    question: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    created: Date\r\n    updated: Date\r\n    __v: number\r\n    _id: string\r\n}\r\n\r\n\r\n//\r\nexport type sortCardsStatusType =\r\n    '0grade'\r\n    | '1grade'\r\n    | '0updated'\r\n    | '1updated'\r\n    | '1question'\r\n    | '0question'\r\n    | '0answer'\r\n    | '1answer'\r\nexport type SearchCardTextType = 'By question' | 'By answer' | ''\r\nexport type loadingStatusCardType = 'success' | 'error' | 'loading' | 'redirect'\r\n\r\n\r\nexport default CardReducer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport s from './Paginator.module.css';\r\nimport {useDispatch} from 'react-redux';\r\nimport {SetCurrentPage, SetPageForSearchMode} from '../../../bll/redusers/tablet-reducer';\r\nimport {SetPage, SetPageForSearchCardMode} from '../../../bll/redusers/card-reducer';\r\n\r\n\r\nconst {page, pageSelect, btnGroup} = s;\r\n\r\n\r\ntype PaginatorPropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage?: number\r\n    searchMode: boolean\r\n    pageForSearchMode: number\r\n    cardType?: boolean\r\n}\r\n\r\n\r\nconst Paginator = (props: PaginatorPropsType) => {\r\n    const {totalItemsCount, pageSize, currentPage, searchMode, pageForSearchMode, cardType} = props;\r\n\r\n    const dispatch = useDispatch();\r\n    const portionSize = 10;\r\n\r\n\r\n    const onPageChanged = (p: number) => {\r\n        if (!cardType) {\r\n            {\r\n                !searchMode && dispatch(SetCurrentPage(p))\r\n            }\r\n            {\r\n                searchMode && dispatch(SetPageForSearchMode(p - 1))\r\n            }\r\n        } else {\r\n            {\r\n                !searchMode && dispatch(SetPage(p))\r\n            }\r\n            {\r\n                searchMode && dispatch(SetPageForSearchCardMode(p - 1))\r\n            }\r\n        }\r\n    }\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n    let allPages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        allPages.push(i)\r\n    }\r\n\r\n    const portionCount = Math.ceil(pagesCount / portionSize);\r\n\r\n    const [portionNumber, setPortionNumber] = useState(1);\r\n\r\n\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    const rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n    return (\r\n\r\n        <div className={btnGroup}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>Prev</button>}\r\n\r\n            {allPages.filter(t => t >= leftPortionPageNumber && t <= rightPortionPageNumber)\r\n                .map((p) => {\r\n                    return <span\r\n                        className={searchMode ? pageForSearchMode === p - 1 ? pageSelect : page : currentPage === p ? pageSelect : page}\r\n                        key={p}\r\n                        onClick={() => {\r\n                            onPageChanged(p)\r\n                        }}>{p}</span>\r\n                })}\r\n\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>Next</button>}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Paginator;\r\n\r\n\r\n","import s from './sortBtn.module.css';\r\nimport React from 'react';\r\nimport {sortCardsStatusType} from '../../../bll/redusers/card-reducer';\r\nimport {SortPackType} from '../../../bll/redusers/tablet-reducer';\r\n\r\n\r\nconst{activeBtn}=s;\r\n\r\nexport type SortBtnType = {\r\n    sortStatus: sortCardsStatusType | SortPackType\r\n    onSortBtnHandler: (newSortStatus: any)=>void\r\n    property:string\r\n}\r\n\r\n\r\nexport const SortBtn = (props: SortBtnType) => {\r\n    const {sortStatus, onSortBtnHandler,property} = props;\r\n    return (\r\n        <div>\r\n            <button className={sortStatus.indexOf('1'+property) !== -1 ? activeBtn : ''}\r\n                    onClick={()=>{onSortBtnHandler(1+property)}}>/\\\r\n            </button>\r\n            <button className={sortStatus.indexOf('0'+property) !== -1 ? activeBtn  : ''}\r\n                    onClick={()=>{onSortBtnHandler(0+property)}}>\\/\r\n            </button>\r\n\r\n        </div>)\r\n}","import {NavLink} from 'react-router-dom';\r\nimport SuperButton from '../../../common/c2-SuperButton/SuperButton';\r\nimport React from 'react';\r\nimport {cardType} from '../../../../bll/redusers/tablet-reducer';\r\nimport s from './CardOnly.module.css';\r\n\r\n\r\ntype CardOnlyPropsType = {\r\n    searchEmpty: string\r\n    cardPacks: cardType[]\r\n    searchCardsArr: Array<cardType[]> | null\r\n    pageForSearchMode: number\r\n    profileId: string | null\r\n    setActiveModalUpdateDeck: (newActiveStatus: boolean) => void\r\n    setActiveModalDeleteDeck: (newActiveStatus: boolean) => void\r\n    setCardIdInModal: (newId: string) => void\r\n    setNameDeck: (newText: string) => void\r\n\r\n}\r\n\r\nconst {tableTitle, btnBlock} = s\r\n\r\n\r\nexport const CardOnly = (props: CardOnlyPropsType) => {\r\n\r\n    const {\r\n        pageForSearchMode,\r\n        searchEmpty,\r\n        cardPacks,\r\n        searchCardsArr,\r\n        profileId,\r\n        setActiveModalUpdateDeck,\r\n        setCardIdInModal,\r\n        setActiveModalDeleteDeck,\r\n        setNameDeck\r\n    } = props\r\n\r\n    const onClickUpdateBtnHandler = (newId: string, name: string) => {\r\n        setCardIdInModal(newId)\r\n        setNameDeck(name)\r\n        setActiveModalUpdateDeck(true)\r\n    }\r\n    const onClickDeleteBtnHandler = (newId: string) => {\r\n        setCardIdInModal(newId)\r\n        setActiveModalDeleteDeck(true)\r\n    }\r\n\r\n\r\n    return (\r\n        <tbody>\r\n        {searchEmpty &&\r\n        <div className={tableTitle}>{searchEmpty}</div>}\r\n        {cardPacks && cardPacks.map((t: any) =>\r\n            <tr key={t._id}>\r\n                <td>{t.name}</td>\r\n                <td>{t.cardsCount}</td>\r\n                <td>{t.updated ? new Date(t.updated).toLocaleDateString() : ''}</td>\r\n                <td>{t.user_name}</td>\r\n                <td className={btnBlock}><NavLink\r\n                    to={'/card/' + t._id}><SuperButton>look</SuperButton></NavLink>\r\n                    {t.cardsCount !== 0 && <NavLink to={'/game/' + t._id}><SuperButton>play</SuperButton></NavLink>}\r\n                    {t.user_id === profileId &&\r\n                    <SuperButton onClick={() => onClickDeleteBtnHandler(t._id)}>del</SuperButton>}\r\n                    {t.user_id === profileId &&\r\n                    <SuperButton onClick={() => onClickUpdateBtnHandler(t._id, t.name)}>update</SuperButton>}\r\n                </td>\r\n            </tr>)}\r\n\r\n        {searchCardsArr && searchCardsArr[pageForSearchMode].map((t: any) =>\r\n            <tr key={t._id}>\r\n                <td>{t.name}</td>\r\n                <td>{t.cardsCount}</td>\r\n                <td>{t.updated ? new Date(t.updated).toLocaleDateString() : ''}</td>\r\n                <td>{t.user_name}</td>\r\n                <td className={btnBlock}><NavLink\r\n                    to={'/card/' + t._id}><SuperButton>look</SuperButton></NavLink>\r\n\r\n                    {t.cardsCount !== 0 && <NavLink to={'/game/' + t._id}><SuperButton>play</SuperButton></NavLink>}\r\n                    {t.user_id === profileId &&\r\n                    <SuperButton onClick={() => onClickDeleteBtnHandler(t._id)}>del</SuperButton>}\r\n                    {t.user_id === profileId &&\r\n                    <SuperButton onClick={() => onClickUpdateBtnHandler(t._id, t.name)}>update</SuperButton>}\r\n                </td>\r\n            </tr>)}\r\n        </tbody>\r\n    )\r\n}","import s from './CardsDeckProfile.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {PATH} from '../../../routes/Routes';\r\nimport SuperButton from '../../../common/c2-SuperButton/SuperButton';\r\nimport {Range} from 'rc-slider';\r\nimport React from 'react';\r\nimport {SearchTextType} from '../../../../bll/redusers/tablet-reducer';\r\n\r\n\r\ntype CardsDeckProfilePropsType = {\r\n    avatar: string | null\r\n    name: string | null\r\n    _id: string | null\r\n    rangeValue: number[]\r\n    onClickSearchBtnHandler: (newMinMaxCurrent?: number[], sortBy?: SearchTextType) => void\r\n    onChangeRangeHandler: (newRangeValue: number[]) => void\r\n    cardPacksTotalCount: number | null\r\n    setActiveModalAddDeck?: (newActiveStatus: boolean) => void\r\n}\r\n\r\nexport const CardsDeckProfile = (props: CardsDeckProfilePropsType) => {\r\n    const {user, user_card, logo, name_profile, about, polz, polztit, rangeValues, rangeClass} = s;\r\n    const {\r\n        avatar,\r\n        name,\r\n        _id,\r\n        rangeValue,\r\n        onClickSearchBtnHandler,\r\n        onChangeRangeHandler,\r\n        cardPacksTotalCount,\r\n        setActiveModalAddDeck\r\n    } = props;\r\n    return (\r\n        <div className={user}>\r\n            <div className={user_card}>\r\n                <div className={logo}>\r\n                    <NavLink to={PATH.PROFILE}><img src={avatar ? avatar : ''} alt=\"\"/></NavLink>\r\n                </div>\r\n                <div className={name_profile}>\r\n                    {name}\r\n                </div>\r\n                <div className={about}>\r\n                    {_id}\r\n                </div>\r\n                {setActiveModalAddDeck && <SuperButton onClick={() => setActiveModalAddDeck(true)}>ADD NEW DECK</SuperButton>}\r\n            </div>\r\n\r\n            <div className={polz}>\r\n                <div className={polztit}>\r\n                    Current of cards:{cardPacksTotalCount}\r\n                </div>\r\n                <div className={rangeValues}>\r\n                    <div>min:{rangeValue[0]}</div>\r\n                    <div>max:{rangeValue[1]}</div>\r\n                </div>\r\n                <div className={rangeClass}>\r\n                    <Range min={0} max={200} defaultValue={rangeValue} value={rangeValue}\r\n                           onChange={onChangeRangeHandler}/>\r\n                </div>\r\n                <SuperButton onClick={() => onClickSearchBtnHandler(rangeValue)}>search</SuperButton>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {SelectHTMLAttributes, DetailedHTMLProps, ChangeEvent} from 'react'\r\nimport s from './SuperSelect.module.css';\r\n\r\nconst{select}=s;\r\ntype DefaultSelectPropsType = DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>\r\n\r\ntype SuperSelectPropsType = DefaultSelectPropsType & {\r\n    options?: any[]\r\n    onChangeOption?: (option: any) => void\r\n\r\n}\r\n\r\nconst SuperSelect: React.FC<SuperSelectPropsType> = (\r\n    {\r\n        options,\r\n        onChange, onChangeOption,\r\n        ...restProps\r\n    }\r\n) => {\r\n    const mappedOptions: any[] = options ? options.map((t, i) => (<option key={i}>{t}</option>)) : [];\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        if(e.currentTarget.value && onChangeOption){\r\n            onChangeOption(e.currentTarget.value)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <select className={select} onChange={onChangeCallback} {...restProps}>\r\n            {mappedOptions}\r\n        </select>\r\n    )\r\n}\r\n\r\nexport default SuperSelect\r\n","import s from '../../pages/tablet-cards/tablet-cards.module.css';\r\nimport SuperInputText from '../c1-SuperInputText/SuperInputText';\r\nimport SuperButton from '../c2-SuperButton/SuperButton';\r\nimport SuperSelect from '../c5-SuperSelect/SuperSelect';\r\nimport React, {SyntheticEvent} from 'react';\r\n\r\n\r\ntype RangeBlockType = {\r\n    selectedParams: any\r\n    onHandlerSearch: (e: SyntheticEvent<HTMLInputElement>) => void\r\n    onClickSearchBtnHandler: any\r\n    search: string\r\n    searchMode: boolean\r\n    onAllPagesHandler: () => void\r\n    selectParamsOptions: any\r\n    setOptionParams: any\r\n    searchProperty:string[]\r\n\r\n}\r\n\r\n\r\nexport const SearchBlock = (props: RangeBlockType) => {\r\n\r\n    const {\r\n        selectedParams,\r\n        onHandlerSearch,\r\n        onClickSearchBtnHandler,\r\n        search,\r\n        searchMode,\r\n        onAllPagesHandler,\r\n        selectParamsOptions,\r\n        setOptionParams,\r\n        searchProperty\r\n    } = props;\r\n    return (\r\n        <div className={s.inp}>\r\n            <div style={{display: 'flex'}}>\r\n                {selectedParams === searchProperty[0] &&\r\n                <SuperInputText onChange={onHandlerSearch} value={search} label=\"Search by name\"/>}\r\n                {selectedParams === searchProperty[1] &&\r\n                <SuperInputText onChange={onHandlerSearch} value={search} label=\"Search by creator\"/>}\r\n                <SuperButton disabled={search === ''}\r\n                             onClick={() => onClickSearchBtnHandler(undefined, selectedParams)}>search</SuperButton>\r\n                {searchMode && <SuperButton onClick={onAllPagesHandler}>go to all</SuperButton>}\r\n            </div>\r\n            <SuperSelect onChangeOption={setOptionParams} options={selectParamsOptions}/>\r\n        </div>\r\n    )\r\n\r\n\r\n}","import s from './Modal.module.css';\r\n\r\nconst {modal, modal_content, modal_active, modal_content_active} = s;\r\n\r\n\r\ntype ModalPropsType = {\r\n    active: boolean\r\n    setActive: (newActiveStatus: boolean) => void\r\n    children:any\r\n\r\n}\r\n\r\n\r\nexport const Modal = (props: ModalPropsType) => {\r\n\r\n    const {active, setActive,children} = props\r\n    return (\r\n        <div className={active ? modal_active : modal} onClick={() => setActive(false)}>\r\n            <div className={active ? modal_content_active : modal_content} onClick={event => event.stopPropagation()}>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, {SyntheticEvent, useEffect, useState} from 'react';\r\nimport s from './tablet-cards.module.css';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {\r\n    DeleteCards,\r\n    getCarsPack,\r\n    InitialStateTabletType,\r\n    PostCards,\r\n    SearchCorrectCards,\r\n    SearchTextType,\r\n    SetCheckBoxValue,\r\n    SetMinMaxCardsCurrent,\r\n    SetSearchCardsArr,\r\n    SetSearchedBy,\r\n    SetSearchEmpty,\r\n    SetSearchMode,\r\n    SetSearchText,\r\n    SetSortStatus,\r\n    SortPackType,\r\n    updateCards\r\n} from '../../../bll/redusers/tablet-reducer';\r\nimport {AppStoreType} from '../../../bll/store/store';\r\nimport {InitialStateLoginType} from '../../../bll/redusers/profile-reducer';\r\nimport Paginator from '../../common/Paginator/Paginator';\r\nimport 'rc-slider/assets/index.css';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {ResponsePage} from '../../common/ResponsePage/ResponsePage';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {PATH} from '../../routes/Routes';\r\nimport Login, {useInput} from '../login/login';\r\nimport {SortBtn} from '../../common/sortBtn/sortBtn';\r\nimport {CardOnly} from './CardOnly/CardOnly';\r\nimport {CardsDeckProfile} from './CardsDeckProfile/CardsDeckProfile';\r\nimport {SearchBlock} from '../../common/SearchBlock/SearchBlock';\r\nimport {Modal} from '../../common/Modal/Modal';\r\nimport SuperInputText from '../../common/c1-SuperInputText/SuperInputText';\r\nimport SuperButton from '../../common/c2-SuperButton/SuperButton';\r\n\r\n\r\nexport const TabletCards = () => {\r\n\r\n    const isLogin = useSelector<AppStoreType, boolean>(state => state.login.logIn);\r\n    const profile = useSelector<AppStoreType, InitialStateLoginType>(state => state.profile)\r\n    const {\r\n        _id,\r\n        name,\r\n        avatar\r\n    } = profile.profile\r\n\r\n    const tablet = useSelector<AppStoreType, InitialStateTabletType>(state => state.tablet)\r\n    const [rangeValue, setRangeValue] = useState<number[]>([tablet.minCardsCount, tablet.maxCardsCount])\r\n    const [search, setSearch] = useState<string>('');\r\n\r\n\r\n    const selectParamsOptions: SearchTextType[] = ['By name', 'By creator']\r\n    const [selectedParams, setOptionParams] = useState<SearchTextType>(selectParamsOptions[0]);\r\n\r\n\r\n    const [activeModalAddDeck, setActiveModalAddDeck] = useState<boolean>(false)\r\n    const [activeModalUpdateDeck, setActiveModalUpdateDeck] = useState<boolean>(false)\r\n    const [activeModalDeleteDeck, setActiveModalDeleteDeck] = useState<boolean>(false)\r\n    const [cardIdInModal, setCardIdInModal] = useState<string>('')\r\n    const nameInModal = useInput('', {isEmpty: true, minLength: 1, maxLength: 25});\r\n    const [checkBoxInModal, setCheckBoxInModal] = useState<boolean>(false)\r\n\r\n    const onChangeCheckBoxInModal = (newStatus: boolean) => {\r\n        setCheckBoxInModal(newStatus)\r\n\r\n    }\r\n\r\n\r\n    const {\r\n        cardPacks,\r\n        currentPage,\r\n        cardPacksTotalCount,\r\n        pageCount,\r\n        minCardsCount,\r\n        maxCardsCount,\r\n        sortStatus,\r\n        searchCardsArr,\r\n        searchMode,\r\n        pageForSearchMode,\r\n        searchEmpty,\r\n        checkBoxValue,\r\n        loadingStatus,\r\n        errorText\r\n    } = tablet\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        {\r\n            !searchMode && dispatch(getCarsPack())\r\n        }\r\n        {\r\n            searchMode && dispatch(SearchCorrectCards())\r\n        }\r\n    }, [currentPage, minCardsCount, maxCardsCount, sortStatus, checkBoxValue, isLogin])\r\n\r\n\r\n    const onChangeRangeHandler = (newRangeValue: number[]) => {\r\n        setRangeValue(newRangeValue)\r\n    }\r\n    const onClickSearchBtnHandler = (newMinMaxCurrent?: number[], sortBy?: SearchTextType) => {\r\n        if (newMinMaxCurrent) {\r\n            dispatch(SetMinMaxCardsCurrent(newMinMaxCurrent))\r\n        } else if (sortBy) {\r\n            dispatch(SetSearchedBy(sortBy))\r\n            dispatch(SetSearchText(search))\r\n            dispatch(SearchCorrectCards())\r\n        }\r\n    }\r\n\r\n    const onSortBtnHandler = (newStatus: SortPackType) => {\r\n        dispatch(SetSortStatus(newStatus))\r\n    }\r\n\r\n\r\n    const onClickUpdateHandler = () => {\r\n\r\n        dispatch(updateCards(cardIdInModal, nameInModal.value))\r\n        setActiveModalUpdateDeck(false)\r\n        nameInModal.onChange('')\r\n        nameInModal.onBlur(false)\r\n        setCardIdInModal('')\r\n\r\n    }\r\n\r\n\r\n    const onDeleteCardsHandler = () => {\r\n        dispatch(DeleteCards(cardIdInModal))\r\n        setCardIdInModal('')\r\n        setActiveModalDeleteDeck(false)\r\n    }\r\n\r\n    const onChangeCheckBoxStatus = () => {\r\n        dispatch(SetCheckBoxValue(!checkBoxValue))\r\n    }\r\n    const onHandlerSearch = (e: SyntheticEvent<HTMLInputElement>) => {\r\n        setSearch(e.currentTarget.value);\r\n    };\r\n\r\n    const onAddNewCardsClickHandler = () => {\r\n\r\n        const addParams = {\r\n            name: nameInModal.value,\r\n            private: checkBoxInModal\r\n        }\r\n\r\n        dispatch(PostCards(addParams))\r\n        setActiveModalAddDeck(false)\r\n        nameInModal.onChange('')\r\n        nameInModal.onBlur(false)\r\n        onChangeCheckBoxInModal(false)\r\n    };\r\n\r\n    const onAllPagesHandler = () => {\r\n        dispatch(SetSearchEmpty(''))\r\n        dispatch(SetSearchMode(false))\r\n        dispatch(SetSearchCardsArr(null))\r\n        dispatch(SetSortStatus('0updated'))\r\n        dispatch(getCarsPack())\r\n        setSearch('');\r\n    };\r\n\r\n\r\n    if (!isLogin) {\r\n        return <Login/>\r\n    }\r\n\r\n    if (loadingStatus === 'loading') {\r\n        return <Preloader/>\r\n    }\r\n\r\n    if (loadingStatus === 'error') {\r\n        return <ResponsePage typeOfPage={'cardsError'} errorText={errorText}/>\r\n\r\n    }\r\n\r\n\r\n    if (loadingStatus === 'redirect') {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Modal active={activeModalAddDeck} setActive={setActiveModalAddDeck}>\r\n                <div className={s.addDeckModal}>\r\n                    <div>Deck info:</div>\r\n                    <div><SuperInputText value={nameInModal.value} onChange={nameInModal.onChange} onBlur={() => {\r\n                        nameInModal.onBlur(true)\r\n                    }} label={'uniq name of Deck'}/></div>\r\n                    <div>private:<input checked={checkBoxInModal}\r\n                                        onChange={() => onChangeCheckBoxInModal(!checkBoxInModal)} type={'checkbox'}/>\r\n                    </div>\r\n                    <div className={s.DelDeckModal}>\r\n                    <div><SuperButton onClick={onAddNewCardsClickHandler}>ADD NEW DECK</SuperButton></div>\r\n                    <div><SuperButton onClick={()=>setActiveModalAddDeck(false)}>CANCEL</SuperButton></div>\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n            <Modal active={activeModalUpdateDeck} setActive={setActiveModalUpdateDeck}>\r\n                <div className={s.addDeckModal}>\r\n                    <div>Rename deck:</div>\r\n                    <div><SuperInputText value={nameInModal.value} onChange={nameInModal.onChange} onBlur={() => {\r\n                        nameInModal.onBlur(true)\r\n                    }} label={'New name for deck'}/></div>\r\n                    <div className={s.DelDeckModal}>\r\n                    <div><SuperButton onClick={onClickUpdateHandler}>Rename</SuperButton></div>\r\n                    <div><SuperButton onClick={()=>setActiveModalUpdateDeck(false)}>Cancel</SuperButton></div>\r\n                        </div>\r\n                </div>\r\n            </Modal>\r\n            <Modal active={activeModalDeleteDeck} setActive={setActiveModalDeleteDeck}>\r\n                <div className={s.addDeckModal}>\r\n                    <div>Are you sure?</div>\r\n                    <div className={s.DelDeckModal}>\r\n                        <div><SuperButton onClick={onDeleteCardsHandler}>OK</SuperButton></div>\r\n                        <div><SuperButton onClick={() => setActiveModalDeleteDeck(false)}>Cancel</SuperButton></div>\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n\r\n\r\n            <div className={s.profile}>\r\n                <CardsDeckProfile setActiveModalAddDeck={setActiveModalAddDeck}\r\n                                  cardPacksTotalCount={cardPacksTotalCount}\r\n                                  avatar={avatar} name={name} _id={_id}\r\n                                  rangeValue={rangeValue} onClickSearchBtnHandler={onClickSearchBtnHandler}\r\n                                  onChangeRangeHandler={onChangeRangeHandler}/>\r\n                <div className={s.table}>\r\n                    <div className={s.tit}>\r\n                        Pack list for {name}\r\n                    </div>\r\n                    <div style={{display: 'inline-block'}}>\r\n                        <input onChange={onChangeCheckBoxStatus} checked={checkBoxValue} type={'checkbox'}/>My cards\r\n                    </div>\r\n                    <SearchBlock searchProperty={selectParamsOptions} selectedParams={selectedParams}\r\n                                 onHandlerSearch={onHandlerSearch}\r\n                                 onClickSearchBtnHandler={onClickSearchBtnHandler} search={search}\r\n                                 searchMode={searchMode} onAllPagesHandler={onAllPagesHandler}\r\n                                 selectParamsOptions={selectParamsOptions} setOptionParams={setOptionParams}/>\r\n                    <table className={s.mainTab}>\r\n                        <thead>\r\n                        <tr>\r\n                            <th>Name\r\n                                <SortBtn property={'name'} sortStatus={tablet.sortStatus}\r\n                                         onSortBtnHandler={onSortBtnHandler}/>\r\n                            </th>\r\n\r\n                            <th>Cards\r\n                                <SortBtn property={'cardsCount'} sortStatus={tablet.sortStatus}\r\n                                         onSortBtnHandler={onSortBtnHandler}/>\r\n                            </th>\r\n                            <th>Last Updated\r\n                                <SortBtn property={'updated'} sortStatus={tablet.sortStatus}\r\n                                         onSortBtnHandler={onSortBtnHandler}/>\r\n                            </th>\r\n                            <th>Created by</th>\r\n                            <th>Actions</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <CardOnly setActiveModalDeleteDeck={setActiveModalDeleteDeck}\r\n                                  setCardIdInModal={setCardIdInModal}\r\n                                  setActiveModalUpdateDeck={setActiveModalUpdateDeck} searchEmpty={searchEmpty}\r\n                                  cardPacks={cardPacks} searchCardsArr={searchCardsArr}\r\n                                  pageForSearchMode={pageForSearchMode} profileId={profile.profile._id}\r\n                                  setNameDeck={nameInModal.onChange}/>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            <Paginator pageForSearchMode={pageForSearchMode} searchMode={searchMode}\r\n                       totalItemsCount={cardPacksTotalCount} currentPage={currentPage} pageSize={pageCount}/>\r\n\r\n        </>\r\n    )\r\n        ;\r\n}\r\n\r\nexport default TabletCards;\r\n","import React from 'react';\r\nimport cn from './setNewPassword.module.css';\r\nimport SuperInputText from '../../common/c1-SuperInputText/SuperInputText';\r\nimport {NavLink, Redirect, useParams} from 'react-router-dom';\r\nimport SuperButton from '../../common/c2-SuperButton/SuperButton';\r\nimport {PATH} from '../../routes/Routes';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStoreType} from '../../../bll/store/store';\r\nimport {useInput} from '../login/login';\r\nimport {CreateNewPassword, isMessageSentStatusType} from '../../../bll/redusers/recoverPass-reducer';\r\nimport {setLoginError} from '../../../bll/redusers/login-reducer';\r\nimport {ErrorWindow} from '../../common/ErrorWindow/ErrorWindow';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {ResponsePage} from '../../common/ResponsePage/ResponsePage';\r\n\r\n\r\nexport const SetNewPassword = () => {\r\n    const password = useInput('', {isEmpty: true, minLength: 7, maxLength: 20});\r\n    const password1 = useInput('', {isEmpty: true, minLength: 7, maxLength: 20});\r\n    const dispatch = useDispatch();\r\n    const isMessageSentStatus = useSelector<AppStoreType, isMessageSentStatusType>(state => state.recoverPass.isMessageSend)\r\n    const ErrorRequestMsg = useSelector<AppStoreType, string>(state => state.recoverPass.ErrorMessageRecoveryPassword);\r\n    const isLogin = useSelector<AppStoreType, boolean>(state => state.login.logIn);\r\n    const {token} = useParams<{ token: string }>();\r\n\r\n    const onClickHandler = () => {\r\n        const message = {\r\n            password: password.value,\r\n            resetPasswordToken: token\r\n        }\r\n        dispatch(CreateNewPassword(message))\r\n    }\r\n\r\n    if (password.touched || password.value) {\r\n        dispatch(setLoginError(''))\r\n    }\r\n\r\n\r\n    const isEmptyPassMsg = password.touched && password.isEmpty;\r\n\r\n\r\n    const minLengthPassMsg = password.touched && password.minLengthError;\r\n\r\n    const maxLengthPassMsg = password.touched && password.maxLengthError;\r\n\r\n\r\n    const isPasswordCorrectReEnter = password.value === password1.value && password1.value !== '';\r\n\r\n    const isButtonDisabled = !password.inputValid && !password.inputValid && !isPasswordCorrectReEnter;\r\n\r\n    if (isLogin) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    if (isMessageSentStatus === 'loading') {\r\n        return <Preloader/>\r\n    }\r\n\r\n\r\n    if (isMessageSentStatus === 'sent') {\r\n        return (<div>\r\n                <ResponsePage typeOfPage={'success'}/>\r\n                </div>\r\n        )\r\n    }\r\n    if (isMessageSentStatus === 'end') {\r\n        return (<Redirect to={PATH.LOGIN}/>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={cn.autorization}>\r\n            <div className={cn.form}>\r\n                <div className={cn.hTit}>\r\n                    It-incubator\r\n                </div>\r\n                <div className={cn.tit}>\r\n                    Create new password\r\n                </div>\r\n                <form>\r\n                    {ErrorRequestMsg && <div>{ErrorRequestMsg}</div>}\r\n\r\n                    <ErrorWindow isEmptyPassMsg={isEmptyPassMsg} minLengthPassMsg={minLengthPassMsg}\r\n                                 maxLengthPassMsg={maxLengthPassMsg}/>\r\n\r\n\r\n                    <SuperInputText onChange={password.onChange} onBlur={() => {\r\n                        password.onBlur(true)\r\n                    }} value={password.value}\r\n                                    label={'Enter new unique password'} type={'password'}/>\r\n\r\n                    <ErrorWindow isPasswordCorrectReEnter={!isPasswordCorrectReEnter && password1.value!==''}/>\r\n\r\n\r\n                    <SuperInputText onChange={password1.onChange} onBlur={() => {\r\n                        password1.onBlur(true)\r\n                    }} value={password1.value}\r\n                                    label={'Repeat your password'} type={'password'}/>\r\n\r\n\r\n                    <SuperButton disabled={!isPasswordCorrectReEnter} onClick={onClickHandler}\r\n                                 style={{width: 280, marginTop: 80, marginBottom: 40}}>Create\r\n                        new password</SuperButton>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SetNewPassword;\r\n","import SuperButton from '../../../common/c2-SuperButton/SuperButton';\r\nimport React from 'react';\r\nimport s from './CardOnlyCard.module.css';\r\nimport {OneCardsType} from '../../../../bll/redusers/card-reducer';\r\n\r\n\r\ntype CardOnlyPropsType = {\r\n    searchCardEmpty: string\r\n    AllCards: OneCardsType[]\r\n    searchCardArr: Array<OneCardsType[]> | null\r\n    pageForSearchCardMode: number\r\n    profileId: string | null\r\n    onChangeQuestion: (newText: string) => void\r\n    onChangeAnswer: (newText: string) => void\r\n    onChangeGrade: (newText: number) => void\r\n    setActiveModalUpdateCard: (newStatus: boolean) => void\r\n    setActiveModalDeleteCard: (newStatus: boolean) => void\r\n    setCardPack_id: (newText: string) => void\r\n    setCard_id: (newText: string) => void\r\n\r\n\r\n}\r\n\r\nconst {tableTitle, btnBlock} = s\r\n\r\n\r\nexport const CardOnlyCard = (props: CardOnlyPropsType) => {\r\n\r\n    const {\r\n        searchCardEmpty,\r\n        searchCardArr,\r\n        AllCards,\r\n        pageForSearchCardMode,\r\n        profileId,\r\n\r\n        onChangeQuestion,\r\n        onChangeAnswer,\r\n        onChangeGrade,\r\n        setActiveModalUpdateCard,\r\n        setCardPack_id,\r\n        setCard_id,\r\n        setActiveModalDeleteCard\r\n    } = props\r\n\r\n    const onUpdateCardModalHandler = (_id: string, cardPackId: string, question: string, answer: string, grade: number) => {\r\n        setActiveModalUpdateCard(true)\r\n        setCardPack_id(cardPackId)\r\n        setCard_id(_id)\r\n        onChangeQuestion(question)\r\n        onChangeAnswer(answer)\r\n        onChangeGrade(grade)\r\n    }\r\n    const onDeleteCardModalHandler = (_id: string, cardPackId: string) => {\r\n        setActiveModalDeleteCard(true)\r\n        setCardPack_id(cardPackId)\r\n        setCard_id(_id)\r\n    }\r\n\r\n    return (\r\n        <tbody>\r\n        {searchCardEmpty &&\r\n        <div className={tableTitle}>{searchCardEmpty}</div>}\r\n        {AllCards && AllCards.map(t =>\r\n            <tr key={t.cardsPack_id}>\r\n                <td>{t.question}</td>\r\n                <td>{t.answer}</td>\r\n                <td>{t.grade.toFixed(1)}</td>\r\n                <td>{new Date(t.updated).toLocaleDateString()}</td>\r\n                <td>{profileId === t.user_id && <SuperButton onClick={() => {\r\n                    onDeleteCardModalHandler(t._id, t.cardsPack_id)\r\n                }}>DELETE</SuperButton>}\r\n                    {profileId === t.user_id && <SuperButton onClick={() => {\r\n                        onUpdateCardModalHandler(t._id, t.cardsPack_id, t.question, t.answer, t.grade)\r\n                    }}>UPDATE</SuperButton>}</td>\r\n            </tr>)}\r\n        {searchCardArr && searchCardArr[pageForSearchCardMode].map(t =>\r\n            <tr key={t.cardsPack_id}>\r\n                <td>{t.question}</td>\r\n                <td>{t.answer}</td>\r\n                <td>{t.grade.toFixed(1)}</td>\r\n                <td>{new Date(t.updated).toLocaleDateString()}</td>\r\n                <td className={btnBlock}> {profileId === t.user_id && <SuperButton onClick={() => {\r\n                    onDeleteCardModalHandler(t._id, t.cardsPack_id)\r\n                }}>DELETE</SuperButton>}\r\n                    {profileId === t.user_id && <SuperButton onClick={() => {\r\n                        onUpdateCardModalHandler(t._id, t.cardsPack_id, t.question, t.answer, t.grade)\r\n                    }}>UPDATE</SuperButton>}</td>\r\n            </tr>)}\r\n        </tbody>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/user.889f8d44.png\";","import s from './CardProfile.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {PATH} from '../../../routes/Routes';\r\nimport SuperButton from '../../../common/c2-SuperButton/SuperButton';\r\nimport {Range} from 'rc-slider';\r\nimport React from 'react';\r\nimport {SearchCardTextType} from '../../../../bll/redusers/card-reducer';\r\nimport userPhoto from '../../../../../assets/img/user.png'\r\n\r\n\r\ntype CardsDeckProfilePropsType = {\r\n    avatar: string | null\r\n    name: string | null\r\n    _id: string | null\r\n    gradeCardValue: number[]\r\n    onClickSearchModeCardHandler: (newGradeValue: number[], sortBy: SearchCardTextType) => void\r\n    onChangeGradeHandler: (newRangeValue: number[]) => void\r\n    cardsTotalCount: number | null\r\n    packUserId: string,\r\n    token: string\r\n    searchCardMode: boolean\r\n    selectedCardParams: SearchCardTextType\r\n    onClickSearchCardHandler: (newGradeValue: number[] | undefined, sortBy?: SearchCardTextType) => void\r\n    setActiveModalAddCard: (newStatus: boolean) => void\r\n    setCardPack_id: (newText: string) => void\r\n\r\n\r\n}\r\n\r\nexport const CardProfile = (props: CardsDeckProfilePropsType) => {\r\n    const {\r\n        user,\r\n        user_card,\r\n        logo,\r\n        name_profile,\r\n        about,\r\n        polz,\r\n        polztit,\r\n        rangeValues,\r\n        rangeClass,\r\n        currentCard,\r\n        rangeLine\r\n    } = s;\r\n    const {\r\n        avatar,\r\n        name,\r\n        _id,\r\n        gradeCardValue,\r\n        onClickSearchModeCardHandler,\r\n        onChangeGradeHandler,\r\n        cardsTotalCount,\r\n        packUserId,\r\n        token,\r\n        searchCardMode,\r\n        selectedCardParams,\r\n        onClickSearchCardHandler,\r\n        setActiveModalAddCard,\r\n        setCardPack_id,\r\n\r\n    } = props;\r\n\r\n    const onAddNewCardModalHandler = (newCardId: string) => {\r\n        setActiveModalAddCard(true)\r\n        setCardPack_id(token)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={user}>\r\n            <div className={user_card}>\r\n                <div className={logo}>\r\n                    <NavLink to={PATH.PROFILE}><img src={avatar ? avatar : userPhoto} alt=\"\"/></NavLink>\r\n                </div>\r\n                <div className={name_profile}>\r\n                    {name}\r\n                </div>\r\n                <div className={about}>\r\n                    {_id}\r\n                </div>\r\n                <SuperButton disabled={!(_id === packUserId)} onClick={() => {\r\n                    onAddNewCardModalHandler(token)\r\n                }}>ADD NEW CARD</SuperButton>\r\n            </div>\r\n\r\n            <div className={polz}>\r\n                <div className={polztit}>Creator ID: {packUserId}</div>\r\n\r\n                <div className={currentCard}>Current of cards: {cardsTotalCount}</div>\r\n\r\n\r\n                <div className={rangeValues}>\r\n                    <div>min:{gradeCardValue[0]}</div>\r\n                    <div>max:{gradeCardValue[1]}</div>\r\n                </div>\r\n                <div className={rangeClass}>\r\n                    <div className={rangeLine}>\r\n                        <Range step={0.1} min={0} max={5} defaultValue={gradeCardValue} value={gradeCardValue}\r\n                               onChange={onChangeGradeHandler}/>\r\n                    </div>\r\n                    {!searchCardMode &&\r\n                    <SuperButton onClick={() => onClickSearchCardHandler(gradeCardValue)}>search</SuperButton>}\r\n                    {searchCardMode && <SuperButton\r\n                        onClick={() => onClickSearchModeCardHandler(gradeCardValue, selectedCardParams)}>search</SuperButton>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {SyntheticEvent, useEffect, useState} from 'react';\r\nimport SuperInputText from '../../common/c1-SuperInputText/SuperInputText';\r\nimport SuperButton from '../../common/c2-SuperButton/SuperButton';\r\nimport s from './card.module.css';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStoreType} from '../../../bll/store/store';\r\nimport {InitialStateLoginType} from '../../../bll/redusers/profile-reducer';\r\nimport 'rc-slider/assets/index.css';\r\nimport {NavLink, Redirect, useParams} from 'react-router-dom';\r\nimport {PATH} from '../../routes/Routes';\r\nimport Paginator from '../../common/Paginator/Paginator';\r\nimport {\r\n    AddCard,\r\n    DeleteCard,\r\n    getCard,\r\n    InitialStateCardType,\r\n    OneCardsType,\r\n    searchCard,\r\n    SearchCardTextType,\r\n    SetGradeValue,\r\n    SetPageCount,\r\n    SetSearchCardArr,\r\n    SetSearchCardEmpty,\r\n    SetSearchCardMode,\r\n    SetSearchCardText,\r\n    SetSearchedCardBy,\r\n    SetSortCardStatus,\r\n    sortCardsStatusType,\r\n    UpdateCard\r\n} from '../../../bll/redusers/card-reducer';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\n\r\nimport Login, {useInput} from '../login/login';\r\nimport {ResponsePage} from '../../common/ResponsePage/ResponsePage';\r\nimport {SortBtn} from '../../common/sortBtn/sortBtn';\r\nimport {InitialStateTabletType} from '../../../bll/redusers/tablet-reducer';\r\nimport {CardOnlyCard} from './CardOnlyCard/CardOnlyCard';\r\nimport {CardProfile} from './CardProfile/CardProfile';\r\nimport {SearchBlock} from '../../common/SearchBlock/SearchBlock';\r\nimport {Modal} from '../../common/Modal/Modal';\r\nimport {newCardDataType, newUpdateCardDataType} from '../../../dal/Api';\r\n\r\n\r\nexport const Card = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const {token} = useParams<{ token: string }>();\r\n    const tabletInfo = useSelector<AppStoreType, InitialStateCardType>(state => state.card)\r\n    const AllCards = useSelector<AppStoreType, OneCardsType[]>(state => state.card.cards)\r\n    const profile = useSelector<AppStoreType, InitialStateLoginType>(state => state.profile)\r\n    const tablet = useSelector<AppStoreType, InitialStateTabletType>(state => state.tablet)\r\n    const [gradeCardValue, setGradeCardValue] = useState<number[]>([tabletInfo.gradeValue[0], tabletInfo.gradeValue[1]])\r\n    const selectParamsCardOptions: SearchCardTextType[] = ['By answer', 'By question']\r\n    const [selectedCardParams, setSelectedCardParams] = useState<SearchCardTextType>(selectParamsCardOptions[0]);\r\n    const [search, setSearch] = useState<string>('');\r\n    const isLogin = useSelector<AppStoreType, boolean>(state => state.login.logIn);\r\n\r\n    const {\r\n        loadingStatusCard,\r\n        cardsTotalCount,\r\n        page,\r\n        gradeValue,\r\n        sortCards,\r\n        searchCardMode,\r\n        pageForSearchCardMode,\r\n        searchCardArr,\r\n        searchCardEmpty,\r\n        errorCardText\r\n    } = tabletInfo\r\n\r\n\r\n    const [activeModalAddCard, setActiveModalAddCard] = useState<boolean>(false)\r\n    const [activeModalDeleteCard, setActiveModalDeleteCard] = useState<boolean>(false)\r\n    const [activeModalUpdateCard, setActiveModalUpdateCard] = useState<boolean>(false)\r\n    const [cardPack_id, setCardPack_id] = useState<string>('')\r\n    const [card_id, setCard_id] = useState<string>('')\r\n    const questionInModal = useInput('', {isEmpty: true, minLength: 1, maxLength: 25});\r\n    const answerInModal = useInput('', {isEmpty: true, minLength: 1, maxLength: 25});\r\n    const gradeInModal = useInput(0, {isEmpty: true, minLength: 1, maxLength: 1});\r\n\r\n    const onChangeGradeHandler = (newGradeValue: number[]) => {\r\n        setGradeCardValue(newGradeValue)\r\n    }\r\n\r\n    const onClickSearchCardHandler = (newGradeValue: number[] | undefined, sortBy?: SearchCardTextType) => {\r\n        if (newGradeValue) {\r\n            dispatch(SetGradeValue(newGradeValue))\r\n        } else if (sortBy) {\r\n            dispatch(SetSearchedCardBy(sortBy))\r\n            dispatch(SetSearchCardText(search))\r\n            dispatch(searchCard(token))\r\n        }\r\n    }\r\n    const onClickSearchModeCardHandler = (newGradeValue: number[], sortBy: SearchCardTextType) => {\r\n        dispatch(SetGradeValue(newGradeValue))\r\n        dispatch(SetSearchedCardBy(sortBy))\r\n        dispatch(SetSearchCardText(search))\r\n        dispatch(searchCard(token))\r\n    }\r\n\r\n\r\n    const onSortBtnHandler = (newStatus: sortCardsStatusType) => {\r\n        dispatch(SetSortCardStatus(newStatus))\r\n    }\r\n    const onHandlerCardSearch = (e: SyntheticEvent<HTMLInputElement>) => {\r\n        setSearch(e.currentTarget.value);\r\n    };\r\n\r\n    const onAddNewCardHandler = () => {\r\n        const data: newCardDataType = {\r\n            cardsPack_id: cardPack_id,\r\n            question: questionInModal.value,\r\n            answer: answerInModal.value,\r\n            grade: gradeInModal.value\r\n        }\r\n        dispatch(AddCard(data))\r\n        setActiveModalAddCard(false)\r\n        questionInModal.onChange('')\r\n        answerInModal.onChange('')\r\n        gradeInModal.onChange('')\r\n        setCardPack_id('')\r\n        setCard_id('')\r\n\r\n    };\r\n\r\n    const onUpdateCardHandler = () => {\r\n        const data: newUpdateCardDataType = {\r\n            _id: card_id,\r\n            question: questionInModal.value,\r\n            answer: answerInModal.value,\r\n            grade: gradeInModal.value\r\n        }\r\n        dispatch(UpdateCard(data, cardPack_id,))\r\n        setActiveModalUpdateCard(false)\r\n        questionInModal.onChange('')\r\n        answerInModal.onChange('')\r\n        gradeInModal.onChange('')\r\n        setCardPack_id('')\r\n        setCard_id('')\r\n\r\n    };\r\n\r\n\r\n    const onDeleteCardHandler = () => {\r\n        dispatch(DeleteCard(card_id, cardPack_id))\r\n        setActiveModalDeleteCard(false)\r\n        setCardPack_id('')\r\n        setCard_id('')\r\n\r\n    };\r\n\r\n    const onAllCardPagesHandler = () => {\r\n        dispatch(SetSearchCardEmpty(''))\r\n        dispatch(SetSearchCardMode(false))\r\n        dispatch(SetSearchCardArr(null))\r\n        dispatch(SetSortCardStatus('0updated'))\r\n        dispatch(SetPageCount(4))\r\n        dispatch(getCard(token))\r\n        setSearch('');\r\n    };\r\n\r\n    const {\r\n        _id,\r\n        name,\r\n        avatar\r\n    } = profile.profile\r\n\r\n    useEffect(() => {\r\n        {\r\n            !searchCardMode && dispatch(getCard(token))\r\n        }\r\n        {\r\n            searchCardMode && dispatch(searchCard(token))\r\n        }\r\n\r\n    }, [page, gradeValue, sortCards])\r\n\r\n\r\n    if (!isLogin) {\r\n        return <Login/>\r\n    }\r\n\r\n    if (loadingStatusCard === 'loading') {\r\n        return <Preloader/>\r\n    }\r\n\r\n    if (loadingStatusCard === 'error') {\r\n        return <ResponsePage typeOfPage={'cardsError'} errorText={errorCardText}/>\r\n    }\r\n\r\n    if (loadingStatusCard === 'redirect') {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal active={activeModalAddCard} setActive={setActiveModalAddCard}>\r\n                <div className={s.addDeckModal}>\r\n                    <div>Card info:</div>\r\n                    <div><SuperInputText value={questionInModal.value} onChange={questionInModal.onChange}\r\n                                         onBlur={() => {\r\n                                             questionInModal.onBlur(true)\r\n                                         }} label={'Question'}/></div>\r\n                    <div><SuperInputText value={answerInModal.value} onChange={answerInModal.onChange} onBlur={() => {\r\n                        answerInModal.onBlur(true)\r\n                    }} label={'Answer'}/></div>\r\n                    {gradeInModal.value > 5 && <div>Grade should be less than 5</div>}\r\n                    {gradeInModal.value < 0 && <div>Grade should be more than 0</div>}\r\n                    <div><SuperInputText value={gradeInModal.value} onChange={gradeInModal.onChange} onBlur={() => {\r\n                        gradeInModal.onBlur(true)\r\n                    }} label={'Grade'}/></div>\r\n                    <div><SuperButton disabled={gradeInModal.value > 5 || gradeInModal.value < 0}\r\n                                      onClick={onAddNewCardHandler}>ADD NEW CARD</SuperButton></div>\r\n                </div>\r\n            </Modal>\r\n\r\n            <Modal active={activeModalUpdateCard} setActive={setActiveModalUpdateCard}>\r\n                <div className={s.addDeckModal}>\r\n                    <div>New card info:</div>\r\n                    <div><SuperInputText value={questionInModal.value} onChange={questionInModal.onChange}\r\n                                         onBlur={() => {\r\n                                             questionInModal.onBlur(true)\r\n                                         }} label={'Question'}/></div>\r\n                    <div><SuperInputText value={answerInModal.value} onChange={answerInModal.onChange} onBlur={() => {\r\n                        answerInModal.onBlur(true)\r\n                    }} label={'Answer'}/></div>\r\n                    {gradeInModal.value > 5 && <div>Grade should be less than 5</div>}\r\n                    {gradeInModal.value < 0 && <div>Grade should be more than 0</div>}\r\n                    <div><SuperInputText value={gradeInModal.value} onChange={gradeInModal.onChange} onBlur={() => {\r\n                        gradeInModal.onBlur(true)\r\n                    }} label={'Grade'}/></div>\r\n                    <div><SuperButton disabled={gradeInModal.value > 5 || gradeInModal.value < 0}\r\n                                      onClick={onUpdateCardHandler}>UPDATE</SuperButton></div>\r\n                </div>\r\n            </Modal>\r\n\r\n            <Modal active={activeModalDeleteCard} setActive={setActiveModalDeleteCard}>\r\n                <div className={s.addDeckModal}>\r\n                    <div>Are you sure?</div>\r\n                    <div className={s.DelDeckModal}>\r\n                        <div><SuperButton onClick={onDeleteCardHandler}>OK</SuperButton></div>\r\n                        <div><SuperButton onClick={() => setActiveModalDeleteCard(false)}>Cancel</SuperButton></div>\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n\r\n\r\n            <div className={s.profile}>\r\n                <CardProfile setCardPack_id={setCardPack_id} setActiveModalAddCard={setActiveModalAddCard}\r\n                             avatar={avatar} name={name} _id={_id}\r\n                             gradeCardValue={gradeCardValue}\r\n                             onClickSearchModeCardHandler={onClickSearchModeCardHandler}\r\n                             onChangeGradeHandler={onChangeGradeHandler} cardsTotalCount={cardsTotalCount}\r\n                             packUserId={tabletInfo.packUserId} token={token}\r\n                             searchCardMode={searchCardMode} selectedCardParams={selectedCardParams}\r\n                             onClickSearchCardHandler={onClickSearchCardHandler}/>\r\n                <div className={s.table}>\r\n                    <div className={s.tit}>\r\n                        Card list for {name}\r\n                    </div>\r\n                    <br/>\r\n                    <br/>\r\n                    <SearchBlock selectedParams={selectedCardParams} onHandlerSearch={onHandlerCardSearch}\r\n                                 onClickSearchBtnHandler={onClickSearchCardHandler}\r\n                                 search={search} searchMode={searchCardMode} onAllPagesHandler={onAllCardPagesHandler}\r\n                                 selectParamsOptions={selectParamsCardOptions} setOptionParams={setSelectedCardParams}\r\n                                 searchProperty={selectParamsCardOptions}/>\r\n                    <NavLink to={PATH.CARDS_TABLET}><SuperButton onClick={onAllCardPagesHandler}>go to all\r\n                        decks </SuperButton></NavLink>\r\n                    <table className={s.mainTab}>\r\n                        <thead>\r\n                        <tr>\r\n                            <th>Question\r\n                                <SortBtn property={'question'} sortStatus={tabletInfo.sortCards}\r\n                                         onSortBtnHandler={onSortBtnHandler}/>\r\n                            </th>\r\n\r\n                            <th>Answer\r\n                                <SortBtn property={'answer'} sortStatus={tabletInfo.sortCards}\r\n                                         onSortBtnHandler={onSortBtnHandler}/>\r\n                            </th>\r\n                            <th>Grade\r\n                                <SortBtn property={'grade'} sortStatus={tabletInfo.sortCards}\r\n                                         onSortBtnHandler={onSortBtnHandler}/>\r\n                            </th>\r\n                            <th>Updated\r\n                                <SortBtn property={'updated'} sortStatus={tabletInfo.sortCards}\r\n                                         onSortBtnHandler={onSortBtnHandler}/></th>\r\n                            <th>Action</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <CardOnlyCard\r\n                            setActiveModalDeleteCard={setActiveModalDeleteCard} setCard_id={setCard_id}\r\n                            setCardPack_id={setCardPack_id} setActiveModalUpdateCard={setActiveModalUpdateCard}\r\n                            onChangeQuestion={questionInModal.onChange}\r\n                            onChangeAnswer={answerInModal.onChange} onChangeGrade={gradeInModal.onChange}\r\n                            searchCardEmpty={searchCardEmpty} AllCards={AllCards}\r\n                            searchCardArr={searchCardArr}\r\n                            pageForSearchCardMode={pageForSearchCardMode} profileId={profile.profile._id}/>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            <Paginator cardType={true} pageForSearchMode={pageForSearchCardMode} searchMode={searchCardMode}\r\n                       totalItemsCount={cardsTotalCount} currentPage={page} pageSize={4}/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import {OneCardsType, SetCardInfo, SetLoadingCardStatus, SetSearchCardEmpty} from './card-reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {CardAPI} from '../../dal/Api';\r\n\r\nconst SET_IS_INIT_GAME_STATUS = 'cardGameReducer/SET_IS_INIT_GAME_STATUS';\r\nconst SET_SHOW_CARD = 'cardGameReducer/SET_SHOW_CARD'\r\nconst SET_ALL_CARDS_IN_DECK = 'cardGameReducer/SET_ALL_CARDS_IN_DECK'\r\nconst SET_ERROR_TEXT = 'cardGameReducer/SET_ERROR_TEXT'\r\nconst SET_MARK_VALUE = 'cardGameReducer/SET_MARK_VALUE'\r\nconst SET_IS_SHOW_ANSWER = 'cardGameReducer/SET_IS_SHOW_ANSWER'\r\n\r\n\r\nexport const setIsInitGameStatus = (newStatus: isInitGameStatusType) => ({\r\n    type: 'cardGameReducer/SET_IS_INIT_GAME_STATUS' as const,\r\n    newStatus\r\n})\r\nexport const setShowCard = (newCard: OneCardsType) => ({\r\n    type: 'cardGameReducer/SET_SHOW_CARD' as const,\r\n    newCard\r\n})\r\nexport const setAllCardsInDeck = (newCards: null | OneCardsType[] | OneCardsType) => ({\r\n    type: 'cardGameReducer/SET_ALL_CARDS_IN_DECK' as const,\r\n    newCards\r\n})\r\nexport const setErrorText = (newText:string) => ({\r\n    type: 'cardGameReducer/SET_ERROR_TEXT' as const,\r\n    newText\r\n})\r\nexport const setMarkValue = (newValue:number) => ({\r\n    type: 'cardGameReducer/SET_MARK_VALUE' as const,\r\n    newValue\r\n})\r\nexport const setIsShowAnswer = (newStatus:boolean) => ({\r\n    type: 'cardGameReducer/SET_IS_SHOW_ANSWER' as const,\r\n    newStatus\r\n})\r\n\r\n\r\nconst InitialCardGameState = {\r\n    showCard: {} as OneCardsType,\r\n    allCardsInDeck: null as null | OneCardsType[] | OneCardsType,\r\n    isInitGameStatus: 'loading' as isInitGameStatusType,\r\n    ErrorText: '' as string,\r\n    markValue:0 as number,\r\n    isShowAnswer:false as boolean\r\n}\r\n\r\n\r\ntype InitialStateCardGameType = typeof InitialCardGameState\r\n\r\n\r\nexport const cardGameReducer = (state: InitialStateCardGameType = InitialCardGameState, action: cardGameAllActionsType): InitialStateCardGameType => {\r\n    switch (action.type) {\r\n        case SET_IS_INIT_GAME_STATUS:\r\n            return {...state, isInitGameStatus: action.newStatus}\r\n        case SET_SHOW_CARD:\r\n            return {...state, showCard: action.newCard}\r\n        case SET_ALL_CARDS_IN_DECK:\r\n            return {...state, allCardsInDeck: action.newCards}\r\n        case SET_ERROR_TEXT:\r\n            return {...state, ErrorText: action.newText}\r\n        case SET_MARK_VALUE:\r\n            return {...state, markValue: action.newValue}\r\n        case SET_IS_SHOW_ANSWER:\r\n            return {...state, isShowAnswer: action.newStatus}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const gameInit = (cardsPack_id: string) => {\r\n    return async (dispatch: Dispatch) => {\r\n        try {\r\n            dispatch(setIsInitGameStatus('loading'))\r\n            dispatch(setIsShowAnswer(false))\r\n            dispatch(setMarkValue(0))\r\n            const res = await CardAPI.getCards({cardsPack_id,page: 1, pageCount: 100})\r\n            if (res.data.cards.length !== 0) {\r\n                dispatch(setAllCardsInDeck(res.data.cards))\r\n                dispatch(setShowCard(getCard(res.data.cards)))\r\n                Promise.all([res]).then(res => setTimeout(() => {\r\n                    dispatch(setIsInitGameStatus('init'))\r\n                }, 1000))\r\n            }\r\n        } catch (error) {\r\n            dispatch(setIsInitGameStatus('error'))\r\n            setTimeout(() => {\r\n                dispatch(setIsInitGameStatus('redirect'))\r\n            }, 1000)\r\n            setTimeout(() => {\r\n                dispatch(setIsInitGameStatus('loading'))\r\n            }, 3000)\r\n        }\r\n\r\n        }\r\n\r\n}\r\n\r\n\r\nexport const putMark=(grade:number,card_id:string,cardPackId:string)=>{\r\n    return async (dispatch:Dispatch<any>)=>{\r\n        dispatch(setIsInitGameStatus('loading'))\r\n        try {\r\n            const res = await CardAPI.gradeCard(grade,card_id);\r\n            Promise.all([res]).then(res => setTimeout(() => {\r\n                dispatch(gameInit(cardPackId))\r\n            }, 0))\r\n        }catch (err){\r\n           dispatch(setIsInitGameStatus('error'))\r\n            setTimeout(() => {\r\n                dispatch(setIsInitGameStatus('redirect'))\r\n            }, 1000)\r\n            setTimeout(() => {\r\n                dispatch(setIsInitGameStatus('loading'))\r\n            }, 3000)\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nconst getCard = (cards: OneCardsType[]) => {\r\n    const sum = cards.reduce((acc, card) => acc + (6 - card.grade) * (6 - card.grade), 0);\r\n    const rand = Math.random() * sum;\r\n    const res = cards.reduce((acc: { sum: number, id: number }, card, i) => {\r\n            const newSum = acc.sum + (6 - card.grade) * (6 - card.grade);\r\n            return {sum: newSum, id: newSum < rand ? i : acc.id}\r\n        }\r\n        , {sum: 0, id: -1});\r\n\r\n\r\n    return cards[res.id + 1];\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//types\r\n\r\n\r\nexport type isInitGameStatusType = 'loading' | 'init' | 'error' | 'redirect'\r\n\r\n\r\ntype setIsInitGameStatusType = ReturnType<typeof setIsInitGameStatus>\r\ntype setShowCardType = ReturnType<typeof setShowCard>\r\ntype setAllCardsInDeckType = ReturnType<typeof setAllCardsInDeck>\r\ntype setErrorTextType = ReturnType<typeof setErrorText>\r\ntype setMarkValueType = ReturnType<typeof setMarkValue>\r\ntype setIsShowAnswerType = ReturnType<typeof setIsShowAnswer>\r\n\r\nexport type cardGameAllActionsType =\r\n    setIsInitGameStatusType\r\n    | setShowCardType | setAllCardsInDeckType|setErrorTextType|setMarkValueType|setIsShowAnswerType;","export default __webpack_public_path__ + \"static/media/star.a8e81f70.png\";","import React from \"react\";\r\nimport s from './star.module.css';\r\nimport star from './star.png'\r\n\r\nconst{starOn,starOf}=s;\r\n\r\ntype StarPropsType = {\r\n    selected: true | false\r\n    setValue:()=>void;\r\n}\r\n\r\n\r\nfunction Star(props: StarPropsType) {\r\n    const{selected,setValue}=props;\r\n    return(\r\n        <div onClick={setValue}>\r\n            {selected? <StarOn /> : <StarOf />}\r\n        </div>\r\n)}\r\n\r\n\r\n\r\nconst StarOn =()=>{\r\n    return(<img className={starOn} src={star} />)\r\n}\r\nconst StarOf =() =>{\r\n    return(<img className={starOf} src={star} />)\r\n}\r\n\r\nexport default Star;","import React, {useEffect, useState} from 'react';\r\nimport Star from './star/star';\r\nimport s from './raiting.module.css';\r\nimport {useDispatch} from 'react-redux';\r\nimport {putMark} from '../../../../bll/redusers/card-game-reducer';\r\n\r\nconst {raiting} = s;\r\n\r\nexport type RatingPropsType = {\r\n    cardId: string\r\n    cardPackId: string\r\n    value: number\r\n    setValue: (newValue: number) => void\r\n}\r\n\r\n\r\nexport function Rating(props: RatingPropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n    const {cardId, cardPackId, value, setValue} = props;\r\n\r\n\r\n    useEffect(() => {\r\n        {value > 0 && dispatch(putMark(value, cardId, cardPackId))}\r\n    }, [value])\r\n\r\n\r\n    return (\r\n        <div className={raiting}>\r\n            <Star setValue={() => {\r\n                setValue(1)\r\n            }} selected={value > 0}/>\r\n\r\n            <Star setValue={() => {\r\n                setValue(2)\r\n            }} selected={value > 1}/>\r\n\r\n            <Star setValue={() => {\r\n                setValue(3)\r\n            }} selected={value > 2}/>\r\n\r\n            <Star setValue={() => {\r\n                setValue(4)\r\n            }} selected={value > 3}/>\r\n\r\n            <Star setValue={() => {\r\n                setValue(5)\r\n            }} selected={value > 4}/>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import error from '../../common/ResponsePage/error.png';\r\nimport React, {useEffect, useState} from 'react';\r\nimport s from './cardGame.module.css';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {\r\n    gameInit,\r\n    isInitGameStatusType,\r\n    setIsInitGameStatus,\r\n    setIsShowAnswer,\r\n    setMarkValue\r\n} from '../../../bll/redusers/card-game-reducer';\r\nimport {NavLink, Redirect, useParams} from 'react-router-dom';\r\nimport {AppStoreType} from '../../../bll/store/store';\r\nimport {OneCardsType} from '../../../bll/redusers/card-reducer';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {PATH} from '../../routes/Routes';\r\nimport SuperButton from '../../common/c2-SuperButton/SuperButton';\r\nimport Login from '../login/login';\r\nimport {Rating} from './Raiting/raiting';\r\nimport {ResponsePage} from '../../common/ResponsePage/ResponsePage';\r\n\r\nconst {autorization, hTit, tit, ratingBlock, form, infText} = s\r\n\r\n\r\nexport const CardGame = (props: any) => {\r\n    const {token} = useParams<{ token: string }>();\r\n    const CardToShow = useSelector<AppStoreType, OneCardsType>(state => state.cardGame.showCard)\r\n    const isInitStatus = useSelector<AppStoreType, isInitGameStatusType>(state => state.cardGame.isInitGameStatus)\r\n    const isLogin = useSelector<AppStoreType, boolean>(state => state.login.logIn);\r\n    const markValue = useSelector<AppStoreType, number>(state => state.cardGame.markValue);\r\n    const isShowAnswer = useSelector<AppStoreType, boolean>(state => state.cardGame.isShowAnswer);\r\n\r\n    const dispatch = useDispatch()\r\n    const onShowAnswerHandler = (newStatus: boolean) => {\r\n        dispatch(setIsShowAnswer(newStatus))\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(gameInit(token))\r\n    }, [])\r\n\r\n\r\n\r\n    const onClickNextHandler = () => {\r\n        dispatch(gameInit(token))\r\n    }\r\n\r\n    const onSetValue = (num:number)=>{\r\n        dispatch(setMarkValue(num))\r\n    }\r\n\r\n\r\n    if (!isLogin) {\r\n        return <Login/>\r\n    }\r\n    if (isInitStatus === 'loading') {\r\n        return <Preloader/>\r\n    }\r\n    if (isInitStatus === 'error') {\r\n        return <ResponsePage typeOfPage={'error'} />\r\n    }\r\n\r\n    if (isInitStatus === 'redirect') {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    return (\r\n        <div className={autorization}>\r\n            <div className={form}>\r\n                <div className={hTit}>\r\n                    Question\r\n                </div>\r\n                <div className={tit}>\r\n                    {CardToShow.question}\r\n                </div>\r\n                {isShowAnswer && <div className={tit}>\r\n                    {CardToShow.answer}\r\n                </div>}\r\n                {isShowAnswer && <div className={infText}>\r\n                    Your mark:\r\n                     <div className={ratingBlock}><Rating setValue={onSetValue} value={markValue} cardId={CardToShow._id} cardPackId={token}/></div>\r\n                </div>}\r\n                <div className={infText}>\r\n                    {!isShowAnswer && <SuperButton onClick={() => onShowAnswerHandler(true)}>show answer</SuperButton>}\r\n                    <SuperButton onClick={onClickNextHandler}>next</SuperButton>\r\n                    <NavLink to={PATH.CARDS_TABLET}><SuperButton>go to another decks</SuperButton></NavLink>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n\r\n}","import {Redirect, Route, Switch} from 'react-router-dom';\r\n\r\nimport Error404 from '../pages/error404/error404';\r\nimport Login from '../pages/login/login';\r\nimport Profile from '../pages/profile/profile';\r\nimport RecoverPass from '../pages/recoverPass/recoverPass';\r\nimport Registration from '../pages/registration/registration';\r\nimport TabletCards from '../pages/tablet-cards/tablet-cards';\r\nimport SetNewPassword from '../pages/setNewPassword/setNewPassword';\r\nimport React from 'react';\r\nimport Card from '../pages/card/card';\r\nimport {CardGame} from '../pages/cardGame/cardGame';\r\n\r\nexport const PATH = {\r\n    ERROR_404: '/err404',\r\n    LOGIN: '/login',\r\n    PROFILE: '/profile',\r\n    RECOVER_PASS: '/recPassword',\r\n    REGISTRATION: '/reg',\r\n    TEST: '/test',\r\n    CREATE_NEW_PASS:'/set-new-password/:token',\r\n    CARDS_TABLET:'/cards-tablet',\r\n    CARD:'/card/:token',\r\n    CARD_GAME:'/game/:token'\r\n}\r\n\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <div>\r\n            <Switch>\r\n\r\n                <Route path={'/'} exact render={() => <Redirect to={PATH.LOGIN}/>}/>\r\n                <Route path={PATH.LOGIN} render={() => <Login/>}/>\r\n                <Route path={PATH.PROFILE} render={() => <Profile/>}/>\r\n                <Route path={PATH.RECOVER_PASS} render={() => <RecoverPass/>}/>\r\n                <Route path={PATH.REGISTRATION} render={() => <Registration/>}/>\r\n                <Route path={PATH.TEST} render={() => <Redirect to={PATH.LOGIN}/>}/>\r\n                <Route path={PATH.CREATE_NEW_PASS} render={() => <SetNewPassword/>}/>\r\n                <Route path={PATH.CARDS_TABLET} render={() => <TabletCards/>}/>\r\n                <Route path={PATH.CARD} render={() => <Card/>}/>\r\n                <Route path={PATH.CARD_GAME} render={() => <CardGame/>}/>\r\n\r\n                <Route render={() => <Error404/>}/>\r\n\r\n            </Switch>\r\n        </div>\r\n    )\r\n\r\n\r\n}","import React from 'react';\r\nimport {PATH} from '../routes/Routes';\r\nimport {NavLink} from 'react-router-dom'\r\nimport s from './header.module.css';\r\nimport cn from './header.module.css';\r\nimport SuperButton from '../common/c2-SuperButton/SuperButton';\r\nimport {FaReact} from 'react-icons/fa';\r\nimport {FaRegUser} from 'react-icons/fa';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStoreType} from '../../bll/store/store';\r\nimport {logOutTC} from '../../bll/redusers/login-reducer';\r\n\r\nconst {header_tittle, header_nav, header_nav_active} = s;\r\n\r\nconst Header = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const isLogin = useSelector<AppStoreType, boolean>(state => state.login.logIn);\r\n\r\n\r\n    const logOutClickHandler = () => {\r\n        dispatch(logOutTC())\r\n    }\r\n\r\n    return (\r\n        <div className={cn.over}>\r\n            <div className={cn.header}>\r\n                <div><FaReact className={cn.logo}/></div>\r\n                <div className={header_tittle}>\r\n                    <NavLink to={PATH.CREATE_NEW_PASS} className={header_nav} activeClassName={header_nav_active}>Create\r\n                        new pass</NavLink>\r\n                    <NavLink to={PATH.ERROR_404} className={header_nav}\r\n                             activeClassName={header_nav_active}>error404</NavLink>\r\n                    <NavLink to={PATH.LOGIN} className={header_nav} activeClassName={header_nav_active}>login</NavLink>\r\n                    <NavLink to={PATH.PROFILE} className={header_nav}\r\n                             activeClassName={header_nav_active}> <FaRegUser className={cn.menuIcon}/> Profile</NavLink>\r\n                    <NavLink to={PATH.RECOVER_PASS} className={header_nav} activeClassName={header_nav_active}>recover\r\n                        pass</NavLink>\r\n                    <NavLink to={PATH.REGISTRATION} className={header_nav}\r\n                             activeClassName={header_nav_active}>registration</NavLink>\r\n                    <NavLink to={PATH.TEST} className={header_nav} activeClassName={header_nav_active}>test</NavLink>\r\n                    <NavLink to={PATH.CARDS_TABLET} className={header_nav} activeClassName={header_nav_active}>cardsTablet</NavLink>\r\n                    <NavLink to={PATH.CARD} className={header_nav} activeClassName={header_nav_active}>card</NavLink>\r\n\r\n                </div>\r\n                {isLogin && <div><SuperButton onClick={logOutClickHandler}>Logout</SuperButton></div>}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import {Dispatch} from 'redux';\r\nimport {authAPI} from '../../dal/Api';\r\nimport {setProfile} from './profile-reducer';\r\nimport {logInTrue, setLoginError} from './login-reducer';\r\n\r\n\r\nconst SET_IS_INITIALIZED = 'AppReducer/SET_IS_INITIALIZED';\r\n\r\n\r\nexport const SetIsInitialized = (newInitializedStatus: IsInitializedStatusType) => ({\r\n    type: 'AppReducer/SET_IS_INITIALIZED' as const,\r\n    newInitializedStatus\r\n});\r\n\r\n\r\nlet InitialState = {\r\n    isInitialized: 'loading' as IsInitializedStatusType\r\n}\r\n\r\nexport type InitialStateLoginType = typeof InitialState\r\n\r\nexport const AppReducer = (state: InitialStateLoginType = InitialState, action: ProfileReducerActionType): InitialStateLoginType => {\r\n    switch (action.type) {\r\n        case SET_IS_INITIALIZED :\r\n            return {...state, isInitialized: action.newInitializedStatus}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const AuthMe = () => {\r\n    return (dispatch: Dispatch) => {\r\n\r\n        authAPI.authMe()\r\n            .then(res => {\r\n                    dispatch(setProfile(res.data))\r\n                    dispatch(logInTrue(true))\r\n                    dispatch(SetIsInitialized('success'))\r\n\r\n                }\r\n            )\r\n            .catch(error => {\r\n                const errMsg = error.response ? error.response.data.error\r\n                    : (error.message + ', more details in the console');\r\n                if(errMsg!='you are not authorized /ᐠ-ꞈ-ᐟ\\\\') {\r\n                    dispatch(setLoginError(errMsg))\r\n                }\r\n                dispatch(SetIsInitialized('notInitialized'))\r\n            })\r\n    }\r\n}\r\n\r\n\r\n//types\r\n\r\nexport type IsInitializedStatusType = 'loading' | 'success' | 'notInitialized'\r\n\r\nexport type setInitializedType = ReturnType<typeof SetIsInitialized>\r\n\r\nexport type ProfileReducerActionType = setInitializedType\r\n\r\nexport default AppReducer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport Header from './header/header';\r\nimport {Routes} from './routes/Routes';\r\nimport {AppStoreType} from '../bll/store/store';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AuthMe, IsInitializedStatusType} from '../bll/redusers/app-reducer';\r\nimport {Preloader} from './common/Preloader/Preloader';\r\n\r\n// +_+\r\nconst App = () => {\r\n    const isInitialized = useSelector<AppStoreType, IsInitializedStatusType>(state => state.app.isInitialized)\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(AuthMe())\r\n    }, [])\r\n\r\n\r\n    if (isInitialized === 'loading') {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            <Routes/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {EnterNewPassReducer} from '../redusers/enterNewPass-reducer';\r\nimport {LoginReducer} from '../redusers/login-reducer';\r\nimport {TestReducer} from '../redusers/test-reducer';\r\nimport {RecoverPassReducer} from '../redusers/recoverPass-reducer';\r\nimport {RegistrationReducer} from '../redusers/registration-reducer';\r\nimport {Error404Reducer} from '../redusers/error404-reducer';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport ProfileReducer from '../redusers/profile-reducer';\r\nimport {AppReducer} from '../redusers/app-reducer';\r\nimport TabletReducer from '../redusers/tablet-reducer';\r\nimport CardReducer from '../redusers/card-reducer';\r\nimport {cardGameReducer} from '../redusers/card-game-reducer';\r\n\r\n\r\nconst reducers = combineReducers({\r\n    enterNewPass: EnterNewPassReducer,\r\n    login: LoginReducer,\r\n    test: TestReducer,\r\n    recoverPass: RecoverPassReducer,\r\n    registration: RegistrationReducer,\r\n    error404: Error404Reducer,\r\n    profile: ProfileReducer,\r\n    app: AppReducer,\r\n    tablet: TabletReducer,\r\n    card: CardReducer,\r\n    cardGame:cardGameReducer\r\n})\r\n\r\n\r\nconst store = createStore(reducers, composeWithDevTools(applyMiddleware(thunkMiddleware),))\r\n\r\n\r\nexport type AppStoreType = ReturnType<typeof reducers>\r\n\r\n\r\nexport default store\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store","\r\n\r\n\r\n\r\n\r\n\r\nexport const EnterNewPassReducer = (state: any={}, action: any) => {\r\n\r\n            return state\r\n    }\r\n","\r\n\r\n\r\nexport const TestReducer = (state: any={}, action: any) => {\r\n\r\n    return state\r\n}\r\n","\r\n\r\n\r\nexport const Error404Reducer = (state: any={}, action: any) => {\r\n\r\n    return state\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './main/ui/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {Provider} from 'react-redux';\r\nimport store from './main/bll/store/store';\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n    <App />\r\n   </Provider>\r\n  </React.StrictMode>\r\n    </HashRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"over\":\"header_over__1HLph\",\"logo\":\"header_logo__2uIDE\",\"header\":\"header_header__1yRgS\",\"header_tittle\":\"header_header_tittle__3JxBO\",\"menuIcon\":\"header_menuIcon__1_wu_\",\"header_nav\":\"header_header_nav__3G-jk\",\"header_nav_active\":\"header_header_nav_active__sH-CJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"test_component\":\"card_test_component__dLg81\",\"profile\":\"card_profile__km4Li\",\"user\":\"card_user__2xKYL\",\"user_card\":\"card_user_card__1T5dm\",\"logo\":\"card_logo__4Por9\",\"name\":\"card_name__1kHkS\",\"about\":\"card_about__1wvBX\",\"polz\":\"card_polz__3-NoP\",\"polztit\":\"card_polztit__23IIG\",\"table\":\"card_table__3qxty\",\"tit\":\"card_tit__3exBe\",\"inp\":\"card_inp__1rntG\",\"mainTab\":\"card_mainTab__2bFH5\",\"rangeValues\":\"card_rangeValues__sTr4C\",\"activeBtn\":\"card_activeBtn__2atwb\",\"addDeckModal\":\"card_addDeckModal__35lHf\",\"DelDeckModal\":\"card_DelDeckModal__3Y1IH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"autorization\":\"ResponsePage_autorization__4GJHd\",\"form\":\"ResponsePage_form__4-Ca6\",\"hTit\":\"ResponsePage_hTit__1W79R\",\"tit\":\"ResponsePage_tit__12CGa\",\"imgMailSent\":\"ResponsePage_imgMailSent__1BkBF\",\"infText\":\"ResponsePage_infText__2phwX\",\"linkforgot\":\"ResponsePage_linkforgot__2Bb9K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"group\":\"SuperInputText_group__3qDwJ\",\"bar\":\"SuperInputText_bar__VxtwI\",\"highlight\":\"SuperInputText_highlight__iwiHC\",\"inputHighlighter\":\"SuperInputText_inputHighlighter___pGzO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"autorization\":\"Login_autorization__1hqT6\",\"form\":\"Login_form__3xakk\",\"hTit\":\"Login_hTit__41TBh\",\"tit\":\"Login_tit__2rEuJ\",\"linkforgot\":\"Login_linkforgot__oTByR\",\"overforgot\":\"Login_overforgot__1wK63\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"autorization\":\"profile_autorization__1mBsj\",\"form\":\"profile_form__1pDGq\",\"hTit\":\"profile_hTit__16tt0\",\"tit\":\"profile_tit__29fjK\",\"ava_img\":\"profile_ava_img__14Xro\",\"nameProfile\":\"profile_nameProfile__3Uq8P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"autorization\":\"cardGame_autorization__1T3o6\",\"form\":\"cardGame_form__1yhgS\",\"hTit\":\"cardGame_hTit__2VRLV\",\"tit\":\"cardGame_tit__2C06E\",\"imgMailSent\":\"cardGame_imgMailSent__3Od6U\",\"infText\":\"cardGame_infText__3IClE\",\"linkforgot\":\"cardGame_linkforgot__2VyoB\",\"ratingBlock\":\"cardGame_ratingBlock__1jMuJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"autorization\":\"recoverPass_autorization__25OjP\",\"form\":\"recoverPass_form__83iBH\",\"hTit\":\"recoverPass_hTit__10ml0\",\"tit\":\"recoverPass_tit__3D-5-\",\"linkforgot\":\"recoverPass_linkforgot__3hksA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"autorization\":\"registation_autorization__1zULC\",\"form\":\"registation_form__2kZb9\",\"hTit\":\"registation_hTit__U2AQU\",\"tit\":\"registation_tit__1Yhje\",\"linkforgot\":\"registation_linkforgot__159EK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"autorization\":\"EditProfile_autorization__nrPYc\",\"form\":\"EditProfile_form__1ST_n\",\"hTit\":\"EditProfile_hTit__37UUs\",\"tit\":\"EditProfile_tit__3Iju1\",\"ava_img\":\"EditProfile_ava_img__2du8b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__30Swk\",\"modal_active\":\"Modal_modal_active__f9_Yv\",\"modal_content\":\"Modal_modal_content__2yiol\",\"modal_content_active\":\"Modal_modal_content_active__1QEyg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"autorization\":\"setNewPassword_autorization__2kpM6\",\"form\":\"setNewPassword_form__1EVaR\",\"hTit\":\"setNewPassword_hTit__kBGPr\",\"tit\":\"setNewPassword_tit__33Duj\",\"linkforgot\":\"setNewPassword_linkforgot__1e3hy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__WnAx4\",\"red\":\"SuperButton_red__2Ek9W\",\"disableClass\":\"SuperButton_disableClass__2GPXd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnGroup\":\"Paginator_btnGroup__1h0NX\",\"page\":\"Paginator_page__1xbRc\",\"pageSelect\":\"Paginator_pageSelect__1ztob\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableTitle\":\"CardOnly_tableTitle__IsKxE\",\"btnBlock\":\"CardOnly_btnBlock__m4v8L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableTitle\":\"CardOnlyCard_tableTitle__2u_Gm\",\"btnBlock\":\"CardOnlyCard_btnBlock__MW_Vp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"starOn\":\"star_starOn__3_nGn\",\"starOf\":\"star_starOf__3MC5A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"err404\":\"error404_err404__GI_XR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__1HzG7\",\"load4\":\"Preloader_load4__LaTT8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"activeBtn\":\"sortBtn_activeBtn__3VLdP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"SuperSelect_select__2RGK8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"raiting\":\"raiting_raiting__j-xew\"};"],"sourceRoot":""}